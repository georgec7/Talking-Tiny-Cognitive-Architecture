 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\georg\OneDrive\DOCUME~1\GitHub\TALKIN~1\PDPROJ~1\PDPROJ~1\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 19
 0000           ; //----------------------------------------------------------------------------
 0000           ; // C main line
 0000           ; //----------------------------------------------------------------------------
 0000           ; 
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; #include <stdio.h>
 0000           ; #define ADDRESS_TEMP_SENSOR 0x18
 0000           ; #define READ_BYTE                     0x01
 0000           ; #define WRITE_BYTE          0x00
 0000           ; #define TEMP_REG              0x05
 0000           ; 
 0000           ; // Function prototype
 0000           ; void read_temp_and_print(void);
 0000           ; 
 0000           ; 
 0000           ; 
 0000           ; void main(void)
 0000           ; {
 0000                   .dbline 22
 0000           ;       // M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
 0000           ;       // Insert your main routine code here.
 0000           ;       LCD_2_Start();
 0000 10                push X
 0001 7C0000            xcall _LCD_2_Start
 0004                   .dbline 23
 0004           ;       I2CHW_Temp_EnableMstr();
 0004 7C0000            xcall _I2CHW_Temp_EnableMstr
 0007 20                pop X
 0008 8003              xjmp L3
 000A           L2:
 000A                   .dbline 27
 000A           ;       
 000A           ;       
 000A           ;       while (1)
 000A           ;       {
 000A                   .dbline 28
 000A           ;               read_temp_and_print();  
 000A 9004              xcall _read_temp_and_print
 000C                   .dbline 29
 000C           ;       }
 000C           L3:
 000C                   .dbline 26
 000C 8FFD              xjmp L2
 000E           X0:
 000E                   .dbline -2
 000E           L1:
 000E                   .dbline 0 ; func end
 000E 8FFF              jmp .
 0010                   .dbend
                        .area lit(rom, con, rel, lit)
 0000           L6:
 0000 68656C6C6F0A00    .byte 'h,'e,'l,'l,'o,10,0
 0007 00000000000000000000      .word 0,0,0,0,0
 0011 000000            .byte 0,0,0
                        .area text(rom, con, rel)
 0010                   .dbfile C:\Users\georg\OneDrive\DOCUME~1\GitHub\TALKIN~1\PDPROJ~1\PDPROJ~1\main.c
 0010                   .dbfunc e read_temp_and_print _read_temp_and_print fV
 0010           ;         buffer -> X+24
 0010           ;        buffer1 -> X+4
 0010           ;    Temperature -> X+2
 0010           ;      LowerByte -> X+1
 0010           ;      UpperByte -> X+0
 0010           _read_temp_and_print::
 0010                   .dbline -1
 0010 10                push X
 0011 4F                mov X,SP
 0012 3821              add SP,33
 0014                   .dbline 33
 0014           ; }
 0014           ; 
 0014           ; void read_temp_and_print(void)
 0014           ; {
 0014                   .dbline 34
 0014           ;       BYTE UpperByte = 0;
 0014 560000            mov [X+0],0
 0017                   .dbline 35
 0017           ;       BYTE LowerByte = 0;
 0017 560100            mov [X+1],0
 001A                   .dbline 36
 001A           ;       INT Temperature =0;
 001A 560300            mov [X+3],0
 001D 560200            mov [X+2],0
 0020                   .dbline 38
 0020           ;       char buffer[9];
 0020           ;       char buffer1[20] ="hello\n";
 0020 62D000            mov REG[0xd0],>__r0
 0023 550000            mov [__r1],<L6
 0026 550000            mov [__r0],>L6
 0029 5A00              mov [__r3],X
 002B 060004            add [__r3],4
 002E 62D503            mov REG[0xd5],3
 0031 10                push X
 0032 550000            mov [__rX],0
 0035 5100              mov A,[__r0]
 0037 5800              mov X,[__r1]
 0039           X1:
 0039 08                push A
 003A 28                romx
 003B 62D000            mov REG[0xd0],>__r0
 003E 3F00              mvi [__r3],A
 0040 18                pop A
 0041 75                inc X
 0042 0900              adc A,0
 0044 7600              inc [__rX]
 0046 3C0014            cmp [__rX],20
 0049 BFEF              jnz X1
 004B                   .dbline 40
 004B           ; 
 004B           ;       I2CHW_Temp_fSendStart(ADDRESS_TEMP_SENSOR, I2CHW_Temp_WRITE);
 004B 5700              mov X,0
 004D 5018              mov A,24
 004F 7C0000            xcall _I2CHW_Temp_fSendStart
 0052 20                pop X
 0053 62D000            mov REG[0xd0],>__r0
 0056                   .dbline 44
 0056           ;       
 0056           ; 
 0056           ;       
 0056           ;       I2CHW_Temp_fWrite(TEMP_REG);
 0056 10                push X
 0057 5005              mov A,5
 0059 7C0000            xcall _I2CHW_Temp_fWrite
 005C 20                pop X
 005D 62D000            mov REG[0xd0],>__r0
 0060                   .dbline 46
 0060           ; 
 0060           ;       I2CHW_Temp_SendStop();
 0060 10                push X
 0061 7C0000            xcall _I2CHW_Temp_SendStop
 0064                   .dbline 48
 0064           ;       
 0064           ;       I2CHW_Temp_fSendStart(ADDRESS_TEMP_SENSOR, I2CHW_Temp_READ);
 0064 5701              mov X,1
 0066 5018              mov A,24
 0068 7C0000            xcall _I2CHW_Temp_fSendStart
 006B 20                pop X
 006C 62D000            mov REG[0xd0],>__r0
 006F                   .dbline 49
 006F           ;       UpperByte = I2CHW_Temp_bRead(I2CHW_Temp_ACKslave);
 006F 10                push X
 0070 5001              mov A,1
 0072 7C0000            xcall _I2CHW_Temp_bRead
 0075 20                pop X
 0076 62D000            mov REG[0xd0],>__r0
 0079 5400              mov [X+0],A
 007B                   .dbline 50
 007B           ;       LowerByte = I2CHW_Temp_bRead(I2CHW_Temp_NAKslave);
 007B 10                push X
 007C 5000              mov A,0
 007E 7C0000            xcall _I2CHW_Temp_bRead
 0081 20                pop X
 0082 62D000            mov REG[0xd0],>__r0
 0085 5401              mov [X+1],A
 0087                   .dbline 51
 0087           ;       I2CHW_Temp_SendStop();
 0087 10                push X
 0088 7C0000            xcall _I2CHW_Temp_SendStop
 008B 20                pop X
 008C                   .dbline 55
 008C           ;       
 008C           ;       
 008C           ;       //First Check flag bits
 008C           ;       if ((UpperByte & 0x80) == 0x80){ //TA ≥ TCRIT
 008C 62D000            mov REG[0xd0],>__r0
 008F 5200              mov A,[X+0]
 0091 2180              and A,-128
 0093 3980              cmp A,-128
 0095 B001              jnz L7
 0097                   .dbline 56
 0097           ;       }
 0097                   .dbline 56
 0097           L7:
 0097                   .dbline 57
 0097           ;       if ((UpperByte & 0x40) == 0x40){ //TA > TUPPER
 0097 62D000            mov REG[0xd0],>__r0
 009A 5200              mov A,[X+0]
 009C 2140              and A,64
 009E 3940              cmp A,64
 00A0 B001              jnz L9
 00A2                   .dbline 58
 00A2           ;       }
 00A2                   .dbline 58
 00A2           L9:
 00A2                   .dbline 59
 00A2           ;       if ((UpperByte & 0x20) == 0x20){ //TA < TLOWER
 00A2 62D000            mov REG[0xd0],>__r0
 00A5 5200              mov A,[X+0]
 00A7 2120              and A,32
 00A9 3920              cmp A,32
 00AB B001              jnz L11
 00AD                   .dbline 60
 00AD           ;       }
 00AD                   .dbline 60
 00AD           L11:
 00AD                   .dbline 61
 00AD           ;       UpperByte = UpperByte & 0x1F; //Clear flag bits
 00AD 27001F            and [X+0],31
 00B0                   .dbline 62
 00B0           ;       if ((UpperByte & 0x10) == 0x10){ //TA < 0°C
 00B0 62D000            mov REG[0xd0],>__r0
 00B3 5200              mov A,[X+0]
 00B5 2110              and A,16
 00B7 3910              cmp A,16
 00B9 B050              jnz L13
 00BB                   .dbline 63
 00BB           ;       UpperByte = UpperByte & 0x0F;//Clear SIGN
 00BB                   .dbline 63
 00BB 27000F            and [X+0],15
 00BE                   .dbline 64
 00BE           ;       Temperature = 256 - (UpperByte * 16 + LowerByte / 16);
 00BE 5201              mov A,[X+1]
 00C0 5300              mov [__r1],A
 00C2 5000              mov A,0
 00C4 08                push A
 00C5 5010              mov A,16
 00C7 08                push A
 00C8 5000              mov A,0
 00CA 08                push A
 00CB 5100              mov A,[__r1]
 00CD 08                push A
 00CE 7C0000            xcall __divmod_16X16_16
 00D1 18                pop A
 00D2 5300              mov [__r1],A
 00D4 18                pop A
 00D5 5300              mov [__r0],A
 00D7 38FE              add SP,-2
 00D9 5200              mov A,[X+0]
 00DB 5300              mov [__r3],A
 00DD 550000            mov [__r2],0
 00E0 6500              asl [__r3]
 00E2 6B00              rlc [__r2]
 00E4 6500              asl [__r3]
 00E6 6B00              rlc [__r2]
 00E8 6500              asl [__r3]
 00EA 6B00              rlc [__r2]
 00EC 6500              asl [__r3]
 00EE 6B00              rlc [__r2]
 00F0 5100              mov A,[__r3]
 00F2 0200              add A,[__r1]
 00F4 5300              mov [__r1],A
 00F6 5100              mov A,[__r2]
 00F8 0A00              adc A,[__r0]
 00FA 5300              mov [__r0],A
 00FC 5000              mov A,0
 00FE 1200              sub A,[__r1]
 0100 5403              mov [X+3],A
 0102 5001              mov A,1
 0104 1A00              sbb A,[__r0]
 0106 5402              mov [X+2],A
 0108                   .dbline 65
 0108           ;       }else //TA ≥ 0°C
 0108 8042              xjmp L14
 010A           L13:
 010A                   .dbline 67
 010A           ;       
 010A           ;       Temperature = (UpperByte * 16 + LowerByte / 16);//Temperature = Ambient Temperature (°C)
 010A 62D000            mov REG[0xd0],>__r0
 010D 5201              mov A,[X+1]
 010F 5300              mov [__r1],A
 0111 5000              mov A,0
 0113 08                push A
 0114 5010              mov A,16
 0116 08                push A
 0117 5000              mov A,0
 0119 08                push A
 011A 5100              mov A,[__r1]
 011C 08                push A
 011D 7C0000            xcall __divmod_16X16_16
 0120 18                pop A
 0121 5300              mov [__r1],A
 0123 18                pop A
 0124 5300              mov [__r0],A
 0126 38FE              add SP,-2
 0128 5200              mov A,[X+0]
 012A 5300              mov [__r3],A
 012C 550000            mov [__r2],0
 012F 6500              asl [__r3]
 0131 6B00              rlc [__r2]
 0133 6500              asl [__r3]
 0135 6B00              rlc [__r2]
 0137 6500              asl [__r3]
 0139 6B00              rlc [__r2]
 013B 6500              asl [__r3]
 013D 6B00              rlc [__r2]
 013F 5100              mov A,[__r3]
 0141 0200              add A,[__r1]
 0143 5403              mov [X+3],A
 0145 5100              mov A,[__r2]
 0147 0A00              adc A,[__r0]
 0149 5402              mov [X+2],A
 014B           L14:
 014B                   .dbline 69
 014B           ;       
 014B           ;       LCD_2_Position(0,0);
 014B 10                push X
 014C 5000              mov A,0
 014E 5700              mov X,0
 0150 7C0000            xcall _LCD_2_Position
 0153 20                pop X
 0154                   .dbline 70
 0154           ;       LCD_2_PrHexInt(Temperature);
 0154 10                push X
 0155 5202              mov A,[X+2]
 0157 08                push A
 0158 5203              mov A,[X+3]
 015A 20                pop X
 015B 7C0000            xcall _LCD_2_PrHexInt
 015E                   .dbline 71
 015E           ;       LCD_2_Delay50uTimes(255);
 015E 50FF              mov A,-1
 0160 7C0000            xcall _LCD_2_Delay50uTimes
 0163                   .dbline 72
 0163           ;       LCD_2_Delay50uTimes(255);
 0163 50FF              mov A,-1
 0165 7C0000            xcall _LCD_2_Delay50uTimes
 0168                   .dbline 73
 0168           ;       LCD_2_Delay50uTimes(255);
 0168 50FF              mov A,-1
 016A 7C0000            xcall _LCD_2_Delay50uTimes
 016D                   .dbline 74
 016D           ;       LCD_2_Delay50uTimes(255);
 016D 50FF              mov A,-1
 016F 7C0000            xcall _LCD_2_Delay50uTimes
 0172 20                pop X
 0173                   .dbline -2
 0173           L5:
 0173 38DF              add SP,-33
 0175 20                pop X
 0176                   .dbline 0 ; func end
 0176 7F                ret
 0177                   .dbsym l buffer 24 A[9:9]c
 0177                   .dbsym l buffer1 4 A[20:20]c
 0177                   .dbsym l Temperature 2 I
 0177                   .dbsym l LowerByte 1 c
 0177                   .dbsym l UpperByte 0 c
 0177                   .dbend
