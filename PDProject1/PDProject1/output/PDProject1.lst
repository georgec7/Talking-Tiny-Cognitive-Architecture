FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    1.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C28xxx microcontroller devices.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting	
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) 
                                        (0082) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0083) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0084) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0085) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0086) ; bytes on the stack which are otherwise required for the return address. If
                                        (0087) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0088) ; release, the C compiler automatically places an infinite loop at the end
                                        (0089) ; of main, rather than a return instruction.)
                                        (0090) ;
                                        (0091) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0092) 
                                        (0093) 
                                        (0094) ;-----------------------------------------------------------------------------
                                        (0095) ; Interrupt Vector Table
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0099) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0100) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0101) ; vector jump targets are modified automatically according to the user
                                        (0102) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0103) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0104) ; configuration files. If you need to hard code a vector, update the
                                        (0105) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0106) ; of this file.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) 
                                        (0109)     AREA TOP (ROM, ABS, CON)
                                        (0110) 
                                        (0111)     org   0                        ;Reset Interrupt Vector
                                        (0112) IF	(TOOLCHAIN & HITECH)
                                        (0113) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0114) ELSE
0000: 80 7F    JMP   0x0080             (0115)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0116) ENDIF
                                        (0117)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0118)     ;---------------------------------------------------
                                        (0119)     ; Insert your custom code below this banner
                                        (0120)     ;---------------------------------------------------
                                        (0121) 
                                        (0122)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0123)     halt                           ;Stop execution if power falls too low
                                        (0124) 
                                        (0125)     org   08h                      ;Analog Column 0 / Decimator 0 Interrupt Vector
                                        (0126)     // call	void_handler
0008: 7E       RETI                     (0127)     reti
                                        (0128) 
                                        (0129)     org   0Ch                      ;Analog Column 1 / Decimator 1 Interrupt Vector
                                        (0130)     // call	void_handler
000C: 7E       RETI                     (0131)     reti
                                        (0132) 
                                        (0133)     org   10h                      ;Analog Column 2 / Decimator 2 Interrupt Vector
                                        (0134)     // call	void_handler
0010: 7E       RETI                     (0135)     reti
                                        (0136) 
                                        (0137)     org   14h                      ;Analog Column 3 / Decimator 3 Interrupt Vector
                                        (0138)     // call	void_handler
0014: 7E       RETI                     (0139)     reti
                                        (0140)     
                                        (0141)     org   18h                      ;VC3 Interrupt Vector
                                        (0142)     // call	void_handler
0018: 7E       RETI                     (0143)     reti
                                        (0144) 
                                        (0145)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 21 ED LJMP  PSoC_GPIO_ISR      (0146)     ljmp	PSoC_GPIO_ISR
001F: 7E       RETI                     (0147)     reti
                                        (0148) 
                                        (0149)     org   20h                      ;PSoC Block DBC00 Interrupt Vector
0020: 7D 0C D8 LJMP  _DUALADC_1_CNT1_ISR(0150)     ljmp	_DUALADC_1_CNT1_ISR
0023: 7E       RETI                     (0151)     reti
                                        (0152) 
                                        (0153)     org   24h                      ;PSoC Block DBC01 Interrupt Vector
                                        (0154)     // call	void_handler
0024: 7E       RETI                     (0155)     reti
                                        (0156) 
                                        (0157)     org   28h                      ;PSoC Block DCC02 Interrupt Vector
0028: 7D 0C DE LJMP  _DUALADC_1_PWM16_ISR(0158)     ljmp	_DUALADC_1_PWM16_ISR
002B: 7E       RETI                     (0159)     reti
                                        (0160) 
                                        (0161)     org   2Ch                      ;PSoC Block DCC03 Interrupt Vector
002C: 7D 0C DB LJMP  _DUALADC_1_CNT2_ISR(0162)     ljmp	_DUALADC_1_CNT2_ISR
002F: 7E       RETI                     (0163)     reti
                                        (0164)     
                                        (0165)     org   30h                      ;PSoC Block DBC10 Interrupt Vector
                                        (0166)     // call	void_handler
0030: 7E       RETI                     (0167)     reti
                                        (0168) 
                                        (0169)     org   34h                      ;PSoC Block DBC11 Interrupt Vector
0034: 7D 05 88 LJMP  _PWM8_1_ISR        (0170)     ljmp	_PWM8_1_ISR
0037: 7E       RETI                     (0171)     reti
                                        (0172) 
                                        (0173)     org   38h                      ;PSoC Block DCC12 Interrupt Vector
                                        (0174)     // call	void_handler
0038: 7E       RETI                     (0175)     reti
                                        (0176) 
                                        (0177)     org   3Ch                      ;PSoC Block DCC13 Interrupt Vector
003C: 7D 0E 99 LJMP  __UserModules_end|__text_start|_Timer16_1_ISR|_Timer16_1_ISR(0178)     ljmp	_Timer16_1_ISR
003F: 7E       RETI                     (0179)     reti
                                        (0180) 
                                        (0181) 	org   40h                      ;PSoC Block DBC20 Interrupt Vector
                                        (0182)     // call	void_handler
0040: 7E       RETI                     (0183)     reti
                                        (0184) 	
                                        (0185) 	org   44h                      ;PSoC Block DBC21 Interrupt Vector
                                        (0186)     // call	void_handler
0044: 7E       RETI                     (0187)     reti
                                        (0188) 	
                                        (0189) 	org   48h                      ;PSoC Block DCC22 Interrupt Vector
                                        (0190)     // call	void_handler
0048: 7E       RETI                     (0191)     reti
                                        (0192) 	
                                        (0193) 	org   4Ch                      ;PSoC Block DCC23 Interrupt Vector
                                        (0194)     // call	void_handler
004C: 7E       RETI                     (0195)     reti
                                        (0196) 	 
                                        (0197)     org   60h                      ;PSoC I2C0 Interrupt Vector
0060: 7D 0B 0D LJMP  _I2CHW_Temp_ISR    (0198)     ljmp	_I2CHW_Temp_ISR
0063: 7E       RETI                     (0199)     reti
                                        (0200) 
                                        (0201) 	org   64h                      ;PSoC I2C1 Interrupt Vector
                                        (0202)     // call	void_handler
0064: 7E       RETI                     (0203)     reti
                                        (0204) 	
                                        (0205) 	org   68h                      ;PSoC SARADC Interrupt Vector
                                        (0206)     // call	void_handler
0068: 7E       RETI                     (0207)     reti
                                        (0208) 	
                                        (0209) 	org   6Ch                      ;PSoC RTC Interrupt Vector
                                        (0210)     // call	void_handler
006C: 7E       RETI                     (0211)     reti
                                        (0212) 	
                                        (0213) 	org   70h                      ;Analog Column 4 Interrupt Vector
                                        (0214)     // call	void_handler
0070: 7E       RETI                     (0215)     reti
                                        (0216) 	
                                        (0217) 	org   74h                      ;Analog Column 5 Interrupt Vector
                                        (0218)     // call	void_handler
0074: 7E       RETI                     (0219)     reti
                                        (0220) 	
                                        (0221)     org   7Ch                      ;Sleep Timer Interrupt Vector
                                        (0222)     // call	void_handler
007C: 7E       RETI                     (0223)     reti
0080: 71 10    OR    F,0x10             
                                        (0224)     ;---------------------------------------------------
                                        (0225)     ; Insert your custom code above this banner
                                        (0226)     ;---------------------------------------------------
                                        (0227)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0228) 
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;  Start of Execution.
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0233) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0234) ;
                                        (0235) 
                                        (0236) IF	(TOOLCHAIN & HITECH)
                                        (0237)  	AREA PD_startup(CODE, REL, CON)
                                        (0238) ELSE
                                        (0239)     org 80h
                                        (0240) ENDIF
                                        (0241) __Start:
                                        (0242) 
                                        (0243)     ; initialize SMP values for voltage stabilization, if required,
                                        (0244)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0245)     ; least for now. 
                                        (0246)     ;
                                        (0247)     M8C_SetBank1
0082: 62 E3 87 MOV   REG[0xE3],0x87     (0248)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0085: 70 EF    AND   F,0xEF             
0087: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0249)     M8C_SetBank0
                                        (0250) 
                                        (0251) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0252) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0253)     M8C_EnableWatchDog
                                        (0254) ENDIF
                                        (0255) 
                                        (0256) IF ( SELECT_32K )
                                        (0257)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0258) ELSE
008A: 41 FE FB AND   REG[0xFE],0xFB     (0259)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0260) ENDIF
                                        (0261) 
                                        (0262)     ;---------------------------
                                        (0263)     ; Set up the Temporary stack
                                        (0264)     ;---------------------------
                                        (0265)     ; A temporary stack is set up for the SSC instructions.
                                        (0266)     ; The real stack start will be assigned later.
                                        (0267)     ;
                                        (0268) _stack_start:          equ 80h
008D: 50 80    MOV   A,0x80             (0269)     mov   A, _stack_start          ; Set top of stack to end of used RAM
008F: 4E       SWAP  SP,A               (0270)     swap  SP, A                    ; This is only temporary if going to LMM
0090: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0271) 
                                        (0272)     ;------------------------
                                        (0273)     ; Set Power-related Trim 
                                        (0274)     ;------------------------
                                        (0275) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0276) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0277)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0278)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0279)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0280) ELSE
                                        (0281) 	IF ( AGND_BYPASS )
                                        (0282)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0283)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0284)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0285)     ; value using the proper trim values.
                                        (0286)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0287)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0288)   ENDIF
                                        (0289)  ENDIF
                                        (0290) ENDIF ; 5.0 V Operation
                                        (0291) 
                                        (0292) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0293)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0294)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0295)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0296)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0297)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0298)  ENDIF
                                        (0299) ENDIF ; 3.3 Volt Operation
                                        (0300) 
                                        (0301) 
0093: 55 F8 00 MOV   [sortVocabTables+51],0x0(0302)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0096: 55 F9 00 MOV   [sortVocabTables+52],0x0(0303)     mov  [bSSC_KEYSP], 0
0099: 71 10    OR    F,0x10             
                                        (0304) 
                                        (0305)     ;---------------------------------------
                                        (0306)     ; Initialize Crystal Oscillator and PLL
                                        (0307)     ;---------------------------------------
                                        (0308) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0309)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0310)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0311)     ; is left off.  The SleepTimer period is set to 1 sec to time the wait for
                                        (0312)     ; the ECO to stabilize.
                                        (0313)     ;
                                        (0314)     M8C_SetBank1
                                        (0315)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0316)     M8C_SetBank0
                                        (0317)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0318)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0319)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0320) .WaitFor1s:
                                        (0321)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0322)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0323)                                           ;  since interrupts are not globally enabled
                                        (0324) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0325)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0326)     M8C_SetBank1
009B: 62 E0 02 MOV   REG[0xE0],0x2      (0327)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
009E: 70 EF    AND   F,0xEF             
00A0: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0328)     M8C_SetBank0
                                        (0329)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0330) 
                                        (0331) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0332) 
                                        (0333) IF ( PLL_MODE )
                                        (0334)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0335)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0336)     ;
                                        (0337)     M8C_SetBank1
                                        (0338)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0339)     M8C_SetBank0
                                        (0340)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0341)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0342) 
                                        (0343) .WaitFor16ms:
                                        (0344)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0345)     jz   .WaitFor16ms
                                        (0346)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0347)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0348)     M8C_SetBank0
                                        (0349) 
                                        (0350) IF      ( WAIT_FOR_32K )
                                        (0351) ELSE ; !( WAIT_FOR_32K )
                                        (0352)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0353)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0354) ENDIF ;(WAIT_FOR_32K)
                                        (0355) ENDIF ;(PLL_MODE)
                                        (0356) 
                                        (0357) 	;-------------------------------------------------------
                                        (0358)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0359)     ;-------------------------------------------------------
                                        (0360) 
                                        (0361)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0362) 
                                        (0363) IF (SYSCLK_SOURCE)
                                        (0364)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0365) ENDIF
                                        (0366)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0367) 
                                        (0368) 	;------------------------
                                        (0369) 	; Close CT leakage path.
                                        (0370) 	;------------------------
00A3: 62 71 05 MOV   REG[0x71],0x5      (0371) 	mov reg[ACC00CR0], 05h
00A6: 62 75 05 MOV   REG[0x75],0x5      (0372) 	mov reg[ACC01CR0], 05h
00A9: 62 79 05 MOV   REG[0x79],0x5      (0373) 	mov reg[ACC02CR0], 05h
00AC: 62 7D 05 MOV   REG[0x7D],0x5      (0374) 	mov reg[ACC03CR0], 05h
00AF: 62 D1 03 MOV   REG[0xD1],0x3      
                                        (0375) 
                                        (0376) 
                                        (0377) 
                                        (0378) IF	(TOOLCHAIN & HITECH)
                                        (0379)     ;---------------------------------------------
                                        (0380)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0381)     ;---------------------------------------------
                                        (0382) 	global		__Lstackps
                                        (0383) 	mov     a,low __Lstackps
                                        (0384) 	swap    a,sp
                                        (0385) 
                                        (0386) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0387)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0388)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0389)     RAM_SETPAGE_CUR 0
                                        (0390)     RAM_SETPAGE_MVW 0
                                        (0391)     RAM_SETPAGE_MVR 0
                                        (0392)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0393)       or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0394)     ELSE
                                        (0395)       or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0396)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0397) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0398) ELSE
                                        (0399)     ;---------------------------------------------
                                        (0400)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0401)     ;---------------------------------------------
                                        (0402) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0403)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00B2: 50 00    MOV   A,0x0              (0404)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00B4: 4E       SWAP  SP,A               (0405)     swap  A, SP
00B5: 62 D3 03 MOV   REG[0xD3],0x3      
00B8: 62 D0 00 MOV   REG[0xD0],0x0      
00BB: 62 D5 00 MOV   REG[0xD5],0x0      
00BE: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0406)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0407)     RAM_SETPAGE_CUR 0
                                        (0408)     RAM_SETPAGE_MVW 0
                                        (0409)     RAM_SETPAGE_MVR 0
                                        (0410) 
                                        (0411)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00C1: 71 C0    OR    F,0xC0             (0412)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0413)   ELSE
                                        (0414)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0415)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0416) ELSE
                                        (0417)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0418)     swap  SP, A
                                        (0419) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0420) ENDIF ;	TOOLCHAIN
                                        (0421) 
                                        (0422)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0423)     ;---------------------------------------------------
                                        (0424)     ; Insert your custom code below this banner
                                        (0425)     ;---------------------------------------------------
                                        (0426) 
                                        (0427)     ;---------------------------------------------------
                                        (0428)     ; Insert your custom code above this banner
                                        (0429)     ;---------------------------------------------------
                                        (0430)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0431) 
                                        (0432)     ;-------------------------
                                        (0433)     ; Load Base Configuration
                                        (0434)     ;-------------------------
                                        (0435)     ; Load global parameter settings and load the user modules in the
                                        (0436)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0437)     ; to minimize start up time; (2) We may still need to play with the
                                        (0438)     ; Sleep Timer.
                                        (0439)     ;
00C3: 7C 04 BD LCALL 0x04BD             (0440)     lcall LoadConfigInit
00C6: 70 EF    AND   F,0xEF             
                                        (0441)     M8C_SetBank0
                                        (0442) 
                                        (0443)     ;-----------------------------------
                                        (0444)     ; Initialize C Run-Time Environment
                                        (0445)     ;-----------------------------------
                                        (0446) IF ( C_LANGUAGE_SUPPORT )
                                        (0447) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0448)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0449)     mov  [__r0],<__bss_start
                                        (0450) BssLoop:
                                        (0451)     cmp  [__r0],<__bss_end
                                        (0452)     jz   BssDone
                                        (0453)     mvi  [__r0],A
                                        (0454)     jmp  BssLoop
                                        (0455) BssDone:
                                        (0456)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0457)     mov  X,<__idata_start
                                        (0458)     mov  [__r0],<__data_start
                                        (0459) IDataLoop:
                                        (0460)     cmp  [__r0],<__data_end
                                        (0461)     jz   C_RTE_Done
                                        (0462)     push A
                                        (0463)     romx
                                        (0464)     mvi  [__r0],A
                                        (0465)     pop  A
                                        (0466)     inc  X
                                        (0467)     adc  A,0
                                        (0468)     jmp  IDataLoop
                                        (0469) 
                                        (0470) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0471) 
                                        (0472) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00C8: 62 D0 00 MOV   REG[0xD0],0x0      (0473)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0474)                                        ; to use the Virtual Register page.
                                        (0475) 
                                        (0476)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0477)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0478)     ; text segment and may have been relocated by the Code Compressor.
                                        (0479)     ;
00CB: 50 03    MOV   A,0x3              (0480)     mov   A, >__pXIData                ; Get the address of the flash
00CD: 57 F6    MOV   X,0xF6             (0481)     mov   X, <__pXIData                ;   pointer to the xidata area.
00CF: 08       PUSH  A                  (0482)     push  A
00D0: 28       ROMX                     (0483)     romx                               ; get the MSB of xidata's address
00D1: 53 BA    MOV   [__r0],A           (0484)     mov   [__r0], A
00D3: 18       POP   A                  (0485)     pop   A
00D4: 75       INC   X                  (0486)     inc   X
00D5: 09 00    ADC   A,0x0              (0487)     adc   A, 0
00D7: 28       ROMX                     (0488)     romx                               ; get the LSB of xidata's address
00D8: 4B       SWAP  A,X                (0489)     swap  A, X
00D9: 51 BA    MOV   A,[__r0]           (0490)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0491)                                        ;   XIData structure list in flash
00DB: 80 04    JMP   0x00E0             (0492)     jmp   .AccessStruct
                                        (0493) 
                                        (0494)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0495)     ; values of C variables. Each structure contains 3 member elements.
                                        (0496)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0497)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0498)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0499)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0500)     ; value in the second member element, an unsigned byte:
                                        (0501)     ; (1) If the value of the second element is non-zero, it represents
                                        (0502)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0503)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0504)     ; the bytes are copied to the block of RAM.
                                        (0505)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0506)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0507)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0508) 
                                        (0509) .AccessNextStructLoop:
00DD: 75       INC   X                  (0510)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0511)     adc   A, 0
00E0: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0512) .AccessStruct:                         ; Entry point for first block
                                        (0513)     ;
                                        (0514)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0515)     ;
                                        (0516)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00E3: 08       PUSH  A                  (0517)     push  A
00E4: 28       ROMX                     (0518)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00E5: 60 D5    MOV   REG[0xD5],A        (0519)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00E7: 74       INC   A                  (0520)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00E8: A0 4B    JZ    0x0134             (0521)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00EA: 18       POP   A                  (0522)     pop   A                            ; restore pXIData to [A,X]
00EB: 75       INC   X                  (0523)     inc   X                            ; pXIData++
00EC: 09 00    ADC   A,0x0              (0524)     adc   A, 0
00EE: 08       PUSH  A                  (0525)     push  A
00EF: 28       ROMX                     (0526)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00F0: 53 BA    MOV   [__r0],A           (0527)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00F2: 18       POP   A                  (0528)     pop   A                            ; restore pXIData to [A,X]
00F3: 75       INC   X                  (0529)     inc   X                            ; pXIData++ (point to size)
00F4: 09 00    ADC   A,0x0              (0530)     adc   A, 0
00F6: 08       PUSH  A                  (0531)     push  A
00F7: 28       ROMX                     (0532)     romx                               ; Get the size (CPU.A <- *pXIData)
00F8: A0 1C    JZ    0x0115             (0533)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00FA: 53 B9    MOV   [__r1],A           (0534)     mov   [__r1], A                    ;             else downcount in __r1
00FC: 18       POP   A                  (0535)     pop   A                            ; restore pXIData to [A,X]
                                        (0536) 
                                        (0537) .CopyNextByteLoop:
                                        (0538)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0539)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0540)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0541)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0542)     ;
00FD: 75       INC   X                  (0543)     inc   X                            ; pXIData++ (point to next data byte)
00FE: 09 00    ADC   A,0x0              (0544)     adc   A, 0
0100: 08       PUSH  A                  (0545)     push  A
0101: 28       ROMX                     (0546)     romx                               ; Get the data value (CPU.A <- *pXIData)
0102: 3F BA    MVI   [__r0],A           (0547)     mvi   [__r0], A                    ; Transfer the data to RAM
0104: 47 BA FF TST   [__r0],0xFF        (0548)     tst   [__r0], 0xff                 ; Check for page crossing
0107: B0 06    JNZ   0x010E             (0549)     jnz   .CopyLoopTail                ;   No crossing, keep going
0109: 5D D5    MOV   A,REG[0xD5]        (0550)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
010B: 74       INC   A                  (0551)     inc   A
010C: 60 D5    MOV   REG[0xD5],A        (0552)     mov   reg[ MVW_PP], A
                                        (0553) .CopyLoopTail:
010E: 18       POP   A                  (0554)     pop   A                            ; restore pXIData to [A,X]
010F: 7A B9    DEC   [__r1]             (0555)     dec   [__r1]                       ; End of this array in flash?
0111: BF EB    JNZ   0x00FD             (0556)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0113: 8F C9    JMP   0x00DD             (0557)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0558) 
                                        (0559) .ClearRAMBlockToZero:
0115: 18       POP   A                  (0560)     pop   A                            ; restore pXIData to [A,X]
0116: 75       INC   X                  (0561)     inc   X                            ; pXIData++ (point to next data byte)
0117: 09 00    ADC   A,0x0              (0562)     adc   A, 0
0119: 08       PUSH  A                  (0563)     push  A
011A: 28       ROMX                     (0564)     romx                               ; Get the run length (CPU.A <- *pXIData)
011B: 53 B9    MOV   [__r1],A           (0565)     mov   [__r1], A                    ; Initialize downcounter
011D: 50 00    MOV   A,0x0              (0566)     mov   A, 0                         ; Initialize source data
                                        (0567) 
                                        (0568) .ClearRAMBlockLoop:
                                        (0569)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0570)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0571)     ;
011F: 3F BA    MVI   [__r0],A           (0572)     mvi   [__r0], A                    ; Clear a byte
0121: 47 BA FF TST   [__r0],0xFF        (0573)     tst   [__r0], 0xff                 ; Check for page crossing
0124: B0 08    JNZ   0x012D             (0574)     jnz   .ClearLoopTail               ;   No crossing, keep going
0126: 5D D5    MOV   A,REG[0xD5]        (0575)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0128: 74       INC   A                  (0576)     inc   A
0129: 60 D5    MOV   REG[0xD5],A        (0577)     mov   reg[ MVW_PP], A
012B: 50 00    MOV   A,0x0              (0578)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0579) .ClearLoopTail:
012D: 7A B9    DEC   [__r1]             (0580)     dec   [__r1]                       ; Was this the last byte?
012F: BF EF    JNZ   0x011F             (0581)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0131: 18       POP   A                  (0582)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0132: 8F AA    JMP   0x00DD             (0583)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0584) 
                                        (0585) .C_RTE_WrapUp:
0134: 18       POP   A                  (0586)     pop   A                            ; balance stack
0135: 71 10    OR    F,0x10             
0137: 70 EF    AND   F,0xEF             
                                        (0587) 
                                        (0588) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0589) 
                                        (0590) C_RTE_Done:
                                        (0591) 
                                        (0592) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0593) 
                                        (0594)     ;-------------------------------
                                        (0595)     ; Voltage Stabilization for SMP
                                        (0596)     ;-------------------------------
                                        (0597) 
                                        (0598) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0599) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0600)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0601)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0602)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0603)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0604)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0605)     M8C_SetBank1
                                        (0606)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0607)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0608)     M8C_SetBank0
                                        (0609)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0610)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0611) .WaitFor2ms:
                                        (0612)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0613)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0614) ENDIF ; SMP is operational
                                        (0615) ENDIF ; 5.0V Operation
                                        (0616) 
                                        (0617)     ;-------------------------------
                                        (0618)     ; Set Power-On Reset (POR) Level
                                        (0619)     ;-------------------------------
                                        (0620) 
                                        (0621)     ; This checks for improper selection of CPU voltage and processer speed ratings. If an improper selection 
                                        (0622)     ; is made (in the global resources section of the device editor), a compilation error is created, disallowing
                                        (0623)     ; this selection. If the selection is valid, the POR level is then set.
                                        (0624)     ; Invalid cases checked: 
                                        (0625)     ;   -At 3.3 volt operation, the cpu rate must be at or below 12 MHz
                                        (0626) 
                                        (0627) 
                                        (0628) IF (POWER_SETTING & POWER_SET_3V3)		; 3.3V Operation?
                                        (0629)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** SLIMO = 6MHZ, Do Nothing ***
                                        (0630)  ELSE
                                        (0631)    IF (CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 24 MHz, Do Nothing...
                                        (0632)    ELSE						; Otherwise, 24 MHz is selected... raise error
                                        (0633) 	ERROR_PSoC SEE COMMENTS			; Error - cannot use 24 MHz w/ 3.3V operation (Clock <= 12 MHz)
                                        (0634)    ENDIF
                                        (0635)  ENDIF
                                        (0636) ENDIF
                                        (0637)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0638)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0639)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0640)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0641)     ;  Technical Reference Manual #001-52594 for more information.
                                        (0642) 
                                        (0643)     M8C_SetBank1
                                        (0644) 
                                        (0645) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0646)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0647)  ELSE                                       ;    No, fast mode
                                        (0648)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0649)                                             ;       no, set midpoint POR in user code, if desired
                                        (0650)   ELSE ; 24HMz                              ;
                                        (0651)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0652)   ENDIF ; 24MHz
                                        (0653)  ENDIF ; Slow Mode
                                        (0654) ENDIF ; 5.0V Operation
                                        (0655) 
                                        (0656)     M8C_SetBank0
                                        (0657) 
                                        (0658)     ;----------------------------
                                        (0659)     ; Wrap up and invoke "main"
                                        (0660)     ;----------------------------
                                        (0661) 
                                        (0662)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0663)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0664)     ;
0139: 62 E0 00 MOV   REG[0xE0],0x0      (0665)     mov  reg[INT_MSK0],0
013C: 71 10    OR    F,0x10             
                                        (0666) 
                                        (0667)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0668)     ;
                                        (0669)     M8C_SetBank1
013E: 62 E0 02 MOV   REG[0xE0],0x2      (0670)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0141: 43 E2 00 OR    REG[0xE2],0x0      (0671) 	or  reg[OSC_CR2], (SLEEP_TIMER_JUST2)
0144: 70 EF    AND   F,0xEF             
                                        (0672)     M8C_SetBank0
                                        (0673) 
                                        (0674)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0675)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0676)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0677)     ;
0146: 62 E2 00 MOV   REG[0xE2],0x0      (0678)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0679)                                    ; have been set during the boot process.
                                        (0680) IF	(TOOLCHAIN & HITECH)
                                        (0681) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0682) ELSE
                                        (0683) IF ENABLE_LJMP_TO_MAIN
                                        (0684)     ljmp  _main                    ; goto main (no return)
                                        (0685) ELSE
0149: 7C 0E B6 LCALL _main              (0686)     lcall _main                    ; call main
                                        (0687) .Exit:
014C: 8F FF    JMP   0x014C             (0688)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0689) ENDIF
                                        (0690) ENDIF ; TOOLCHAIN
                                        (0691) 
                                        (0692)     ;---------------------------------
                                        (0693)     ; Library Access to Global Parms
                                        (0694)     ;---------------------------------
                                        (0695)     ;
                                        (0696)  bGetPowerSetting:
                                        (0697) _bGetPowerSetting:
                                        (0698)     ; Returns value of POWER_SETTING in the A register.
                                        (0699)     ; No inputs. No Side Effects.
                                        (0700)     ;
                                        (0701) IF (POWER_SETTING & POWER_SET_2V7)
                                        (0702)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                        (0703) ELSE
014E: 50 10    MOV   A,0x10             (0704)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                        (0705) ENDIF
0150: 7F       RET                      (0706)     ret
                                        (0707) 
                                        (0708) IF	(TOOLCHAIN & HITECH)
                                        (0709) ELSE
                                        (0710)     ;---------------------------------
                                        (0711)     ; Order Critical RAM & ROM AREAs
                                        (0712)     ;---------------------------------
                                        (0713)     ;  'TOP' is all that has been defined so far...
                                        (0714) 
                                        (0715)     ;  ROM AREAs for C CONST, static & global items
                                        (0716)     ;
                                        (0717)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0718)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0719) __idata_start:
                                        (0720) 
                                        (0721)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0722) __func_lit_start:
                                        (0723) 
                                        (0724) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0725)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0726)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0727)     ; relocated by the code compressor, but the text area may shrink and
                                        (0728)     ; that moves xidata around.
                                        (0729)     ;
                                        (0730) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0731) ENDIF
                                        (0732) 
                                        (0733)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0734)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0735) 
                                        (0736)     ; CODE segment for general use
                                        (0737)     ;
                                        (0738)     AREA text (ROM, REL, CON)
                                        (0739) __text_start:
                                        (0740) 
                                        (0741)     ; RAM area usage
                                        (0742)     ;
                                        (0743)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0744) __data_start:
                                        (0745) 
                                        (0746)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0747)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0748)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0749) __bss_start:
                                        (0750) ENDIF ; TOOLCHAIN
                                        (0751) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
03F8: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_pdproject1_Bank1
                                        (0019) export LoadConfigTBL_pdproject1_Bank0
                                        (0020) export LoadConfigTBL_pdproject1_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_pdproject1_Bank0:
                                        (0023) ;  Instance name DUALADC_1, User Module DUALADC
                                        (0024) ;       Instance name DUALADC_1, Block Name ADC1(ASC10)
                                        (0025) 	db		80h, 90h		;DUALADC_1_bfADC1cr0(ASC10CR0)
                                        (0026) 	db		81h, 00h		;DUALADC_1_bfADC1cr1(ASC10CR1)
                                        (0027) 	db		82h, 61h		;DUALADC_1_bfADC1cr2(ASC10CR2)
                                        (0028) 	db		83h, f0h		;DUALADC_1_bfADC1cr3(ASC10CR3)
                                        (0029) ;       Instance name DUALADC_1, Block Name ADC2(ASD11)
                                        (0030) 	db		84h, 90h		;DUALADC_1_bfADC2cr0(ASD11CR0)
                                        (0031) 	db		85h, 00h		;DUALADC_1_bfADC2cr1(ASD11CR1)
                                        (0032) 	db		86h, 60h		;DUALADC_1_bfADC2cr2(ASD11CR2)
                                        (0033) 	db		87h, f0h		;DUALADC_1_bfADC2cr3(ASD11CR3)
                                        (0034) ;       Instance name DUALADC_1, Block Name CNT1(DBC00)
                                        (0035) 	db		23h, 00h		;DUALADC_1_bCounter1_CR0(DBC00CR0)
                                        (0036) 	db		21h, 00h		;DUALADC_1_bPeriod1(DBC00DR1)
                                        (0037) 	db		22h, 00h		;DUALADC_1_bCompare1(DBC00DR2)
                                        (0038) ;       Instance name DUALADC_1, Block Name CNT2(DCC03)
                                        (0039) 	db		2fh, 00h		;DUALADC_1_bCounter2_CR0(DCC03CR0)
                                        (0040) 	db		2dh, 00h		;DUALADC_1_bPeriod2(DCC03DR1)
                                        (0041) 	db		2eh, 00h		;DUALADC_1_bCompare2(DCC03DR2)
                                        (0042) ;       Instance name DUALADC_1, Block Name PWM16_LSB(DBC01)
                                        (0043) 	db		27h, 00h		;DUALADC_1_fPWM_LSB_CR0(DBC01CR0)
                                        (0044) 	db		25h, 00h		;DUALADC_1_bPWM_Period_LSB(DBC01DR1)
                                        (0045) 	db		26h, 00h		;DUALADC_1_bPWM_IntTime_LSB(DBC01DR2)
                                        (0046) ;       Instance name DUALADC_1, Block Name PWM16_MSB(DCC02)
                                        (0047) 	db		2bh, 00h		;DUALADC_1_fPWM_MSB_CR0(DCC02CR0)
                                        (0048) 	db		29h, 00h		;DUALADC_1_bPWM_Period_MSB(DCC02DR1)
                                        (0049) 	db		2ah, 00h		;DUALADC_1_bPWM_IntTime_MSB(DCC02DR2)
                                        (0050) ;  Instance name I2CHW_Temp, User Module I2CHW
                                        (0051) ;  Instance name LCD_2, User Module LCD
                                        (0052) ;  Instance name PGA_1, User Module PGA
                                        (0053) ;       Instance name PGA_1, Block Name GAIN(ACC00)
                                        (0054) 	db		71h, fdh		;PGA_1_GAIN_CR0(ACC00CR0)
                                        (0055) 	db		72h, a1h		;PGA_1_GAIN_CR1(ACC00CR1)
                                        (0056) 	db		73h, 20h		;PGA_1_GAIN_CR2(ACC00CR2)
                                        (0057) 	db		70h, 00h		;PGA_1_GAIN_CR3(ACC00CR3)
                                        (0058) ;  Instance name PGA_2, User Module PGA
                                        (0059) ;       Instance name PGA_2, Block Name GAIN(ACC01)
                                        (0060) 	db		75h, fdh		;PGA_2_GAIN_CR0(ACC01CR0)
                                        (0061) 	db		76h, a1h		;PGA_2_GAIN_CR1(ACC01CR1)
                                        (0062) 	db		77h, 20h		;PGA_2_GAIN_CR2(ACC01CR2)
                                        (0063) 	db		74h, 00h		;PGA_2_GAIN_CR3(ACC01CR3)
                                        (0064) ;  Instance name PWM8_1, User Module PWM8
                                        (0065) ;       Instance name PWM8_1, Block Name PWM8(DBC11)
                                        (0066) 	db		37h, 00h		;PWM8_1_CONTROL_REG(DBC11CR0)
                                        (0067) 	db		35h, ffh		;PWM8_1_PERIOD_REG(DBC11DR1)
                                        (0068) 	db		36h, 32h		;PWM8_1_COMPARE_REG(DBC11DR2)
                                        (0069) ;  Instance name Timer16_1, User Module Timer16
                                        (0070) ;       Instance name Timer16_1, Block Name TIMER16_LSB(DCC12)
                                        (0071) 	db		3bh, 00h		;Timer16_1_CONTROL_LSB_REG(DCC12CR0)
                                        (0072) 	db		39h, 00h		;Timer16_1_PERIOD_LSB_REG(DCC12DR1)
                                        (0073) 	db		3ah, 00h		;Timer16_1_COMPARE_LSB_REG(DCC12DR2)
                                        (0074) ;       Instance name Timer16_1, Block Name TIMER16_MSB(DCC13)
                                        (0075) 	db		3fh, 04h		;Timer16_1_CONTROL_MSB_REG(DCC13CR0)
                                        (0076) 	db		3dh, 00h		;Timer16_1_PERIOD_MSB_REG(DCC13DR1)
                                        (0077) 	db		3eh, 00h		;Timer16_1_COMPARE_MSB_REG(DCC13DR2)
                                        (0078) ;  Global Register values Bank 0
                                        (0079) 	db		62h, 00h		; AnalogClockSelect3 register (CLK_CR3)
                                        (0080) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0081) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0082) 	db		61h, 00h		; AnalogMuxBusConfig register (AMUX_CFG)
                                        (0083) 	db		fch, 00h		; AnalogMuxDACData:0 register (IDACR_D)
                                        (0084) 	db		fdh, 00h		; AnalogMuxDACData:1 register (IDACL_D)
                                        (0085) 	db		63h, 15h		; AnalogReferenceControl register (ARF_CR)
                                        (0086) 	db		65h, 00h		; AnalogSynchronizationControl register (ASY_CR)
                                        (0087) 	db		e6h, 30h		; DecimatorControl_0 register (DEC_CR0)
                                        (0088) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0089) 	db		a0h, 00h		; DecimatorDataHigh:0 register (DEC0_DH)
                                        (0090) 	db		a2h, 00h		; DecimatorDataHigh:1 register (DEC1_DH)
                                        (0091) 	db		a4h, 00h		; DecimatorDataHigh:2 register (DEC2_DH)
                                        (0092) 	db		a6h, 00h		; DecimatorDataHigh:3 register (DEC3_DH)
                                        (0093) 	db		a1h, 00h		; DecimatorDataLow:0 register (DEC0_DL)
                                        (0094) 	db		a3h, 00h		; DecimatorDataLow:1 register (DEC1_DL)
                                        (0095) 	db		a5h, 00h		; DecimatorDataLow:2 register (DEC2_DL)
                                        (0096) 	db		a7h, 00h		; DecimatorDataLow:3 register (DEC3_DL)
                                        (0097) 	db		d6h, 08h		; I2CConfig:0 register (I2C0_CFG)
                                        (0098) 	db		e8h, 00h		; Multiply0InputX register (MUL0_X)
                                        (0099) 	db		e9h, 00h		; Multiply0InputY register (MUL0_Y)
                                        (0100) 	db		a8h, 00h		; Multiply1InputX register (MUL1_X)
                                        (0101) 	db		a9h, 00h		; Multiply1InputY register (MUL1_Y)
                                        (0102) 	db		b7h, 00h		; RowDigitalInterconnectInputSelect:0 register (RDI0DSM)
                                        (0103) 	db		bfh, 00h		; RowDigitalInterconnectInputSelect:1 register (RDI1DSM)
                                        (0104) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0105) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0106) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0107) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0108) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0109) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0RO0)
                                        (0110) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0RO1)
                                        (0111) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0112) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0113) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0114) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0115) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0116) 	db		bdh, 08h		; Row_1_OutputDrive_0 register (RDI1RO0)
                                        (0117) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1RO1)
                                        (0118) 	db		ffh
                                        (0119) LoadConfigTBL_pdproject1_Bank1:
                                        (0120) ;  Instance name DUALADC_1, User Module DUALADC
                                        (0121) ;       Instance name DUALADC_1, Block Name ADC1(ASC10)
                                        (0122) ;       Instance name DUALADC_1, Block Name ADC2(ASD11)
                                        (0123) ;       Instance name DUALADC_1, Block Name CNT1(DBC00)
                                        (0124) 	db		23h, 00h		;DUALADC_1_(DBC00CR1)
                                        (0125) 	db		20h, 21h		;DUALADC_1_fCounter1FN(DBC00FN)
                                        (0126) 	db		21h, 45h		;DUALADC_1_fCounter1SL(DBC00IN)
                                        (0127) 	db		22h, 40h		;DUALADC_1_fCounter1OS(DBC00OU)
                                        (0128) ;       Instance name DUALADC_1, Block Name CNT2(DCC03)
                                        (0129) 	db		2fh, 00h		;DUALADC_1_(DCC03CR1)
                                        (0130) 	db		2ch, 21h		;DUALADC_1_fCounter2FN(DCC03FN)
                                        (0131) 	db		2dh, 55h		;DUALADC_1_fCounter2SL(DCC03IN)
                                        (0132) 	db		2eh, 40h		;DUALADC_1_fCounter2OS(DCC03OU)
                                        (0133) ;       Instance name DUALADC_1, Block Name PWM16_LSB(DBC01)
                                        (0134) 	db		27h, 00h		;DUALADC_1_(DBC01CR1)
                                        (0135) 	db		24h, 01h		;DUALADC_1_bfPWM_LSB_FN(DBC01FN)
                                        (0136) 	db		25h, 15h		;DUALADC_1_(DBC01IN)
                                        (0137) 	db		26h, 40h		;DUALADC_1_(DBC01OU)
                                        (0138) ;       Instance name DUALADC_1, Block Name PWM16_MSB(DCC02)
                                        (0139) 	db		2bh, 00h		;DUALADC_1_(DCC02CR1)
                                        (0140) 	db		28h, 21h		;DUALADC_1_bfPWM_MSB_FN(DCC02FN)
                                        (0141) 	db		29h, 35h		;DUALADC_1_(DCC02IN)
                                        (0142) 	db		2ah, 40h		;DUALADC_1_(DCC02OU)
                                        (0143) ;  Instance name I2CHW_Temp, User Module I2CHW
                                        (0144) ;  Instance name LCD_2, User Module LCD
                                        (0145) ;  Instance name PGA_1, User Module PGA
                                        (0146) ;       Instance name PGA_1, Block Name GAIN(ACC00)
                                        (0147) ;  Instance name PGA_2, User Module PGA
                                        (0148) ;       Instance name PGA_2, Block Name GAIN(ACC01)
                                        (0149) ;  Instance name PWM8_1, User Module PWM8
                                        (0150) ;       Instance name PWM8_1, Block Name PWM8(DBC11)
                                        (0151) 	db		37h, 00h		;PWM8_1_(DBC11CR1)
                                        (0152) 	db		34h, 31h		;PWM8_1_FUNC_REG(DBC11FN)
                                        (0153) 	db		35h, 11h		;PWM8_1_INPUT_REG(DBC11IN)
                                        (0154) 	db		36h, 44h		;PWM8_1_OUTPUT_REG(DBC11OU)
                                        (0155) ;  Instance name Timer16_1, User Module Timer16
                                        (0156) ;       Instance name Timer16_1, Block Name TIMER16_LSB(DCC12)
                                        (0157) 	db		3bh, 00h		;Timer16_1_(DCC12CR1)
                                        (0158) 	db		38h, 00h		;Timer16_1_FUNC_LSB_REG(DCC12FN)
                                        (0159) 	db		39h, 01h		;Timer16_1_INPUT_LSB_REG(DCC12IN)
                                        (0160) 	db		3ah, 00h		;Timer16_1_OUTPUT_LSB_REG(DCC12OU)
                                        (0161) ;       Instance name Timer16_1, Block Name TIMER16_MSB(DCC13)
                                        (0162) 	db		3fh, 00h		;Timer16_1_(DCC13CR1)
                                        (0163) 	db		3ch, 20h		;Timer16_1_FUNC_MSB_REG(DCC13FN)
                                        (0164) 	db		3dh, 31h		;Timer16_1_INPUT_MSB_REG(DCC13IN)
                                        (0165) 	db		3eh, 00h		;Timer16_1_OUTPUT_MSB_REG(DCC13OU)
                                        (0166) ;  Global Register values Bank 1
                                        (0167) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0168) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0169) 	db		8bh, 00h		; AnalogColumnClockDivide register (ACE_CLK_CR3)
                                        (0170) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0171) 	db		8ah, 00h		; AnalogEClockSelect1 register (ACE_CLK_CR1)
                                        (0172) 	db		89h, 00h		; AnalogEColumnClockSelect register (ACE_CLK_CR0)
                                        (0173) 	db		75h, 09h		; AnalogEColumnInputSelect register (ACE_AMX_IN)
                                        (0174) 	db		76h, 00h		; AnalogEComparatorControl0 register (ACE_CMP_CR0)
                                        (0175) 	db		77h, 00h		; AnalogEComparatorControl1 register (ACE_CMP_CR1)
                                        (0176) 	db		7ah, 33h		; AnalogELUTControl0 register (ACE_ALT_CR0)
                                        (0177) 	db		62h, 28h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0178) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0179) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0180) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0181) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0182) 	db		6ah, 00h		; AnalogMuxBusConfig1 register (AMUX_CFG1)
                                        (0183) 	db		afh, 00h		; AnalogMuxClock register (AMUX_CLK)
                                        (0184) 	db		7bh, 00h		; AnalogOutBufferControl register (ACE_ABF_CR0)
                                        (0185) 	db		79h, 00h		; ComparatorGlobalInEn register (ACE_CMP_GI_EN)
                                        (0186) 	db		64h, 00h		; ComparatorGlobalOutEn register (CMP_GO_EN)
                                        (0187) 	db		65h, 00h		; ComparatorGlobalOutEn1 register (CMP_GO_EN1)
                                        (0188) 	db		fdh, 00h		; DAC_Control_0 register (IDAC_CR0)
                                        (0189) 	db		dch, 00h		; DAC_Control_1 register (IDAC_CR1)
                                        (0190) 	db		91h, 00h		; DEC_CR0:0 register (DEC0_CR0)
                                        (0191) 	db		95h, 00h		; DEC_CR0:1 register (DEC1_CR0)
                                        (0192) 	db		99h, 00h		; DEC_CR0:2 register (DEC2_CR0)
                                        (0193) 	db		9dh, 00h		; DEC_CR0:3 register (DEC3_CR0)
                                        (0194) 	db		9ah, 00h		; DecimatorControl_5 register (DEC_CR5)
                                        (0195) 	db		92h, 00h		; DecimatorEnable:0 register (DEC_CR3)
                                        (0196) 	db		96h, 00h		; DecimatorEnable:1 register (DEC_CR4)
                                        (0197) 	db		d4h, 00h		; Decimator_Control:0 register (DEC0_CR)
                                        (0198) 	db		d5h, 00h		; Decimator_Control:1 register (DEC1_CR)
                                        (0199) 	db		d6h, 00h		; Decimator_Control:2 register (DEC2_CR)
                                        (0200) 	db		d7h, 00h		; Decimator_Control:3 register (DEC3_CR)
                                        (0201) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0202) 	db		a1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input_Control register (GDI_E_IN_CR)
                                        (0203) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0204) 	db		a3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output_Control register (GDI_E_OU_CR)
                                        (0205) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0206) 	db		a0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input_Control register (GDI_O_IN_CR)
                                        (0207) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0208) 	db		a2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output_Control register (GDI_O_OU_CR)
                                        (0209) 	db		adh, 00h		; I2CAddress:0 register (I2C0_ADDR)
                                        (0210) 	db		e7h, 00h		; IDACMode register (IDACMODE)
                                        (0211) 	db		e1h, 19h		; OscillatorControl_1 register (OSC_CR1)
                                        (0212) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0213) 	db		dfh, 95h		; OscillatorControl_3 register (OSC_CR3)
                                        (0214) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0215) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0216) 	db		85h, 00h		; PWM_Control register (ACE_PWM_CR)
                                        (0217) 	db		d8h, 00h		; Port_0_MUXBusCtrl register (MUX_CR0)
                                        (0218) 	db		d9h, 00h		; Port_1_MUXBusCtrl register (MUX_CR1)
                                        (0219) 	db		dah, 00h		; Port_2_MUXBusCtrl register (MUX_CR2)
                                        (0220) 	db		dbh, 00h		; Port_3_MUXBusCtrl register (MUX_CR3)
                                        (0221) 	db		ech, 00h		; Port_4_MUXBusCtrl register (MUX_CR4)
                                        (0222) 	db		edh, 00h		; Port_5_MUXBusCtrl register (MUX_CR5)
                                        (0223) 	db		a7h, 00h		; RTClockControl register (RTCCR)
                                        (0224) 	db		a4h, 00h		; RTCurrentHour register (RTCH)
                                        (0225) 	db		a5h, 00h		; RTCurrentMinute register (RTCM)
                                        (0226) 	db		a6h, 00h		; RTCurrentSecond register (RTCS)
                                        (0227) 	db		82h, 00h		; TSCMPHigh register (SADC_TSCMPH)
                                        (0228) 	db		81h, 00h		; TSCMPLow register (SADC_TSCMPL)
                                        (0229) 	db		71h, 00h		; TSource0 register (SADC_TSCR0)
                                        (0230) 	db		72h, 00h		; TSource1 register (SADC_TSCR1)
                                        (0231) 	db		ffh
                                        (0232) AREA psoc_config(rom, rel)
                                        (0233) LoadConfigTBL_pdproject1_Ordered:
                                        (0234) ;  Ordered Global Register values
                                        (0235) 	M8C_SetBank0
03FA: 62 00 00 MOV   REG[0x0],0x0       (0236) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
03FD: 71 10    OR    F,0x10             
                                        (0237) 	M8C_SetBank1
03FF: 62 00 00 MOV   REG[0x0],0x0       (0238) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
0402: 62 01 FF MOV   REG[0x1],0xFF      (0239) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
0405: 70 EF    AND   F,0xEF             
                                        (0240) 	M8C_SetBank0
0407: 62 03 FF MOV   REG[0x3],0xFF      (0241) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
040A: 62 02 00 MOV   REG[0x2],0x0       (0242) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
040D: 71 10    OR    F,0x10             
                                        (0243) 	M8C_SetBank1
040F: 62 02 00 MOV   REG[0x2],0x0       (0244) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0412: 62 03 00 MOV   REG[0x3],0x0       (0245) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0415: 70 EF    AND   F,0xEF             
                                        (0246) 	M8C_SetBank0
0417: 62 01 00 MOV   REG[0x1],0x0       (0247) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
041A: 62 04 A0 MOV   REG[0x4],0xA0      (0248) 	mov	reg[04h], a0h		; Port_1_Data register (PRT1DR)
041D: 71 10    OR    F,0x10             
                                        (0249) 	M8C_SetBank1
041F: 62 04 B0 MOV   REG[0x4],0xB0      (0250) 	mov	reg[04h], b0h		; Port_1_DriveMode_0 register (PRT1DM0)
0422: 62 05 EE MOV   REG[0x5],0xEE      (0251) 	mov	reg[05h], eeh		; Port_1_DriveMode_1 register (PRT1DM1)
0425: 70 EF    AND   F,0xEF             
                                        (0252) 	M8C_SetBank0
0427: 62 07 EE MOV   REG[0x7],0xEE      (0253) 	mov	reg[07h], eeh		; Port_1_DriveMode_2 register (PRT1DM2)
042A: 62 06 10 MOV   REG[0x6],0x10      (0254) 	mov	reg[06h], 10h		; Port_1_GlobalSelect register (PRT1GS)
042D: 71 10    OR    F,0x10             
                                        (0255) 	M8C_SetBank1
042F: 62 06 00 MOV   REG[0x6],0x0       (0256) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0432: 62 07 01 MOV   REG[0x7],0x1       (0257) 	mov	reg[07h], 01h		; Port_1_IntCtrl_1 register (PRT1IC1)
0435: 70 EF    AND   F,0xEF             
                                        (0258) 	M8C_SetBank0
0437: 62 05 01 MOV   REG[0x5],0x1       (0259) 	mov	reg[05h], 01h		; Port_1_IntEn register (PRT1IE)
043A: 62 08 00 MOV   REG[0x8],0x0       (0260) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
043D: 71 10    OR    F,0x10             
                                        (0261) 	M8C_SetBank1
043F: 62 08 7F MOV   REG[0x8],0x7F      (0262) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
0442: 62 09 80 MOV   REG[0x9],0x80      (0263) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
0445: 70 EF    AND   F,0xEF             
                                        (0264) 	M8C_SetBank0
0447: 62 0B 80 MOV   REG[0xB],0x80      (0265) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
044A: 62 0A 00 MOV   REG[0xA],0x0       (0266) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
044D: 71 10    OR    F,0x10             
                                        (0267) 	M8C_SetBank1
044F: 62 0A 00 MOV   REG[0xA],0x0       (0268) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0452: 62 0B 00 MOV   REG[0xB],0x0       (0269) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0455: 70 EF    AND   F,0xEF             
                                        (0270) 	M8C_SetBank0
0457: 62 09 00 MOV   REG[0x9],0x0       (0271) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
045A: 62 0C 00 MOV   REG[0xC],0x0       (0272) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
045D: 71 10    OR    F,0x10             
                                        (0273) 	M8C_SetBank1
045F: 62 0C 00 MOV   REG[0xC],0x0       (0274) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0462: 62 0D 00 MOV   REG[0xD],0x0       (0275) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0465: 70 EF    AND   F,0xEF             
                                        (0276) 	M8C_SetBank0
0467: 62 0F 00 MOV   REG[0xF],0x0       (0277) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
046A: 62 0E 00 MOV   REG[0xE],0x0       (0278) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
046D: 71 10    OR    F,0x10             
                                        (0279) 	M8C_SetBank1
046F: 62 0E 00 MOV   REG[0xE],0x0       (0280) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0472: 62 0F 00 MOV   REG[0xF],0x0       (0281) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0475: 70 EF    AND   F,0xEF             
                                        (0282) 	M8C_SetBank0
0477: 62 0D 00 MOV   REG[0xD],0x0       (0283) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
047A: 62 10 00 MOV   REG[0x10],0x0      (0284) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
047D: 71 10    OR    F,0x10             
                                        (0285) 	M8C_SetBank1
047F: 62 10 00 MOV   REG[0x10],0x0      (0286) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0482: 62 11 00 MOV   REG[0x11],0x0      (0287) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0485: 70 EF    AND   F,0xEF             
                                        (0288) 	M8C_SetBank0
0487: 62 13 00 MOV   REG[0x13],0x0      (0289) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
048A: 62 12 00 MOV   REG[0x12],0x0      (0290) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
048D: 71 10    OR    F,0x10             
                                        (0291) 	M8C_SetBank1
048F: 62 12 00 MOV   REG[0x12],0x0      (0292) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0492: 62 13 00 MOV   REG[0x13],0x0      (0293) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0495: 70 EF    AND   F,0xEF             
                                        (0294) 	M8C_SetBank0
0497: 62 11 00 MOV   REG[0x11],0x0      (0295) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
049A: 62 14 00 MOV   REG[0x14],0x0      (0296) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
049D: 71 10    OR    F,0x10             
                                        (0297) 	M8C_SetBank1
049F: 62 14 00 MOV   REG[0x14],0x0      (0298) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
04A2: 62 15 00 MOV   REG[0x15],0x0      (0299) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
04A5: 70 EF    AND   F,0xEF             
                                        (0300) 	M8C_SetBank0
04A7: 62 17 00 MOV   REG[0x17],0x0      (0301) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
04AA: 62 16 00 MOV   REG[0x16],0x0      (0302) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
04AD: 71 10    OR    F,0x10             
                                        (0303) 	M8C_SetBank1
04AF: 62 16 00 MOV   REG[0x16],0x0      (0304) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
04B2: 62 17 00 MOV   REG[0x17],0x0      (0305) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
04B5: 70 EF    AND   F,0xEF             
                                        (0306) 	M8C_SetBank0
04B7: 62 15 00 MOV   REG[0x15],0x0      (0307) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
04BA: 70 EF    AND   F,0xEF             
                                        (0308) 	M8C_SetBank0
04BC: 7F       RET                      (0309) 	ret
                                        (0310) 
                                        (0311) 
                                        (0312) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_pdproject1
                                        (0026) export _LoadConfig_pdproject1
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
04BD: 55 00 00 MOV   [0x0],0x0          (0065) 	mov		[Port_2_Data_SHADE], 0h
04C0: 55 01 7F MOV   [0x1],0x7F         (0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
04C3: 55 02 80 MOV   [0x2],0x80         (0067) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0068) 
04C6: 7C 04 CD LCALL 0x04CD             (0069) 	lcall	LoadConfig_pdproject1
04C9: 7C 03 F8 LCALL 0x03F8             (0070) 	lcall	LoadConfigTBL_pdproject1_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
04CC: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration pdproject1
                                        (0078) ;
                                        (0079) ;    Load configuration registers for pdproject1.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_pdproject1:
                                        (0096)  LoadConfig_pdproject1:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
04CD: 10       PUSH  X                  (0099) 	push	x
04CE: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
04D0: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
04D2: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
04D3: 50 02    MOV   A,0x2              (0104)     mov     A, >LoadConfigTBL_pdproject1_Bank0
04D5: 57 A4    MOV   X,0xA4             (0105)     mov     X, <LoadConfigTBL_pdproject1_Bank0
04D7: 7C 04 E8 LCALL 0x04E8             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
04DA: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
04DC: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
04DD: 50 03    MOV   A,0x3              (0111)     mov     A, >LoadConfigTBL_pdproject1_Bank1
04DF: 57 3D    MOV   X,0x3D             (0112)     mov     X, <LoadConfigTBL_pdproject1_Bank1
04E1: 7C 04 E8 LCALL 0x04E8             (0113)     lcall   LoadConfig              ; Load the bank 1 values
04E4: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
04E6: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
04E7: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
04E8: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
04EA: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
04EB: 08       PUSH  A                  (0143)     push    A
04EC: 4F       MOV   X,SP               (0144)     mov     X, SP
04ED: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
04F0: D0 04    JNC   0x04F5             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
04F2: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
04F5: 18       POP   A                  (0149)     pop     A
04F6: 20       POP   X                  (0150)     pop     X
04F7: 70 EF    AND   F,0xEF             
04F9: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
04FC: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
04FD: 08       PUSH  A                  (0156)     push    A
04FE: 28       ROMX                     (0157)     romx                            ; Load register address from table
04FF: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
0501: A0 1F    JZ    0x0521             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
0503: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
0504: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
0507: A0 03    JZ    0x050B             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0509: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
050B: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
050D: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
050E: 20       POP   X                  (0167)     pop     X
050F: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
0510: 09 00    ADC   A,0x0              (0169)     adc     A, 0
0512: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
0513: 08       PUSH  A                  (0171)     push    A
0514: 28       ROMX                     (0172)     romx                            ; load config data from the table
0515: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
0516: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
0518: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
051A: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
051B: 20       POP   X                  (0177)     pop     X
051C: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
051D: 09 00    ADC   A,0x0              (0179)     adc     A, 0
051F: 8F D7    JMP   0x04F7             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
0521: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
0523: 70 3F    AND   F,0x3F             
0525: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
0527: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\timer16_1.asm                 (0001) ;;*****************************************************************************
0528: 43 E1 80 OR    REG[0xE1],0x80     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16_1.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer16_1.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer16_1_EnableInt
                                        (0030) export _Timer16_1_EnableInt
                                        (0031) export  Timer16_1_DisableInt
                                        (0032) export _Timer16_1_DisableInt
                                        (0033) export  Timer16_1_Start
                                        (0034) export _Timer16_1_Start
                                        (0035) export  Timer16_1_Stop
                                        (0036) export _Timer16_1_Stop
                                        (0037) export  Timer16_1_WritePeriod
                                        (0038) export _Timer16_1_WritePeriod
                                        (0039) export  Timer16_1_WriteCompareValue
                                        (0040) export _Timer16_1_WriteCompareValue
                                        (0041) export  Timer16_1_wReadCompareValue
                                        (0042) export _Timer16_1_wReadCompareValue
                                        (0043) export  Timer16_1_wReadTimer
                                        (0044) export _Timer16_1_wReadTimer
                                        (0045) export  Timer16_1_wReadTimerSaveCV
                                        (0046) export _Timer16_1_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTimer16_1_ReadCompareValue  ; deprecated
                                        (0051) export _wTimer16_1_ReadCompareValue  ; deprecated
                                        (0052) export  wTimer16_1_ReadTimer         ; deprecated
                                        (0053) export _wTimer16_1_ReadTimer         ; deprecated
                                        (0054) export  wTimer16_1_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTimer16_1_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTimer16_1_ReadCounter       ; obsolete
                                        (0058) export _wTimer16_1_ReadCounter       ; obsolete
                                        (0059) export  wTimer16_1_CaptureCounter    ; obsolete
                                        (0060) export _wTimer16_1_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA pdproject1_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer16_1_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer16_1_EnableInt:
                                        (0098) _Timer16_1_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer16_1_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
052B: 7F       RET                      (0102)    ret
052C: 41 E1 7F AND   REG[0xE1],0x7F     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer16_1_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer16_1_DisableInt:
                                        (0126) _Timer16_1_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer16_1_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
052F: 7F       RET                      (0130)    ret
0530: 43 3B 01 OR    REG[0x3B],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer16_1_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer16_1_Start:
                                        (0154) _Timer16_1_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer16_1_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
0533: 7F       RET                      (0158)    ret
0534: 41 3B FE AND   REG[0x3B],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer16_1_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer16_1_Stop:
                                        (0182) _Timer16_1_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer16_1_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
0537: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer16_1_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer16_1_WritePeriod:
                                        (0211) _Timer16_1_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
0538: 60 39    MOV   REG[0x39],A        (0213)    mov   reg[Timer16_1_PERIOD_LSB_REG], A
053A: 5B       MOV   A,X                (0214)    mov   A, X
053B: 60 3D    MOV   REG[0x3D],A        (0215)    mov   reg[Timer16_1_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
053D: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: Timer16_1_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call Timer16_1_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  Timer16_1_WriteCompareValue:
                                        (0243) _Timer16_1_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
053E: 60 3A    MOV   REG[0x3A],A        (0245)    mov   reg[Timer16_1_COMPARE_LSB_REG], A
0540: 5B       MOV   A,X                (0246)    mov   A, X
0541: 60 3E    MOV   REG[0x3E],A        (0247)    mov   reg[Timer16_1_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
0543: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: Timer16_1_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  Timer16_1_wReadCompareValue:
                                        (0272) _Timer16_1_wReadCompareValue:
                                        (0273)  wTimer16_1_ReadCompareValue:                    ; this name deprecated
                                        (0274) _wTimer16_1_ReadCompareValue:                    ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
0544: 5D 3E    MOV   A,REG[0x3E]        (0276)    mov   A, reg[Timer16_1_COMPARE_MSB_REG]
0546: 5C       MOV   X,A                (0277)    mov   X, A
0547: 5D 3A    MOV   A,REG[0x3A]        (0278)    mov   A, reg[Timer16_1_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
0549: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: Timer16_1_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  Timer16_1_wReadTimerSaveCV:
                                        (0321) _Timer16_1_wReadTimerSaveCV:
                                        (0322)  wTimer16_1_ReadTimerSaveCV:                     ; this name deprecated
                                        (0323) _wTimer16_1_ReadTimerSaveCV:                     ; this name deprecated
                                        (0324)  wTimer16_1_ReadCounter:                         ; this name deprecated
                                        (0325) _wTimer16_1_ReadCounter:                         ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
054A: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
054B: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
054D: 5D 3B    MOV   A,REG[0x3B]        (0334)    mov   A, reg[Timer16_1_CONTROL_LSB_REG]       ; save the Control register
054F: 08       PUSH  A                  (0335)    push  A
0550: 5D 3A    MOV   A,REG[0x3A]        (0336)    mov   A, reg[Timer16_1_COMPARE_LSB_REG]       ; save the Compare register
0552: 08       PUSH  A                  (0337)    push  A
0553: 5D 3E    MOV   A,REG[0x3E]        (0338)    mov   A, reg[Timer16_1_COMPARE_MSB_REG]
0555: 08       PUSH  A                  (0339)    push  A
0556: 5D 38    MOV   A,REG[0x38]        (0340)    mov   A, reg[Timer16_1_COUNTER_LSB_REG]       ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
0558: 5D 3E    MOV   A,REG[0x3E]        (0342)    mov   A, reg[Timer16_1_COMPARE_MSB_REG]       ; Now grab DR2 (DR0) and save
055A: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
055C: 5D 3A    MOV   A,REG[0x3A]        (0344)    mov   A, reg[Timer16_1_COMPARE_LSB_REG]
055E: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
0560: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
0562: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
0565: A0 03    JZ    0x0569             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
0567: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
0569: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
056B: 70 FE    AND   F,0xFE             
056D: 41 3B FE AND   REG[0x3B],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    Timer16_1_Stop_M                              ; Disable (stop) the timer
0570: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
0571: 60 3E    MOV   REG[0x3E],A        (0355)    mov   reg[Timer16_1_COMPARE_MSB_REG], A
0573: 18       POP   A                  (0356)    pop   A
0574: 60 3A    MOV   REG[0x3A],A        (0357)    mov   reg[Timer16_1_COMPARE_LSB_REG], A
0576: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
0577: 60 3B    MOV   REG[0x3B],A        (0359)    mov   reg[Timer16_1_CONTROL_LSB_REG], A
0579: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
057A: 20       POP   X                  (0361)    pop   X
057B: 70 3F    AND   F,0x3F             
057D: 71 C0    OR    F,0xC0             
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
057F: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: Timer16_1_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  Timer16_1_wReadTimer:
                                        (0397) _Timer16_1_wReadTimer:
                                        (0398)  wTimer16_1_ReadTimer:                           ; this name deprecated
                                        (0399) _wTimer16_1_ReadTimer:                           ; this name deprecated
                                        (0400)  wTimer16_1_CaptureCounter:                      ; this name deprecated
                                        (0401) _wTimer16_1_CaptureCounter:                      ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
0580: 5D 38    MOV   A,REG[0x38]        (0404)    mov   A, reg[Timer16_1_COUNTER_LSB_REG]       ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
0582: 5D 3E    MOV   A,REG[0x3E]        (0407)    mov   A, reg[Timer16_1_COMPARE_MSB_REG]       ; Return DR2 (actually DR0)
0584: 5C       MOV   X,A                (0408)    mov   X, A
0585: 5D 3A    MOV   A,REG[0x3A]        (0409)    mov   A, reg[Timer16_1_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
0587: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File Timer16_1.asm
FILE: lib\pwm8_1int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_1INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_1.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0588: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_1INT.asm
FILE: lib\pwm8_1.asm                    (0001) ;;*****************************************************************************
0589: 43 E1 20 OR    REG[0xE1],0x20     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_1.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_1_EnableInt
                                        (0030) export _PWM8_1_EnableInt
                                        (0031) export  PWM8_1_DisableInt
                                        (0032) export _PWM8_1_DisableInt
                                        (0033) export  PWM8_1_Start
                                        (0034) export _PWM8_1_Start
                                        (0035) export  PWM8_1_Stop
                                        (0036) export _PWM8_1_Stop
                                        (0037) export  PWM8_1_WritePeriod
                                        (0038) export _PWM8_1_WritePeriod
                                        (0039) export  PWM8_1_WritePulseWidth
                                        (0040) export _PWM8_1_WritePulseWidth
                                        (0041) export  PWM8_1_bReadPulseWidth
                                        (0042) export _PWM8_1_bReadPulseWidth
                                        (0043) export  PWM8_1_bReadCounter
                                        (0044) export _PWM8_1_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_1_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_1_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_1_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_1_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA pdproject1_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_1_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_1_EnableInt:
                                        (0091) _PWM8_1_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_1_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
058C: 7F       RET                      (0095)    ret
058D: 41 E1 DF AND   REG[0xE1],0xDF     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_1_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_1_DisableInt:
                                        (0119) _PWM8_1_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_1_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0590: 7F       RET                      (0123)    ret
0591: 43 37 01 OR    REG[0x37],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_1_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_1_Start:
                                        (0148) _PWM8_1_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_1_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0594: 7F       RET                      (0152)    ret
0595: 41 37 FE AND   REG[0x37],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_1_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_1_Stop:
                                        (0176) _PWM8_1_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_1_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0598: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_1_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_1_WritePeriod:
                                        (0206) _PWM8_1_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0599: 60 35    MOV   REG[0x35],A        (0208)    mov   reg[PWM8_1_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
059B: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_1_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_1_WritePulseWidth:
                                        (0233) _PWM8_1_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
059C: 60 36    MOV   REG[0x36],A        (0235)    mov   reg[PWM8_1_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
059E: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_1_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_1_bReadPulseWidth:
                                        (0260) _PWM8_1_bReadPulseWidth:
                                        (0261)  bPWM8_1_ReadPulseWidth:                         ; this name deprecated
                                        (0262) _bPWM8_1_ReadPulseWidth:                         ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
059F: 5D 36    MOV   A,REG[0x36]        (0264)    mov   A, reg[PWM8_1_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
05A1: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_1_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_1_bReadCounter:
                                        (0293) _PWM8_1_bReadCounter:
                                        (0294)  bPWM8_1_ReadCounter:                            ; this name deprecated
                                        (0295) _bPWM8_1_ReadCounter:                            ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
05A2: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
05A3: 5D 36    MOV   A,REG[0x36]        (0304)    mov   A, reg[PWM8_1_COMPARE_REG]              ; Save the Compare register on the stack
05A5: 08       PUSH  A                  (0305)    push  A                                       ;
05A6: 41 37 FE AND   REG[0x37],0xFE     
05A9: 71 10    OR    F,0x10             
                                        (0306)    PWM8_1_Stop_M                                 ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
05AB: 5D 35    MOV   A,REG[0x35]        (0308)    mov   A, reg[PWM8_1_INPUT_REG]                ; save the clock input setting
05AD: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
05AE: 62 35 00 MOV   REG[0x35],0x0      (0311)    mov   reg[PWM8_1_INPUT_REG], INPUT_REG_NULL
05B1: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
05B3: 5D 34    MOV   A,REG[0x34]        (0314)    mov   A, reg[PWM8_1_COUNTER_REG]              ; DR2 <- DR0
05B5: 5D 36    MOV   A,REG[0x36]        (0315)    mov   A, reg[PWM8_1_COMPARE_REG]              ; Stash the Count on the stack
05B7: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
05B8: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
05BA: 60 36    MOV   REG[0x36],A        (0318)    mov   reg[PWM8_1_COMPARE_REG], A
05BC: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
05BE: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
05C0: 60 35    MOV   REG[0x35],A        (0321)    mov   reg[PWM8_1_INPUT_REG], A                ;
05C2: 70 EF    AND   F,0xEF             
05C4: 43 37 01 OR    REG[0x37],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_1_Start_M                                ;   then re-enable the PWM.
05C7: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
05C8: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
05CA: 70 3F    AND   F,0x3F             
05CC: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
05CE: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_1.asm
FILE: lib\pga_2.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_2.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2015/3/4 at 22:26:46
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_2.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_2_Start
                                        (0060) export _PGA_2_Start
                                        (0061) export  PGA_2_SetPower
                                        (0062) export _PGA_2_SetPower
                                        (0063) 
                                        (0064) export  PGA_2_SetGain
                                        (0065) export _PGA_2_SetGain
                                        (0066) 
                                        (0067) export  PGA_2_Stop
                                        (0068) export _PGA_2_Stop
                                        (0069) 
                                        (0070) IF (PGA_2_AGNDBUFAPI)
                                        (0071) export  PGA_2_EnableAGNDBuffer
                                        (0072) export _PGA_2_EnableAGNDBuffer
                                        (0073) export  PGA_2_DisableAGNDBuffer
                                        (0074) export _PGA_2_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_2_Start
                                        (0092) ;  FUNCTION NAME: PGA_2_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_2_Start:
                                        (0111) _PGA_2_Start:
                                        (0112)  PGA_2_SetPower:
                                        (0113) _PGA_2_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
05CF: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
05D1: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
05D2: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
05D3: 5D 77    MOV   A,REG[0x77]        (0120)    mov  A, reg[PGA_2_GAIN_CR2]                             ; read power value
05D5: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
05D7: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
05D9: 60 77    MOV   REG[0x77],A        (0123)    mov  reg[PGA_2_GAIN_CR2], A                        ; move complete value back to register
05DB: 18       POP   A                  (0124)    pop  A
05DC: 70 3F    AND   F,0x3F             
05DE: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
05E0: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_2_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_2_SetGain:
                                        (0154) _PGA_2_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
05E1: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
05E3: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
05E4: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
05E5: 5D 75    MOV   A,REG[0x75]        (0161)    mov  A, reg[PGA_2_GAIN_CR0]                             ; read mux settings
05E7: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
05E9: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
05EC: B0 0E    JNZ   0x05FB             (0164)    jnz  .SETHIGHGAIN
05EE: 41 74 FE AND   REG[0x74],0xFE     (0165)    and  reg[PGA_2_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
05F1: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
05F3: 60 75    MOV   REG[0x75],A        (0167)    mov  reg[PGA_2_GAIN_CR0], A                             ; move complete value back to register
05F5: 18       POP   A                  (0168)    pop  A
05F6: 70 3F    AND   F,0x3F             
05F8: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
05FA: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
05FB: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
05FE: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
0600: 60 75    MOV   REG[0x75],A        (0175)    mov  reg[PGA_2_GAIN_CR0], A                             ; move complete value back to register
0602: 43 74 01 OR    REG[0x74],0x1      (0176)    or   reg[PGA_2_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
0605: 18       POP   A                  (0177)    pop  A
0606: 70 3F    AND   F,0x3F             
0608: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
060A: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_2_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_2_Stop:
                                        (0203) _PGA_2_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
060B: 41 77 FC AND   REG[0x77],0xFC     (0206)    and REG[PGA_2_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
060E: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_2_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_2_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_2_EnableAGNDBuffer:
                                        (0233) _PGA_2_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
060F: 41 74 DF AND   REG[0x74],0xDF     (0235)    and   reg[PGA_2_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0612: 7F       RET                      (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_2_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_2_DisableAGNDBuffer:
                                        (0261) _PGA_2_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
0613: 43 74 20 OR    REG[0x74],0x20     (0263)    or    reg[PGA_2_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
0616: 7F       RET                      (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_2.asm
FILE: lib\pga_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_1.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2015/3/4 at 22:26:46
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_1.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_1_Start
                                        (0060) export _PGA_1_Start
                                        (0061) export  PGA_1_SetPower
                                        (0062) export _PGA_1_SetPower
                                        (0063) 
                                        (0064) export  PGA_1_SetGain
                                        (0065) export _PGA_1_SetGain
                                        (0066) 
                                        (0067) export  PGA_1_Stop
                                        (0068) export _PGA_1_Stop
                                        (0069) 
                                        (0070) IF (PGA_1_AGNDBUFAPI)
                                        (0071) export  PGA_1_EnableAGNDBuffer
                                        (0072) export _PGA_1_EnableAGNDBuffer
                                        (0073) export  PGA_1_DisableAGNDBuffer
                                        (0074) export _PGA_1_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_1_Start
                                        (0092) ;  FUNCTION NAME: PGA_1_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_1_Start:
                                        (0111) _PGA_1_Start:
                                        (0112)  PGA_1_SetPower:
                                        (0113) _PGA_1_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0617: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0619: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
061A: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
061B: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_1_GAIN_CR2]                             ; read power value
061D: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
061F: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
0621: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_1_GAIN_CR2], A                        ; move complete value back to register
0623: 18       POP   A                  (0124)    pop  A
0624: 70 3F    AND   F,0x3F             
0626: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0628: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_1_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_1_SetGain:
                                        (0154) _PGA_1_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
0629: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
062B: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
062C: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
062D: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_1_GAIN_CR0]                             ; read mux settings
062F: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
0631: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
0634: B0 0E    JNZ   0x0643             (0164)    jnz  .SETHIGHGAIN
0636: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_1_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
0639: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
063B: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
063D: 18       POP   A                  (0168)    pop  A
063E: 70 3F    AND   F,0x3F             
0640: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
0642: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0643: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
0646: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
0648: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
064A: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_1_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
064D: 18       POP   A                  (0177)    pop  A
064E: 70 3F    AND   F,0x3F             
0650: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
0652: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_1_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_1_Stop:
                                        (0203) _PGA_1_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
0653: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_1_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0656: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_1_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_1_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_1_EnableAGNDBuffer:
                                        (0233) _PGA_1_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0657: 41 70 DF AND   REG[0x70],0xDF     (0235)    and   reg[PGA_1_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
065A: 7F       RET                      (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_1_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_1_DisableAGNDBuffer:
                                        (0261) _PGA_1_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
065B: 43 70 20 OR    REG[0x70],0x20     (0263)    or    reg[PGA_1_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
065E: 7F       RET                      (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_1.asm
FILE: lib\lcd_2.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD_2.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD_2.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_2_Start
                                        (0044) export  _LCD_2_Start
                                        (0045) export   LCD_2_Init
                                        (0046) export  _LCD_2_Init
                                        (0047) 
                                        (0048) export   LCD_2_WriteData
                                        (0049) export  _LCD_2_WriteData
                                        (0050) 
                                        (0051) export   LCD_2_Control
                                        (0052) export  _LCD_2_Control
                                        (0053) 
                                        (0054) export  LCD_2_PrString
                                        (0055) export _LCD_2_PrString
                                        (0056) 
                                        (0057) export  LCD_2_PrCString
                                        (0058) export _LCD_2_PrCString
                                        (0059) 
                                        (0060) export  LCD_2_Position
                                        (0061) export _LCD_2_Position
                                        (0062) 
                                        (0063) export  LCD_2_PrHexByte
                                        (0064) export _LCD_2_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_2_PrHexInt
                                        (0067) export _LCD_2_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_2_Delay50uTimes
                                        (0070) export _LCD_2_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_2_Delay50u
                                        (0073) export _LCD_2_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_2_BARGRAPH_ENABLE)
                                        (0081) export  LCD_2_InitBG
                                        (0082) export _LCD_2_InitBG
                                        (0083) 
                                        (0084) export  LCD_2_InitVBG
                                        (0085) export _LCD_2_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_2_DrawVBG and
                                        (0090) ;    LCD_2_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_2_DrawVBG
                                        (0112) export _LCD_2_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_2_DrawVBG
                                        (0117) export  LCD_2_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_2_Write_Data
                                        (0127) export  _LCD_2_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_2_Port:           equ    PRT2DR
                                        (0135) LCD_2_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_2_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_2_E:              equ    10h
                                        (0139) LCD_2_RW:             equ    40h
                                        (0140) LCD_2_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_2_DATA_MASK:      equ    0Fh
                                        (0143) LCD_2_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_2_DATA_READ:      equ    ( LCD_2_E | LCD_2_RW | LCD_2_RS )
                                        (0146) LCD_2_CNTL_READ:      equ    ( LCD_2_E | LCD_2_RW )
                                        (0147) LCD_2_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_2_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_2_DISP_INC:       equ    03h
                                        (0151) LCD_2_DISP_OFF:       equ    08h
                                        (0152) LCD_2_DISP_ON:        equ    0Ch
                                        (0153) LCD_2_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_2_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_2_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_2_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_2_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_2_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_2_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_2_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_2_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_2_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_2_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_2_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_2_PrCString:
                                        (0205) _LCD_2_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
065F: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0660: 10       PUSH  X                  (0209)     push  X
0661: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0662: B0 04    JNZ   0x0667             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0664: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0665: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0666: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0667: 90 44    CALL  LCD_2_WriteData|_LCD_2_Write_Data|_LCD_2_WriteData|LCD_2_Write_Data(0218)     call  LCD_2_WriteData              ; Write data to LCD
0669: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
066A: 18       POP   A                  (0220)     pop   A
066B: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
066C: DF F2    JNC   _LCD_2_PrCString   (0222)     jnc   .Loop_PrCString
066E: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
066F: 8F EF    JMP   _LCD_2_PrCString   (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_2_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_2_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_2_PrHexByte:
                                        (0258) _LCD_2_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0681: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0682: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0683: 67       ASR   A                  (0262)     asr   A
0684: 67       ASR   A                  (0263)     asr   A
0685: 67       ASR   A                  (0264)     asr   A
0686: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0688: FF E7    INDEX LCD_2_HEX_STR      (0266)     index LCD_2_HEX_STR                  ; Get Hex value
068A: 90 21    CALL  LCD_2_WriteData|_LCD_2_Write_Data|_LCD_2_WriteData|LCD_2_Write_Data(0267)     call  LCD_2_WriteData              ; Write data to screen
068C: 18       POP   A                  (0268)     pop   A                            ; Restore value
068D: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
068F: FF E0    INDEX LCD_2_HEX_STR      (0270)     index LCD_2_HEX_STR                  ; Get Hex value
0691: 90 1A    CALL  LCD_2_WriteData|_LCD_2_Write_Data|_LCD_2_WriteData|LCD_2_Write_Data(0271)     call  LCD_2_WriteData              ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0693: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_2_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_2_PrHexInt:
                                        (0303) _LCD_2_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0694: 4B       SWAP  A,X                (0305)     swap  A,X
0695: 9F EA    CALL  _LCD_2_PrHexByte   (0306)     call  LCD_2_PrHexByte              ; Print MSB
0697: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0698: 9F E7    CALL  _LCD_2_PrHexByte   (0308)     call  LCD_2_PrHexByte              ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
069A: 7F       RET                      (0310)     ret
069B: 70 BF    AND   F,0xBF             
069D: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_2_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_2_PrString:
                                        (0342) _LCD_2_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
069F: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
06A1: A0 06    JZ    0x06A8             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_2_writeData is known not to modify X so no need to preserve
06A3: 90 08    CALL  LCD_2_WriteData|_LCD_2_Write_Data|_LCD_2_WriteData|LCD_2_Write_Data(0349)     call  LCD_2_WriteData              ; Write data to screen
06A5: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
06A6: 8F F8    JMP   0x069F             (0351)     jmp   .Loop_PrString               ; Go get next character
06A8: 70 3F    AND   F,0x3F             
06AA: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
06AC: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_2_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_2_WriteData:
                                        (0382) _LCD_2_WriteData:
                                        (0383)  LCD_2_Write_Data:   ; Do not use
                                        (0384) _LCD_2_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
06AD: 90 65    CALL  0x0714             (0386)     call  LCD_2_Check_Ready            ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_2_Check_Ready
06AF: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
06B0: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
06B1: 67       ASR   A                  (0390)     asr   A
06B2: 67       ASR   A                  (0391)     asr   A
06B3: 67       ASR   A                  (0392)     asr   A
06B4: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
06B6: 90 3B    CALL  0x06F3             (0394)     call  LCD_2_WDATA_Nibble           ; Write Upper nibble
06B8: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
06B9: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
06BB: 40       NOP                      (0397)     nop
06BC: 40       NOP                      (0398)     nop
06BD: 40       NOP                      (0399)     nop
06BE: 90 33    CALL  0x06F3             (0400)     call  LCD_2_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
06C0: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_2_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_2_Control:
                                        (0430) _LCD_2_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
06C1: 90 51    CALL  0x0714             (0432)     call  LCD_2_Check_Ready            ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_2_Check_Ready
06C3: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
06C4: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
06C5: 67       ASR   A                  (0436)     asr   A
06C6: 67       ASR   A                  (0437)     asr   A
06C7: 67       ASR   A                  (0438)     asr   A
06C8: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
06CA: 90 09    CALL  0x06D5             (0440)     call  LCD_2_WCNTL_Nibble           ; Write high nibble
06CC: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
06CD: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
06CF: 40       NOP                      (0443)     nop
06D0: 40       NOP                      (0444)     nop
06D1: 40       NOP                      (0445)     nop
06D2: 90 01    CALL  0x06D5             (0446)     call  LCD_2_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
06D4: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_2_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_2_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
06D5: 08       PUSH  A                  (0477)     push  A
06D6: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
06D9: 26 00 80 AND   [0x0],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_2_PORT_MASK
06DC: 51 00    MOV   A,[0x0]            (0480)     mov   A,[Port_2_Data_SHADE]
06DE: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_2_Port],A                      ; Reset control lines
                                        (0482) 
06E0: 18       POP   A                  (0483)     pop   A
06E1: 21 0F    AND   A,0xF              (0484)     and   A,LCD_2_DATA_MASK                      ; Make sure no bogus data in MSN
06E3: 29 10    OR    A,0x10             (0485)     or    A,LCD_2_E                              ; Bring "E" Enable line high
06E5: 2A 00    OR    A,[0x0]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
06E7: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_2_Port], A                     ; Write data
06E9: 53 00    MOV   [0x0],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
06EB: 40       NOP                      (0489)     nop
06EC: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_2_PORT_MASK|LCD_2_DATA_MASK)   ; Disable E signal and leave data on bus.
06EE: 53 00    MOV   [0x0],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
06F0: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_2_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
06F2: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_2_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_2_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
06F3: 08       PUSH  A                  (0523)     push  A
06F4: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
06F7: 26 00 80 AND   [0x0],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_2_PORT_MASK
06FA: 2E 00 20 OR    [0x0],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_2_RS                ; Raise RS to signify a Data Write
06FD: 51 00    MOV   A,[0x0]            (0527)     mov   A,[Port_2_Data_SHADE]
06FF: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_2_Port],A
                                        (0529) 
0701: 18       POP   A                  (0530)     pop   A
0702: 21 0F    AND   A,0xF              (0531)     and   A,LCD_2_DATA_MASK                           ; Make sure no bogus data in A[7:4]
0704: 29 30    OR    A,0x30             (0532)     or    A,(LCD_2_E | LCD_2_RS)                      ; Bring "E" Enable line high
0706: 2A 00    OR    A,[0x0]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0708: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_2_Port], A                            ; Write data
070A: 53 00    MOV   [0x0],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
070C: 40       NOP                      (0536)     NOP
070D: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_2_PORT_MASK|LCD_2_DATA_MASK|LCD_2_RS)  ; Disable E signal and leave Data on bus
070F: 53 00    MOV   [0x0],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0711: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_2_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0713: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_2_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_2_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0714: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
0715: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0718: 26 00 80 AND   [0x0],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_2_PORT_MASK        ; Mask of all LCD bits
071B: 51 00    MOV   A,[0x0]            (0574)     mov   A,[Port_2_Data_SHADE]
071D: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_2_Port],A                           ; Zero LCD port bits
                                        (0576) 
071F: 26 01 F0 AND   [0x1],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_2_DATA_MASK ; Clear out LCD mode bits.
0722: 51 01    MOV   A,[0x1]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0724: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0726: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_2_PortMode0],A                      ; Setup LCD Port for reading
0728: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
072A: 2E 00 40 OR    [0x0],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_2_RW                ; Raise RW to signify Read operation
072D: 51 00    MOV   A,[0x0]            (0584)     mov   A,[Port_2_Data_SHADE]
072F: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_2_Port],A
0731: 40       NOP                      (0586)     NOP
                                        (0587) 
0732: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0733: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0735: 2E 00 50 OR    [0x0],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_2_CNTL_READ                  ; Raise E to start cycle
0738: 51 00    MOV   A,[0x0]            (0593)     mov   A,[Port_2_Data_SHADE]
073A: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_2_Port],A
                                        (0595) 
073C: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
073D: 40       NOP                      (0597)     nop
073E: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_2_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0740: 08       PUSH  A                  (0610)     push  A
0741: 26 00 C0 AND   [0x0],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_2_PORT_MASK | LCD_2_RW)     ; Lower E signal
0744: 51 00    MOV   A,[0x0]            (0612)     mov   A,[Port_2_Data_SHADE]
0746: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_2_Port],A
                                        (0614) 
0748: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0749: 40       NOP                      (0616)     nop                                    ; fastest PSoC
074A: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
074B: 2E 00 50 OR    [0x0],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_2_CNTL_READ                   ; Raise E to start cycle
074E: 51 00    MOV   A,[0x0]            (0620)     mov   A,[Port_2_Data_SHADE]
0750: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_2_Port],A
                                        (0622) 
0752: 40       NOP                      (0623)     nop
0753: 40       NOP                      (0624)     nop
                                        (0625) 
0754: 26 00 C0 AND   [0x0],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_2_PORT_MASK | LCD_2_RW)     ; Lower E signal
0757: 51 00    MOV   A,[0x0]            (0627)     mov   A,[Port_2_Data_SHADE]
0759: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_2_Port],A
                                        (0629) 
075B: 18       POP   A                  (0630)     pop   A
075C: 21 08    AND   A,0x8              (0631)     and   A,LCD_2_READY_BIT                                       ; Check busy
                                        (0632) 
075E: A0 04    JZ    0x0763             (0633)     jz    .UNLOCK
0760: 79       DEC   X                  (0634)     dec   X
0761: BF D3    JNZ   0x0735             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0763: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0764: 2E 01 7F OR    [0x1],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_2_PORT_WRITE ; Revert Data bit to Write mode
0767: 51 01    MOV   A,[0x1]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0769: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
076B: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_2_PortMode0],A                      ; Setup LCD Port for writing
076D: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
076F: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0770: 7F       RET                      (0646)     ret
0771: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_2_Start
                                        (0652) ;  FUNCTION NAME: LCD_2_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_2_Start:
                                        (0679) _LCD_2_Start:
                                        (0680)  LCD_2_Init:
                                        (0681) _LCD_2_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0774: 26 01 80 AND   [0x1],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_2_PORT_MASK           ; Mask off LCD bits
0777: 2E 01 7F OR    [0x1],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_2_PORT_WRITE           ; Set LCD port for writing
077A: 26 02 80 AND   [0x2],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_2_PORT_MASK           ; Mask off LCD bits
                                        (0688) 
077D: 51 01    MOV   A,[0x1]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
077F: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0781: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_2_PortMode0],A                                ; Setup LCD Port for writing
0783: 51 02    MOV   A,[0x2]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0785: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_2_PortMode1],A
0787: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0789: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
078B: 90 67    CALL  _LCD_2_Delay50uTimes(0697)     call  LCD_2_Delay50uTimes
078D: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
078F: 90 63    CALL  _LCD_2_Delay50uTimes(0699)     call  LCD_2_Delay50uTimes
                                        (0700) 
0791: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0793: 9F 40    CALL  0x06D5             (0702)     call  LCD_2_WCNTL_Nibble
                                        (0703) 
0795: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0797: 90 5B    CALL  _LCD_2_Delay50uTimes(0705)     call  LCD_2_Delay50uTimes
                                        (0706) 
0799: 50 03    MOV   A,0x3              (0707)     mov   A,03h
079B: 9F 38    CALL  0x06D5             (0708)     call  LCD_2_WCNTL_Nibble
                                        (0709) 
079D: 90 63    CALL  _LCD_2_Delay50u    (0710)     call  LCD_2_Delay50u
079F: 90 61    CALL  _LCD_2_Delay50u    (0711)     call  LCD_2_Delay50u
07A1: 90 5F    CALL  _LCD_2_Delay50u    (0712)     call  LCD_2_Delay50u
                                        (0713) 
07A3: 50 03    MOV   A,0x3              (0714)     mov   A,03h
07A5: 9F 2E    CALL  0x06D5             (0715)     call  LCD_2_WCNTL_Nibble
                                        (0716) 
07A7: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
07A9: 90 49    CALL  _LCD_2_Delay50uTimes(0718)     call  LCD_2_Delay50uTimes
                                        (0719) 
07AB: 50 02    MOV   A,0x2              (0720)     mov   A,02h
07AD: 9F 26    CALL  0x06D5             (0721)     call  LCD_2_WCNTL_Nibble
                                        (0722) 
07AF: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
07B1: 90 41    CALL  _LCD_2_Delay50uTimes(0724)     call  LCD_2_Delay50uTimes
                                        (0725) 
07B3: 50 08    MOV   A,0x8              (0726)     mov   A,08h
07B5: 9F 0A    CALL  _LCD_2_Control     (0727)     call  LCD_2_Control
07B7: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
07B9: 90 39    CALL  _LCD_2_Delay50uTimes(0729)     call  LCD_2_Delay50uTimes
                                        (0730) 
07BB: 50 01    MOV   A,0x1              (0731)     mov   A,01h
07BD: 9F 02    CALL  _LCD_2_Control     (0732)     call  LCD_2_Control
07BF: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
07C1: 90 31    CALL  _LCD_2_Delay50uTimes(0734)     call  LCD_2_Delay50uTimes
                                        (0735) 
07C3: 50 06    MOV   A,0x6              (0736)     mov   A,06h
07C5: 9E FA    CALL  _LCD_2_Control     (0737)     call  LCD_2_Control
                                        (0738) 
07C7: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
07C9: 9E F6    CALL  _LCD_2_Control     (0740)     call  LCD_2_Control
                                        (0741) 
07CB: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_2_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
07CD: 9E F2    CALL  _LCD_2_Control     (0743)     call  LCD_2_Control
                                        (0744) 
07CF: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_2_DISP_OFF
07D1: 9E EE    CALL  _LCD_2_Control     (0746)     call  LCD_2_Control
                                        (0747) 
07D3: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_2_DISP_ON
07D5: 9E EA    CALL  _LCD_2_Control     (0749)     call  LCD_2_Control
                                        (0750) 
07D7: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_2_DISP_INC
07D9: 9E E6    CALL  _LCD_2_Control     (0752)     call  LCD_2_Control
                                        (0753) 
07DB: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
07DD: 90 15    CALL  _LCD_2_Delay50uTimes(0755)     call  LCD_2_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
07DF: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_2_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_2_ROW_OFFSET::
                                        (0783)      DB    LCD_2_ROW1_OFFSET, LCD_2_ROW2_OFFSET, LCD_2_ROW3_OFFSET, LCD_2_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_2_Position:
                                        (0788) _LCD_2_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
07E4: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
07E6: 10       PUSH  X                  (0791)     push  X                            ; Store COL
07E7: FF F7    INDEX LCD_2_ROW_OFFSET   (0792)     index LCD_2_ROW_OFFSET ; Get ROW memory offset from table
07E9: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
07EA: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
07EC: 20       POP   X                  (0795)     pop   X
                                        (0796) 
07ED: 9E D2    CALL  _LCD_2_Control     (0797)     call  LCD_2_Control                ; Write control byte
07EF: 70 3F    AND   F,0x3F             
07F1: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
07F3: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_2_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_2_Delay50uTimes:
                                        (0825) _LCD_2_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
07F4: 90 0C    CALL  _LCD_2_Delay50u    (0827)     call  LCD_2_Delay50u
07F6: 78       DEC   A                  (0828)     dec   A
07F7: BF FC    JNZ   _LCD_2_Delay50uTimes(0829)     jnz   LCD_2_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
07F9: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_2_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_2_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_2_Delay50u:
                                        (0869)  _LCD_2_Delay50u:                      ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0802: 08       PUSH  A                  (0871)     push  A
0803: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0805: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0807: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0809: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
080B: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
080D: D0 06    JNC   0x0814             (0877)     jnc   .Delay50u_End
080F: FF E9    INDEX LCD_2_Delay50u_Table(0878)     index LCD_2_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0811: 78       DEC   A                  (0880)     dec   A                              ; [4]
0812: BF FE    JNZ   0x0811             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0814: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0815: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_2_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_2_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_2_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_2_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_2_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_2_Position               ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_2_WriteData              ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_2_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_2_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_2_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
0816: 4F       MOV   X,SP               (1015)     mov   X, SP
0817: 10       PUSH  X                  (1016)     push  X
0818: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
081A: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
081C: 70 3F    AND   F,0x3F             
081E: 71 C0    OR    F,0xC0             
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
0820: 9F C2    CALL  _LCD_2_Position    (1020)     call  LCD_2_Position               ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
0822: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
0823: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
0826: B0 05    JNZ   0x082C             (1026)     jnz   .LCD_CHECK1
0828: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
082A: 80 11    JMP   0x083C             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
082C: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
082F: D0 07    JNC   0x0837             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
0831: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
0833: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
0835: 80 06    JMP   0x083C             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
0837: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
0839: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
083C: 9E 6F    CALL  LCD_2_WriteData|_LCD_2_Write_Data|_LCD_2_WriteData|LCD_2_Write_Data(1042)     call  LCD_2_WriteData              ; Display BG character
                                        (1043) 
083E: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
0840: BF E2    JNZ   0x0823             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
0842: 70 3F    AND   F,0x3F             
0844: 71 C0    OR    F,0xC0             
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
0846: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_2_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_2_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_2_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_2_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_2_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_2_Control                ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_2_WriteData              ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_2_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_2_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_2_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
0847: 4F       MOV   X,SP               (1168)     mov   X, SP
0848: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
084A: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
084C: 08       PUSH  A                  (1172)     push  A
084D: FF 91    INDEX LCD_2_ROW_OFFSET   (1173)     index LCD_2_ROW_OFFSET  ; Get row offset
084F: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
0851: 9E 6E    CALL  _LCD_2_Control     (1175)     call  LCD_2_Control                ; Position Cursor
0853: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
0856: B0 05    JNZ   0x085C             (1177)     jnz   .VBG_NZ_SEG
0858: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
085A: 80 13    JMP   0x086E             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
085C: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
085F: D0 09    JNC   0x0869             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
0861: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
0863: 78       DEC   A                  (1185)     dec   A
0864: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
0867: 80 06    JMP   0x086E             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
0869: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
086C: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
086E: 9E 3D    CALL  LCD_2_WriteData|_LCD_2_Write_Data|_LCD_2_WriteData|LCD_2_Write_Data(1194)     call  LCD_2_WriteData              ; Write value
0870: 18       POP   A                  (1195)     pop   A
0871: 78       DEC   A                  (1196)     dec   A
0872: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
0874: BF D7    JNZ   0x084C             (1198)     jnz   .VBG_LOOP
0876: 70 3F    AND   F,0x3F             
0878: 71 C0    OR    F,0xC0             
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
087A: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_2_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_2_InitVBG:
                                        (1236) _LCD_2_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
087B: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
087C: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
087D: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
087E: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_2_CG_RAM_OFFSET              ; Setup pointer
0880: 9E 3F    CALL  _LCD_2_Control     (1243)     call  LCD_2_Control                ; Position the CG pointer
0882: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
0885: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
0888: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
088A: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
088C: D0 05    JNC   0x0892             (1251)     jnc   .VBG_SOLID
088E: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
0890: 80 03    JMP   0x0894             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
0892: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
0894: 9E 17    CALL  LCD_2_WriteData|_LCD_2_Write_Data|_LCD_2_WriteData|LCD_2_Write_Data(1257)     call  LCD_2_WriteData              ; character data
0896: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
0898: BF EF    JNZ   0x0888             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
089A: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
089C: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
089F: BF E5    JNZ   0x0885             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
08A1: 18       POP   A                  (1264)     pop  A
08A2: 18       POP   A                  (1265)     pop  A
08A3: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_2_DISP_ON                    ; Turn on display, don't really
08A5: 9E 1A    CALL  _LCD_2_Control     (1267)     call LCD_2_Control                 ; need this.
08A7: 70 3F    AND   F,0x3F             
08A9: 71 C0    OR    F,0xC0             
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
08AB: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_2_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_2_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_2_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_2_InitBG:
                                        (1317) _LCD_2_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
08BA: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
08BB: 38 03    ADD   SP,0x3             (1320)     add   SP,3
08BD: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
08BF: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_2_CG_RAM_OFFSET              ; Setup pointer
08C1: 9D FE    CALL  _LCD_2_Control     (1324)     call  LCD_2_Control                ; Position the CG pointer
08C3: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
08C6: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
08C9: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
08CB: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
08CE: B0 05    JNZ   0x08D4             (1332)     jnz   .BG_OTHER
08D0: FF DA    INDEX LCD_2_BG_TYPE1     (1333)     index LCD_2_BG_TYPE1
08D2: 80 03    JMP   0x08D6             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
08D4: FF DD    INDEX LCD_2_BG_TYPE2     (1336)     index LCD_2_BG_TYPE2
                                        (1337)  .BG_Load:
08D6: 9D D5    CALL  LCD_2_WriteData|_LCD_2_Write_Data|_LCD_2_WriteData|LCD_2_Write_Data(1338)     call  LCD_2_WriteData
08D8: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
08DA: BF EE    JNZ   0x08C9             (1340)     jnz   .BG_Loop2
08DC: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
08DE: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
08E1: BF E4    JNZ   0x08C6             (1343)     jnz   .BG_Loop1
                                        (1344) 
08E3: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
08E5: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_2_DISP_ON
08E7: 9D D8    CALL  _LCD_2_Control     (1347)     call  LCD_2_Control
08E9: 70 3F    AND   F,0x3F             
08EB: 71 C0    OR    F,0xC0             
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
08ED: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD_2.asm
FILE: lib\i2chw_temprsrcinits.asm       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHW_Temp.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHW_TempCommon.inc"
                                        (0025) include "PSoCGPIOINT.inc"
                                        (0026) include "PSoCAPI.inc"
                                        (0027) 
                                        (0028) ;-----------------------------------------------
                                        (0029) ; include instance specific register definitions
                                        (0030) ;-----------------------------------------------
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ;  Global Symbols
                                        (0034) ;-----------------------------------------------
                                        (0035) ;-------------------------------------------------------------------
                                        (0036) ;  Declare the functions global for both assembler and C compiler.
                                        (0037) ;
                                        (0038) ;  Note that there are two names for each API. First name is
                                        (0039) ;  assembler reference. Name with underscore is name refence for
                                        (0040) ;  C compiler.  Calling function in C source code does not require
                                        (0041) ;  the underscore.
                                        (0042) ;-------------------------------------------------------------------
                                        (0043) 
                                        (0044) export    I2CHW_Temp_ResumeInt
                                        (0045) export   _I2CHW_Temp_ResumeInt
                                        (0046) export    I2CHW_Temp_EnableInt
                                        (0047) export   _I2CHW_Temp_EnableInt
                                        (0048) export    I2CHW_Temp_ClearInt
                                        (0049) export   _I2CHW_Temp_ClearInt
                                        (0050) IF (I2CHW_Temp_MUM_SEL & (I2CHW_Temp_SLAVE | I2CHW_Temp_MMS))
                                        (0051) export    I2CHW_Temp_EnableSlave
                                        (0052) export   _I2CHW_Temp_EnableSlave
                                        (0053) ENDIF
                                        (0054) IF (I2CHW_Temp_MUM_SEL & (I2CHW_Temp_MSTR | I2CHW_Temp_MMS))
                                        (0055) export    I2CHW_Temp_EnableMstr
                                        (0056) export   _I2CHW_Temp_EnableMstr
                                        (0057) ENDIF
                                        (0058) export    I2CHW_Temp_Start
                                        (0059) export   _I2CHW_Temp_Start
                                        (0060) export    I2CHW_Temp_DisableInt
                                        (0061) export   _I2CHW_Temp_DisableInt
                                        (0062) IF (I2CHW_Temp_MUM_SEL & (I2CHW_Temp_SLAVE | I2CHW_Temp_MMS))
                                        (0063) export    I2CHW_Temp_DisableSlave
                                        (0064) export   _I2CHW_Temp_DisableSlave
                                        (0065) ENDIF
                                        (0066) IF (I2CHW_Temp_MUM_SEL & (I2CHW_Temp_MSTR | I2CHW_Temp_MMS))
                                        (0067) export    I2CHW_Temp_DisableMstr
                                        (0068) export   _I2CHW_Temp_DisableMstr
                                        (0069) ENDIF
                                        (0070) export    I2CHW_Temp_Stop
                                        (0071) export   _I2CHW_Temp_Stop
                                        (0072) 
                                        (0073) IF (I2CHW_Temp_MUM_SEL & (I2CHW_Temp_SLAVE | I2CHW_Temp_MMS))
                                        (0074)  IF (I2CHW_Temp_CY8C22x45)
                                        (0075) export    I2CHW_Temp_EnableHWAddrCheck
                                        (0076) export   _I2CHW_Temp_EnableHWAddrCheck
                                        (0077) export    I2CHW_Temp_DisableHWAddrCheck
                                        (0078) export   _I2CHW_Temp_DisableHWAddrCheck
                                        (0079)  ENDIF
                                        (0080) ENDIF
                                        (0081) 
                                        (0082) AREA UserModules (ROM, REL)
                                        (0083) 
                                        (0084) .SECTION
                                        (0085) 
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;  FUNCTION NAME: I2CHW_Temp_Start
                                        (0088) ;
                                        (0089) ;  DESCRIPTION:
                                        (0090) ;   Initialize the I2CHW_Temp I2C bus interface.
                                        (0091) ;
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;
                                        (0094) ;  ARGUMENTS:
                                        (0095) ;
                                        (0096) ;  RETURNS: none
                                        (0097) ;
                                        (0098) ;  SIDE EFFECTS:
                                        (0099) ;    The A and X registers may be modified by this or future implementations
                                        (0100) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0101) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0102) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0103) ;    functions.
                                        (0104) ;          
                                        (0105)  I2CHW_Temp_Start:
                                        (0106) _I2CHW_Temp_Start:
                                        (0107)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0108) IF (I2CHW_Temp_MUM_SEL & (I2CHW_Temp_SLAVE | I2CHW_Temp_MMS))
                                        (0109)  IF (I2CHW_Temp_CY8C22x45)
                                        (0110)    M8C_SetBank1
                                        (0111)    mov   reg[I2CHW_Temp_ADDR], I2CHW_Temp_SLAVE_ADDR;I2CHW_Temp_HW_ADDR_EN
                                        (0112)    M8C_SetBank0
                                        (0113)  ENDIF
                                        (0114) ENDIF
                                        (0115)     RAM_EPILOGUE RAM_USE_CLASS_1
08EE: 7F       RET                      (0116)     ret
                                        (0117) .ENDSECTION
                                        (0118) 
                                        (0119) .SECTION
                                        (0120) ;-----------------------------------------------------------------------------
                                        (0121) ;  FUNCTION NAME: I2CHW_Temp_ResumeInt
                                        (0122) ;
                                        (0123) ;  DESCRIPTION:
                                        (0124) ;     reEnables SDA interrupt allowing start condition detection. 
                                        (0125) ;     Skips clearing INT_CLR3 by entering the EnableInt at ResumeIntEntry:.
                                        (0126) ;     Remember to call the global interrupt enable function by using
                                        (0127) ;     the macro: M8C_EnableGInt.
                                        (0128) ;-----------------------------------------------------------------------------
                                        (0129) ;  ARGUMENTS: none
                                        (0130) ;
                                        (0131) ;  RETURNS: none
                                        (0132) ;
                                        (0133) ;  SIDE EFFECTS:
                                        (0134) ;    The A and X registers may be modified by this or future implementations
                                        (0135) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0136) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0137) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0138) ;    functions.
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140)  I2CHW_Temp_ResumeInt:
                                        (0141) _I2CHW_Temp_ResumeInt:
                                        (0142)     RAM_PROLOGUE RAM_USE_CLASS_1
08EF: 80 04    JMP   0x08F4             (0143)     jmp ResumeIntEntry
08F1: 62 DD FE MOV   REG[0xDD],0xFE     
08F4: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0144)     
                                        (0145) ;-----------------------------------------------------------------------------
                                        (0146) ;  FUNCTION NAME: I2CHW_Temp_EnableInt
                                        (0147) ;
                                        (0148) ;  DESCRIPTION:
                                        (0149) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0150) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0151) ;
                                        (0152) ;-----------------------------------------------------------------------------
                                        (0153) ;
                                        (0154) ;  ARGUMENTS: none
                                        (0155) ;
                                        (0156) ;  RETURNS: none
                                        (0157) ;
                                        (0158) ;  SIDE EFFECTS:
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165)  I2CHW_Temp_EnableInt:
                                        (0166) _I2CHW_Temp_EnableInt:
                                        (0167)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)     ;first clear any pending interrupts
                                        (0169)     M8C_ClearIntFlag INT_CLR3, I2CHW_Temp_INT_MASK
                                        (0170) ResumeIntEntry:
                                        (0171)     M8C_EnableIntMask I2CHW_Temp_INT_REG, I2CHW_Temp_INT_MASK
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_1
08F7: 7F       RET                      (0173)     ret
08F8: 62 DD FE MOV   REG[0xDD],0xFE     
                                        (0174) 
                                        (0175) .ENDSECTION
                                        (0176) 
                                        (0177) .SECTION
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;  FUNCTION NAME: I2CHW_Temp_ClearInt
                                        (0180) ;
                                        (0181) ;  DESCRIPTION:
                                        (0182) ;     Clears only the I2C interrupt in the INT_CLR3 register.
                                        (0183) ;
                                        (0184) ;-----------------------------------------------------------------------------
                                        (0185) ;
                                        (0186) ;  ARGUMENTS: none
                                        (0187) ;
                                        (0188) ;  RETURNS: none
                                        (0189) ;
                                        (0190) ;  SIDE EFFECTS:
                                        (0191) ;    The A and X registers may be modified by this or future implementations
                                        (0192) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0193) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0194) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0195) ;    functions.
                                        (0196) ;          
                                        (0197)  I2CHW_Temp_ClearInt:
                                        (0198) _I2CHW_Temp_ClearInt:
                                        (0199)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0200)     M8C_ClearIntFlag INT_CLR3, I2CHW_Temp_INT_MASK
                                        (0201)     RAM_EPILOGUE RAM_USE_CLASS_1
08FB: 7F       RET                      (0202)     ret
08FC: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0203)     
                                        (0204) .ENDSECTION
                                        (0205) 
                                        (0206) IF (I2CHW_Temp_MUM_SEL & (I2CHW_Temp_MSTR | I2CHW_Temp_MMS))	
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: I2CHW_Temp_EnableMstr
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0213) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0214) ;
                                        (0215) ;-----------------------------------------------------------------------------
                                        (0216) ;
                                        (0217) ;  ARGUMENTS: none
                                        (0218) ;
                                        (0219) ;  RETURNS: none
                                        (0220) ;
                                        (0221) ;  SIDE EFFECTS:
                                        (0222) ;    The A and X registers may be modified by this or future implementations
                                        (0223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0225) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0226) ;    functions.
                                        (0227) ;          
                                        (0228)  I2CHW_Temp_EnableMstr:
                                        (0229) _I2CHW_Temp_EnableMstr:
                                        (0230)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0231) 	;;CDT 28399
                                        (0232) 	RAM_SETPAGE_CUR >I2CHW_Temp_bStatus
08FF: 26 03 7F AND   [0x3],0x7F         (0233) 	and [I2CHW_Temp_bStatus], ~0x80 ;; ~I2CHW_Temp_ISR_ACTIVE
0902: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0234) 	RAM_SETPAGE_CUR >I2CHW_Temp_RsrcStatus
0905: 26 05 7F AND   [0x5],0x7F         (0235)     and    [I2CHW_Temp_RsrcStatus], ~0x80;;~I2CHW_ISR_ACTIVE        ; Make sure internal control variables weren't corrupted previous to start.
0908: 43 D6 02 OR    REG[0xD6],0x2      
                                        (0236)     BitSetI2CHW_Temp_CFG I2C_M_EN                                    ;Enable SDA interupt
                                        (0237)     RAM_EPILOGUE RAM_USE_CLASS_1
090B: 7F       RET                      (0238)     ret
090C: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) ENDIF
                                        (0242) 
                                        (0243) IF (I2CHW_Temp_MUM_SEL & (I2CHW_Temp_SLAVE | I2CHW_Temp_MMS))
                                        (0244) .SECTION
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  FUNCTION NAME: I2CHW_Temp_EnableSlave
                                        (0247) ;
                                        (0248) ;  DESCRIPTION:
                                        (0249) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0250) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0251) ;
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS: none
                                        (0255) ;
                                        (0256) ;  RETURNS: none
                                        (0257) ;
                                        (0258) ;  SIDE EFFECTS:
                                        (0259) ;    The A and X registers may be modified by this or future implementations
                                        (0260) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0261) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0262) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0263) ;    functions.
                                        (0264) ;          
                                        (0265)  I2CHW_Temp_EnableSlave:
                                        (0266) _I2CHW_Temp_EnableSlave:
                                        (0267)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0268)     
                                        (0269)     M8C_SetBank1 ;The SDA and SCL pins are setting to Hi-z drive mode
                                        (0270)     and reg[I2CHW_TempSDA_DriveMode_0_ADDR],~(I2CHW_TempSDA_MASK|I2CHW_TempSCL_MASK)
                                        (0271)     or  reg[I2CHW_TempSDA_DriveMode_1_ADDR], (I2CHW_TempSDA_MASK|I2CHW_TempSCL_MASK)
                                        (0272)     M8C_SetBank0
                                        (0273)     or  reg[I2CHW_TempSDA_DriveMode_2_ADDR], (I2CHW_TempSDA_MASK|I2CHW_TempSCL_MASK)
                                        (0274)    
                                        (0275)     BitSetI2CHW_Temp_CFG I2C_S_EN                                    ;Enable SDA interrupt
                                        (0276)     nop
                                        (0277)     nop
                                        (0278)     nop
                                        (0279)     nop
                                        (0280)     nop
                                        (0281)    
                                        (0282)     M8C_SetBank1 ;The SDA and SCL pins are restored to Open Drain Low drive mode
                                        (0283)     or reg[I2CHW_TempSDA_DriveMode_0_ADDR], (I2CHW_TempSDA_MASK|I2CHW_TempSCL_MASK)
                                        (0284)     or reg[I2CHW_TempSDA_DriveMode_1_ADDR], (I2CHW_TempSDA_MASK|I2CHW_TempSCL_MASK)
                                        (0285)     M8C_SetBank0
                                        (0286)     or reg[I2CHW_TempSDA_DriveMode_2_ADDR], (I2CHW_TempSDA_MASK|I2CHW_TempSCL_MASK)
                                        (0287)     
                                        (0288)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0289)     ret
                                        (0290) 
                                        (0291) .ENDSECTION
                                        (0292) ENDIF
                                        (0293) 
                                        (0294) .SECTION
                                        (0295) ;-----------------------------------------------------------------------------
                                        (0296) ;  FUNCTION NAME: I2CHW_Temp_DisableInt
                                        (0297) ;  FUNCTION NAME: I2CHW_Temp_Stop
                                        (0298) ;
                                        (0299) ;  DESCRIPTION:
                                        (0300) ;     Disables I2CHW_Temp slave by disabling SDA interrupt
                                        (0301) ;
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;
                                        (0304) ;  ARGUMENTS: none
                                        (0305) ;
                                        (0306) ;  RETURNS: none
                                        (0307) ;
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0311) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0312) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0313) ;    functions.
                                        (0314) ;          
                                        (0315)  I2CHW_Temp_DisableInt:
                                        (0316) _I2CHW_Temp_DisableInt:
                                        (0317)  I2CHW_Temp_Stop:
                                        (0318) _I2CHW_Temp_Stop:
                                        (0319)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0320)     M8C_DisableIntMask I2CHW_Temp_INT_REG, I2CHW_Temp_INT_MASK
                                        (0321)     RAM_EPILOGUE RAM_USE_CLASS_1
090F: 7F       RET                      (0322)     ret
0910: 41 D6 FD AND   REG[0xD6],0xFD     
                                        (0323) 
                                        (0324) .ENDSECTION
                                        (0325) 
                                        (0326) IF (I2CHW_Temp_MUM_SEL & (I2CHW_Temp_SLAVE | I2CHW_Temp_MMS))
                                        (0327) .SECTION
                                        (0328) ;-----------------------------------------------------------------------------
                                        (0329) ;  FUNCTION NAME: I2CHW_Temp_DisableSlave
                                        (0330) ;
                                        (0331) ;  DESCRIPTION:
                                        (0332) ;     Disables I2CHW_Temp slave by disabling SDA interrupt
                                        (0333) ;
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;
                                        (0336) ;  ARGUMENTS: none
                                        (0337) ;
                                        (0338) ;  RETURNS: none
                                        (0339) ;
                                        (0340) ;  SIDE EFFECTS:
                                        (0341) ;    The A and X registers may be modified by this or future implementations
                                        (0342) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0343) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0344) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0345) ;    functions.
                                        (0346) ;          
                                        (0347)  I2CHW_Temp_DisableSlave:
                                        (0348) _I2CHW_Temp_DisableSlave:
                                        (0349)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0350)     BitClrI2CHW_Temp_CFG I2C_S_EN                                    ;Disable the Slave
                                        (0351)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0352)     ret
                                        (0353) 
                                        (0354) .ENDSECTION
                                        (0355) ENDIF
                                        (0356) 
                                        (0357) IF (I2CHW_Temp_MUM_SEL & (I2CHW_Temp_MSTR | I2CHW_Temp_MMS))
                                        (0358) .SECTION
                                        (0359) ;-----------------------------------------------------------------------------
                                        (0360) ;  FUNCTION NAME: I2CHW_Temp_DisableMstr
                                        (0361) ;
                                        (0362) ;  DESCRIPTION:
                                        (0363) ;     Disables I2CHW_Temp slave by disabling SDA interrupt
                                        (0364) ;
                                        (0365) ;-----------------------------------------------------------------------------
                                        (0366) ;
                                        (0367) ;  ARGUMENTS: none
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378)  I2CHW_Temp_DisableMstr:
                                        (0379) _I2CHW_Temp_DisableMstr:
                                        (0380)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0381)     BitClrI2CHW_Temp_CFG I2C_M_EN                                    ;Disable the Master
                                        (0382)     RAM_EPILOGUE RAM_USE_CLASS_1
0913: 7F       RET                      (0383)    ret
                                        (0384) 
                                        (0385) .ENDSECTION
                                        (0386) ENDIF
                                        (0387) 
                                        (0388) IF (I2CHW_Temp_MUM_SEL & (I2CHW_Temp_SLAVE | I2CHW_Temp_MMS))
                                        (0389)  IF (I2CHW_Temp_CY8C22x45)
                                        (0390)  .SECTION
                                        (0391) ;-----------------------------------------------------------------------------
                                        (0392) ;  FUNCTION NAME: void  I2CHW_Temp_EnableHWAddrCheck(void)
                                        (0393) ;
                                        (0394) ;  DESCRIPTION:
                                        (0395) ;   Set respective bit to engage the HardWare Address Recognition 
                                        (0396) ;   feature in I2C slave block.
                                        (0397) ;
                                        (0398) ;-----------------------------------------------------------------------------
                                        (0399) ;
                                        (0400) ;  ARGUMENTS: none
                                        (0401) ;
                                        (0402) ;  RETURNS: none
                                        (0403) ;
                                        (0404) ;  SIDE EFFECTS:
                                        (0405) ;    If the HardWare Address Recognition feature is enabled, the ROM registers reading does not work.
                                        (0406) ;    The HardWare Address Recognition feature should be disabled for using ROM registers.
                                        (0407) ;
                                        (0408) ;    The A and X registers may be modified by this or future implementations
                                        (0409) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0410) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0411) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0412) ;    functions.
                                        (0413) ;
                                        (0414)  I2CHW_Temp_EnableHWAddrCheck:
                                        (0415) _I2CHW_Temp_EnableHWAddrCheck:
                                        (0416)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0417)    M8C_SetBank1
                                        (0418)    or    reg[I2CHW_Temp_ADDR], I2CHW_Temp_HW_ADDR_EN
                                        (0419)    M8C_SetBank0
                                        (0420)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0421)    ret
                                        (0422) .ENDSECTION
                                        (0423) 
                                        (0424) .SECTION
                                        (0425) ;-----------------------------------------------------------------------------
                                        (0426) ;  FUNCTION NAME: void  I2CHW_Temp_DisableHWAddrCheck(void)
                                        (0427) ;
                                        (0428) ;  DESCRIPTION:
                                        (0429) ;   Clear respective bit to disengage the HardWare Address Recognition 
                                        (0430) ;   feature in I2C slave block.
                                        (0431) ;
                                        (0432) ;-----------------------------------------------------------------------------
                                        (0433) ;
                                        (0434) ;  ARGUMENTS: none
                                        (0435) ;
                                        (0436) ;  RETURNS: none
                                        (0437) ;
                                        (0438) ;  SIDE EFFECTS:
                                        (0439) ;    The A and X registers may be modified by this or future implementations
                                        (0440) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0441) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0442) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0443) ;    functions.
                                        (0444) ;
                                        (0445)  I2CHW_Temp_DisableHWAddrCheck:
                                        (0446) _I2CHW_Temp_DisableHWAddrCheck:
                                        (0447)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0448)    M8C_SetBank1
                                        (0449)    and   reg[I2CHW_Temp_ADDR], ~I2CHW_Temp_HW_ADDR_EN
                                        (0450)    M8C_SetBank0
                                        (0451)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0452)    ret
                                        (0453) .ENDSECTION
                                        (0454)  ENDIF
                                        (0455) ENDIF
                                        (0456) 
                                        (0457) ; End of File I2CHW_Temp.asm
FILE: lib\i2chw_tempmstr.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0914: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  FILENAME: I2CHW_TempMSTR.asm
                                        (0004) ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: <UMName> User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHW_TempCommon.inc"
                                        (0025) include "I2CHW_TempMstr.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) 
                                        (0031) export   I2CHW_Temp_fSendRepeatStart
                                        (0032) export  _I2CHW_Temp_fSendRepeatStart
                                        (0033) export   I2CHW_Temp_fSendStart
                                        (0034) export  _I2CHW_Temp_fSendStart
                                        (0035) export   I2CHW_Temp_SendStop
                                        (0036) export  _I2CHW_Temp_SendStop
                                        (0037) ; export the following 3 functions for C-implementations large or small mem models 
                                        (0038) export  _I2CHW_Temp_fReadBytes
                                        (0039) export  _I2CHW_Temp_bWriteBytes
                                        (0040) export  _I2CHW_Temp_bWriteCBytes
                                        (0041) 
                                        (0042) export   I2CHW_Temp_fWrite
                                        (0043) export  _I2CHW_Temp_fWrite
                                        (0044) 
                                        (0045) export   I2CHW_Temp_bRead
                                        (0046) export  _I2CHW_Temp_bRead
                                        (0047) 
                                        (0048) export    I2CHW_Temp_bReadBusStatus
                                        (0049) export   _I2CHW_Temp_bReadBusStatus
                                        (0050) 
                                        (0051) 
                                        (0052) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0053) 
                                        (0054) export   I2CHW_Temp_fReadBytes
                                        (0055) export   I2CHW_Temp_bWriteBytes
                                        (0056) export   I2CHW_Temp_bWriteCBytes
                                        (0057) 
                                        (0058) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (0059) 
                                        (0060) ;-------------------------------------------------------------------
                                        (0061) ;  Declare the varables for both the assembler and C compiler.
                                        (0062) ;
                                        (0063) ;-------------------------------------------------------------------
                                        (0064) export  I2CHW_Temp_bStatus
                                        (0065) export _I2CHW_Temp_bStatus
                                        (0066) 
                                        (0067) ;-----------------------------------------------
                                        (0068) ; Variable Allocation
                                        (0069) ;-----------------------------------------------
                                        (0070) area InterruptRAM(RAM, REL, CON)
                                        (0071) 
                                        (0072) _I2CHW_Temp_bStatus:
                                        (0073)  I2CHW_Temp_bStatus:                   blk   1  ; Status during transfers
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) ;-----------------------------------------------
                                        (0077) ;  EQUATES
                                        (0078) ;-----------------------------------------------
                                        (0079) I2CHW_Temp_SLAVE_ACKed:                equ 0x01 ; This bit set if Slave ACKed Master
                                        (0080) I2CHW_Temp_SEND_ACK:                   equ 0x10 ; If this flag set, Master should send ACK
                                        (0081) 
                                        (0082) 
                                        (0083) .SECTION
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;  FUNCTION NAME: I2CHW_Temp_fReadBytes
                                        (0086) ;
                                        (0087) ;  DESCRIPTION:
                                        (0088) ;       Read Multiple bytes from a slave.  Use the ISR to perform operation.
                                        (0089) ;-----------------------------------------------------------------------------
                                        (0090) ;
                                        (0091) ;  ARGUMENTS:
                                        (0092) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0093) ;           to determine if:
                                        (0094) ;             0x01 => Use RepeatStart instead of Start
                                        (0095) ;             0x02 => Don't send Stop
                                        (0096) ;  [SP-6]=> Count of bytes to read.
                                        (0097) ;  [SP-5]=> MSB of Array address to put data in (ignorned for small mem model)
                                        (0098) ;  [SP-4]=> LSB of Array address to put data in 
                                        (0099) ;  [SP-3]=> Address of slave
                                        (0100) ;
                                        (0101) ;  RETURNS:       None
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;          
                                        (0110) ;    Currently only the page pointer registers listed below are modified: 
                                        (0111) ;          CUR_PP
                                        (0112) ;
                                        (0113) ;  THEORY of OPERATION or PROCEDURE:
                                        (0114) ;    I2C and block must be operational.
                                        (0115) ;    This routine will enable the I2C interrupt!
                                        (0116) ;    If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already running this routine will
                                        (0117) ;    pend on the ISR_ACTIVE bit until it can run
                                        (0118) ;
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) IF	(TOOLCHAIN & HITECH)
                                        (0121) RxMode:         set  -7
                                        (0122) RxCnt:          set  -6
                                        (0123) RxArrayHI:      set  -5
                                        (0124) RxArrayLO:      set  -4
                                        (0125) RxSlaveAddr:    set  -3
                                        (0126) ELSE
                                        (0127) RxMode:         equ  -7
                                        (0128) RxCnt:          equ  -6
                                        (0129) RxArrayHI:      equ  -5
                                        (0130) RxArrayLO:      equ  -4
                                        (0131) RxSlaveAddr:    equ  -3
                                        (0132) ENDIF
                                        (0133) 
                                        (0134) _I2CHW_Temp_fReadBytes:			      
                                        (0135)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0136)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0137) 	RAM_SETPAGE_CUR >I2CHW_Temp_RsrcStatus
0917: 4F       MOV   X,SP               (0138) 	mov   X, SP
                                        (0139) I2CMSCR_NotReady1:
0918: 51 05    MOV   A,[0x5]            (0140)     mov    A, [I2CHW_Temp_RsrcStatus]                      ; test to see if previous command started ISR
091A: 47 05 80 TST   [0x5],0x80         (0141)     tst    [I2CHW_Temp_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0142)     ;mov   A, reg[I2CHW_Temp_MSCR]                         ;read the mscr register to look for pending master operations
                                        (0143)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0144)           ;For multi master operations, a pening start or restart
                                        (0145)           ;request might be OK, the master might be waiting to
                                        (0146)           ;acquire the bus from another master
091D: BF FA    JNZ   0x0918             (0147)     jnz   I2CMSCR_NotReady1
091F: 2E 05 80 OR    [0x5],0x80         (0148)     or    [I2CHW_Temp_RsrcStatus], I2CHW_ISR_ACTIVE        ; flag set here and cleared by ISR
                                        (0149)     ;get the address from the parameters on the stack
0922: 52 FD    MOV   A,[X-3]            (0150)     mov   A, [X + RxSlaveAddr]
0924: 64       ASL   A                  (0151)     asl   A                                                ; Shift address to the left to make
                                        (0152)                                                            ; a complete byte with the R/W bit.
0925: 29 01    OR    A,0x1              (0153)     or    A,0x01                                           ; OR the address with the Read bit.
0927: 53 04    MOV   [0x4],A            (0154)     mov   [I2CHW_Temp_SlaveAddr], A                        ; preserve addr+r/w state for the ISR to use
0929: 60 D8    MOV   REG[0xD8],A        (0155)     mov   reg[I2CHW_Temp_DR], A                            ; put the write addr into the I2C_DR reg
092B: 55 03 00 MOV   [0x3],0x0          (0156)     mov   [I2CHW_Temp_bStatus],0x00                        ; Clear all flags
092E: 52 F9    MOV   A,[X-7]            (0157)     mov   A, [X+RxMode]                                    ; place the RxMode in status so ISR can access it
0930: 53 03    MOV   [0x3],A            (0158)     mov   [I2CHW_Temp_bStatus],A
                                        (0159)     ;
                                        (0160)     ;we must now initialize a read buffer using I2CHW_Temp_InitWrite
                                        (0161)     ;
0932: 10       PUSH  X                  (0162)     push   X                                               ;preserve since it's used later
0933: 52 FA    MOV   A,[X-6]            (0163)     mov    A, [X+RxCnt]                                    ;get the write buf size
0935: 08       PUSH  A                  (0164)     push   A
0936: 52 FB    MOV   A,[X-5]            (0165)     mov    A, [X+RxArrayHI]                                ;get the write addrHI
0938: 08       PUSH  A                  (0166)     push   A										   
0939: 52 FC    MOV   A,[X-4]            (0167)     mov    A, [X+RxArrayLO]							                         ;get the write addrLO
093B: 08       PUSH  A                  (0168)     push   A                                               ;this will be ignored
093C: 93 0C    CALL  _I2CHW_Temp_InitWrite(0169)     call  I2CHW_Temp_InitWrite                             ;sets the addr and byte count to write to
093E: 38 FD    ADD   SP,0xFD            (0170)     add    SP, -3
0940: 20       POP   X                  (0171)     pop    X                                               ;restore X to be used for the rest of this routine
                                        (0172)     
0941: 51 04    MOV   A,[0x4]            (0173)     mov   A,[I2CHW_Temp_SlaveAddr]
0943: 48 F9 01 TST   [X-7],0x1          (0174)     tst   [x+RxMode],I2CHW_Temp_RepStart
0946: B0 0A    JNZ   0x0951             (0175)     jnz   DoRestartRx
0948: 49 D7 01 TST   REG[0xD7],0x1      (0176)     tst   reg[I2CHW_Temp_SCR], I2C_BYTE_COMPL              ; indicates the I2C bus is stalled
094B: B0 05    JNZ   0x0951             (0177)     jnz   DoRestartRx
094D: 91 2E    CALL  0x0A7D             (0178)     call  I2C_DoStart                                      ; Send a start and address.
094F: 80 03    JMP   0x0953             (0179)     jmp   CheckRxAck
                                        (0180) DoRestartRx:
0951: 90 93    CALL  0x09E6             (0181)     call  I2CHW_Temp_DoBufferRepeatStart                           ; Send a repeat start and address.
0953: 70 3F    AND   F,0x3F             
0955: 71 C0    OR    F,0xC0             
                                        (0182)         ;note that REPEATSTART can only be used if this master currently has control of the bus and is at the end
                                        (0183)         ; of or ending the current data transmission/reception.  This also requres that the software (this UM)
                                        (0184)         ; as a whole be able to detect that a stop has not been sent previously in this transmission.
                                        (0185) 
                                        (0186) CheckRxAck:                                                ; Test to see if Slave ACKed
                                        (0187)         ;nothing to do here, a start and address are being transmitted, wait for the ISR to pick up, when it
                                        (0188)         ;is finished.
                                        (0189) End_RD:
                                        (0190)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0191)     RAM_EPILOGUE RAM_USE_CLASS_4
0957: 7F       RET                      (0192)     ret
0958: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0193) 
                                        (0194) .ENDSECTION
                                        (0195) 
                                        (0196) .SECTION
                                        (0197) ;-----------------------------------------------------------------------------
                                        (0198) ;  FUNCTION NAME: I2CHW_Temp_bWriteBytes
                                        (0199) ;
                                        (0200) ;  DESCRIPTION:
                                        (0201) ;    Write multiple data bits to slave device.
                                        (0202) ;
                                        (0203) ;-----------------------------------------------------------------------------
                                        (0204) ;
                                        (0205) ;  ARGUMENTS:
                                        (0206) ; [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0207) ;          to determine if:
                                        (0208) ;              0x01 => Use RePeatStart instead of Start
                                        (0209) ;              0x02 => Don't send Stop
                                        (0210) ; [SP-6]=> Count of bytes to write.
                                        (0211) ; [SP-5]=> MSB of Array address to put data in (ignored small mem model).
                                        (0212) ; [SP-4]=> LSB of Array address to put data in.
                                        (0213) ; [SP-3]=> Address of slave
                                        (0214) ;
                                        (0215) ;
                                        (0216) ;  RETURNS:     None
                                        (0217) ;
                                        (0218) ;  SIDE EFFECTS:
                                        (0219) ;    The A and X registers may be modified by this or future implementations
                                        (0220) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0221) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0222) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0223) ;    functions.
                                        (0224) ;          
                                        (0225) ;    Currently only the page pointer registers listed below are modified: 
                                        (0226) ;          CUR_PP
                                        (0227) ;
                                        (0228) ;  THEORY of OPERATION or PROCEDURE:
                                        (0229) ;
                                        (0230) ;-----------------------------------------------------------------------------
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232) TxMode:       set  -7
                                        (0233) TxByteCount:  set  -6
                                        (0234) TxArrayHI:    set  -5
                                        (0235) TxArrayLO:    set  -4
                                        (0236) TxSlaveAddr:  set  -3
                                        (0237) ELSE
                                        (0238) TxMode:       equ  -7
                                        (0239) TxByteCount:  equ  -6
                                        (0240) TxArrayHI:    equ  -5
                                        (0241) TxArrayLO:    equ  -4
                                        (0242) TxSlaveAddr:  equ  -3
                                        (0243) ENDIF
                                        (0244) 
                                        (0245) _I2CHW_Temp_bWriteBytes:
                                        (0246)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0247)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0248) 	RAM_SETPAGE_CUR >I2CHW_Temp_RsrcStatus
                                        (0249) 
095B: 4F       MOV   X,SP               (0250) 	mov   X, SP
                                        (0251) I2CMSCR_NotReady2:
095C: 51 05    MOV   A,[0x5]            (0252)     mov    A, [I2CHW_Temp_RsrcStatus]                      ; test to see if previous command started ISR
095E: 47 05 80 TST   [0x5],0x80         (0253)     tst    [I2CHW_Temp_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0254)     ;mov   A, reg[I2CHW_Temp_MSCR]                         ;read the mscr register to look for pending master operations
                                        (0255)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0256)           ;For multi master operations, a pening start or restart
                                        (0257)           ;request might be OK, the master might be waiting to
                                        (0258)           ;acquire the bus from another master
0961: BF FA    JNZ   0x095C             (0259)     jnz   I2CMSCR_NotReady2
0963: 2E 05 80 OR    [0x5],0x80         (0260)     or    [I2CHW_Temp_RsrcStatus], I2CHW_ISR_ACTIVE        ; flag set here and cleared at end of ISR
0966: 52 FD    MOV   A,[X-3]            (0261)     mov   A, [X + TxSlaveAddr]
0968: 64       ASL   A                  (0262)     asl   A                                                ; Shift address to the left to make
                                        (0263)                                                            ; a complete byte with the R/W bit.
                                        (0264)                                                            ; The ASL takes care of clearing bit 0.
0969: 55 03 00 MOV   [0x3],0x0          (0265)     mov   [I2CHW_Temp_bStatus],0x00                        ; Clear all flags
096C: 53 04    MOV   [0x4],A            (0266)     mov   [I2CHW_Temp_SlaveAddr], A                        ; preserve addr+r/w state for the ISR to use
096E: 60 D8    MOV   REG[0xD8],A        (0267)     mov   reg[I2CHW_Temp_DR], A                            ; put the write addr into the I2C_DR reg
0970: 52 F9    MOV   A,[X-7]            (0268)     mov   A, [X+TxMode]                                    ; place the TxMode in status so ISR can access it
0972: 53 03    MOV   [0x3],A            (0269)     mov   [I2CHW_Temp_bStatus],A
                                        (0270)     ;
                                        (0271)     ;we must now initialize a read buffer using I2CHW_Temp_InitWrite
                                        (0272)     ;
0974: 10       PUSH  X                  (0273)         push   X                                                ;preserve since it's used later
0975: 77 FA    INC   [X-6]              (0274)         inc    [X+TxByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (0275) 
0977: 52 FA    MOV   A,[X-6]            (0276)         mov    A, [X+TxByteCount]                               ;get the write buf size
0979: 08       PUSH  A                  (0277)         push   A
097A: 52 FB    MOV   A,[X-5]            (0278)         mov    A, [X+TxArrayHI]                                 ;get the write buf addr
097C: 08       PUSH  A                  (0279)         push   A                                                                                            ;this will be ignored
097D: 52 FC    MOV   A,[X-4]            (0280)         mov    A, [X+TxArrayLO]                                 ;get the write buf addr
097F: 08       PUSH  A                  (0281)         push   A
0980: 93 06    CALL  _I2CHW_Temp_InitRamRead(0282)         call  I2CHW_Temp_InitRamRead                       ;sets the addr and byte count to write to
0982: 38 FD    ADD   SP,0xFD            (0283)         add SP, -3
0984: 20       POP   X                  (0284)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (0285)     ;and  [I2CHW_Temp_RsrcStatus],~I2C_READFLASH           ;shouldn't be needed should have been taken care of in InitRamRead routine
                                        (0286) 
                                        (0287) 
0985: 51 04    MOV   A,[0x4]            (0288)     mov   A,[I2CHW_Temp_SlaveAddr]
0987: 48 F9 01 TST   [X-7],0x1          (0289)     tst   [x+TxMode],I2CHW_Temp_RepStart
098A: B0 0A    JNZ   0x0995             (0290)     jnz   DoRestartTx
098C: 49 D7 01 TST   REG[0xD7],0x1      (0291)     tst   reg[I2CHW_Temp_SCR], I2C_BYTE_COMPL              ; indicates the I2C bus is stalled
098F: BF C1    JNZ   0x0951             (0292)     jnz   DoRestartRx
0991: 90 EA    CALL  0x0A7D             (0293)     call  I2C_DoStart                                      ; Send a start and address.
0993: 80 03    JMP   0x0997             (0294)     jmp   DoTxAck
                                        (0295) DoRestartTx:
0995: 90 4F    CALL  0x09E6             (0296)     call  I2CHW_Temp_DoBufferRepeatStart                           ; Send a repeat start and address.
0997: 70 3F    AND   F,0x3F             
0999: 71 C0    OR    F,0xC0             
                                        (0297) DoTxAck:
                                        (0298) 
                                        (0299) 
                                        (0300) WriteSlaveAck:
                                        (0301)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0302) 	RAM_EPILOGUE RAM_USE_CLASS_4
099B: 7F       RET                      (0303)     ret
099C: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0304) 
                                        (0305) .ENDSECTION
                                        (0306) 
                                        (0307) .SECTION
                                        (0308) ;-----------------------------------------------------------------------------
                                        (0309) ;  FUNCTION NAME: I2CHW_Temp_bWriteCBytes
                                        (0310) ;
                                        (0311) ;  DESCRIPTION:
                                        (0312) ;    Write multiple data bits to slave device from ROM
                                        (0313) ;
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;
                                        (0316) ;  ARGUMENTS:
                                        (0317) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0318) ;            to determine if:
                                        (0319) ;               0x01 => Use RepeatStart instead of Start
                                        (0320) ;               0x02 => Don't send Stop
                                        (0321) ;  [SP-6]=> Count of bytes to write.
                                        (0322) ;  [SP-5]=> MSB of ROM Array address to get data from
                                        (0323) ;  [SP-4]=> LSB of ROM Array address to get data from.
                                        (0324) ;  [SP-3]=> Address of slave
                                        (0325) ;
                                        (0326) ;  RETURNS:
                                        (0327) ;    None
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;
                                        (0339) ;  THEORY of OPERATION or PROCEDURE:
                                        (0340) ;
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) IF	(TOOLCHAIN & HITECH)
                                        (0343) TxCMode:       set  -7
                                        (0344) TxCByteCount:  set  -6
                                        (0345) TxCArrayMSB:   set  -5
                                        (0346) TxCArrayLSB:   set  -4
                                        (0347) ;TxSlaveAddr:  set  -3	  ;defined above this line if for reference only
                                        (0348) ELSE
                                        (0349) TxCMode:       equ  -7
                                        (0350) TxCByteCount:  equ  -6
                                        (0351) TxCArrayMSB:   equ  -5
                                        (0352) TxCArrayLSB:   equ  -4
                                        (0353) ;TxSlaveAddr:  equ  -3	  ;defined above this line if for reference only
                                        (0354) ENDIF
                                        (0355) 
                                        (0356) _I2CHW_Temp_bWriteCBytes:
                                        (0357)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0358) 	RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0359) 	RAM_SETPAGE_CUR >I2CHW_Temp_RsrcStatus
099F: 4F       MOV   X,SP               (0360) 	mov   X, SP
                                        (0361) I2CMSCR_NotReady3:
09A0: 51 05    MOV   A,[0x5]            (0362)         mov    A, [I2CHW_Temp_RsrcStatus]                  ; test to see if previous command started ISR
09A2: 47 05 80 TST   [0x5],0x80         (0363)         tst    [I2CHW_Temp_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0364)     ;mov   A, reg[I2CHW_Temp_MSCR]                         ;read the mscr register to look for pending master operations
                                        (0365)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0366)           ;For multi master operations, a pening start or restart
                                        (0367)           ;request might be OK, the master might be waiting to
                                        (0368)           ;acquire the bus from another master
09A5: BF FA    JNZ   0x09A0             (0369)         jnz   I2CMSCR_NotReady3
09A7: 2E 05 80 OR    [0x5],0x80         (0370)         or    [I2CHW_Temp_RsrcStatus], I2CHW_ISR_ACTIVE    ;lag set here but cleared in ISRf
09AA: 52 FD    MOV   A,[X-3]            (0371)     mov   A, [X + TxSlaveAddr]
09AC: 64       ASL   A                  (0372)     asl   A                                                ; Shift address to the left to make
                                        (0373)                                                            ; a complete byte with the R/W bit.
                                        (0374)                                                            ; The ASL takes care of clearing bit 0.
09AD: 55 03 00 MOV   [0x3],0x0          (0375)     mov   [I2CHW_Temp_bStatus],0x00                        ; Clear all flags
09B0: 53 04    MOV   [0x4],A            (0376)     mov   [I2CHW_Temp_SlaveAddr], A                        ; preserve addr+r/w state for the ISR to use
09B2: 60 D8    MOV   REG[0xD8],A        (0377)     mov   reg[I2CHW_Temp_DR], A                            ; put the write addr into the I2C_DR reg
09B4: 52 F9    MOV   A,[X-7]            (0378)     mov   A, [X+TxCMode]                                                             ; place the RxMode in status so ISR can access it
09B6: 53 03    MOV   [0x3],A            (0379)     mov   [I2CHW_Temp_bStatus],A
                                        (0380)     ;
                                        (0381)         ;we must now initialize a read buffer using I2CHW_Temp_InitWrite
                                        (0382)         ;
09B8: 10       PUSH  X                  (0383)         push   X                                                ;preserve X since it's used later
                                        (0384) 
09B9: 50 00    MOV   A,0x0              (0385)          mov    A, 0                                             ;get the write buf size (this is the hi order part)
09BB: 77 FA    INC   [X-6]              (0386)         inc    [X+TxCByteCount]                                 ;increase this by one since the init routine will decrement it by 1
09BD: D0 02    JNC   0x09C0             (0387)         jnc    . + 3                                           ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
09BF: 74       INC   A                  (0388)         inc    A                                                                                        ;if the low order part of the count happened to roll to 0x00, inc the hi part
09C0: 08       PUSH  A                  (0389)         push   A
09C1: 52 FA    MOV   A,[X-6]            (0390)         mov    A, [X+TxCByteCount]                              ;initFlasRead needs a 2 byte count this is the low ord byte
09C3: 08       PUSH  A                  (0391)         push   A
09C4: 52 FB    MOV   A,[X-5]            (0392)         mov    A, [X+TxCArrayMSB]                               ;get the write buf addr
09C6: 08       PUSH  A                  (0393)         push   A                                                                                        ;this will be ignored
09C7: 52 FC    MOV   A,[X-4]            (0394)         mov    A, [X+TxCArrayLSB]                               ;get the write buf addr
09C9: 08       PUSH  A                  (0395)         push   A
                                        (0396) 
09CA: 92 E9    CALL  _I2CHW_Temp_InitFlashRead(0397)         call  I2CHW_Temp_InitFlashRead                     ;sets the addr and byte count to write to
09CC: 38 FC    ADD   SP,0xFC            (0398)         add SP, -4
09CE: 20       POP   X                  (0399)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (0400) 
                                        (0401)     ;or  [I2CHW_Temp_RsrcStatus],I2C_READFLASH
09CF: 51 04    MOV   A,[0x4]            (0402)     mov   A,[I2CHW_Temp_SlaveAddr]
09D1: 48 F9 01 TST   [X-7],0x1          (0403)     tst   [x+TxMode],I2CHW_Temp_RepStart                   ; Check if a Start or RepeatStart
09D4: B0 0A    JNZ   0x09DF             (0404)     jnz   DoCRestartTx                                     ; should executed.
09D6: 49 D7 01 TST   REG[0xD7],0x1      (0405)     tst   reg[I2CHW_Temp_SCR], I2C_BYTE_COMPL              ; indicates the I2C bus is stalled
09D9: BF 77    JNZ   0x0951             (0406)     jnz   DoRestartRx
09DB: 90 A0    CALL  0x0A7D             (0407)     call  I2C_DoStart                                      ; Send a start and address.
09DD: 80 03    JMP   0x09E1             (0408)     jmp   DoCTxAck
                                        (0409) DoCRestartTx:
09DF: 90 05    CALL  0x09E6             (0410)     call  I2CHW_Temp_DoBufferRepeatStart                           ; Send a repeat start and address.
09E1: 70 3F    AND   F,0x3F             
09E3: 71 C0    OR    F,0xC0             
                                        (0411) 
                                        (0412) DoCTxAck:                                                  ; Test to see if Slave is ACKed
                                        (0413) 
                                        (0414) CWriteSlaveAck:
                                        (0415)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0416)     RAM_EPILOGUE RAM_USE_CLASS_4
09E5: 7F       RET                      (0417)     ret
09E6: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0418) 
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: I2CHW_Temp_DoBufferRepeatStart
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;    Send repeated start condition and send slave address for buffered transfers.
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     This routine is called internally only.  It is not exported or intended as an API
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;    None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS:
                                        (0437) ;    The A and X registers may be modified by this or future implementations
                                        (0438) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0439) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0440) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0441) ;    functions.
                                        (0442) ;          
                                        (0443) ;  THEORY of OPERATION or PROCEDURE:
                                        (0444) ;    This is similar to the I2C_DoRepeatStart entry point but this function does not
                                        (0445) ;    wait for the byte_complete flag.  That is this is not polled and is therefore compatible
                                        (0446) ;    with the buffered read and write functions (above).
                                        (0447) ;
                                        (0448) ;-----------------------------------------------------------------------------
                                        (0449) 
                                        (0450) I2CHW_Temp_DoBufferRepeatStart:
                                        (0451)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0452) 	RAM_SETPAGE_CUR >I2CHW_Temp_SlaveAddr
                                        (0453)     ;here the path through the routine is dependent on the previous transmission.
                                        (0454)         ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
                                        (0455)         ; I2C interrupt
                                        (0456)         ; 2a. the master must NAK the byte if he is reading from the slave.
                                        (0457)         ; We do have to look at the status of the I2C block to see what is going on because if there was a
                                        (0458)         ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
                                        (0459)         ; by setting the master restart bit and clearing to I2C_SCR (I2C_TX)
                                        (0460)         ; 2b. if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
                                        (0461)         ; I2C_SCR reg.  (same as if we were writing to slave).
                                        (0462)         ; 3. once the ISR starts it will figure out which direction we are going with data (sending/receiving)
                                        (0463)         ;
09E9: 60 D8    MOV   REG[0xD8],A        (0464)     mov   reg[I2CHW_Temp_DR], A
09EB: 53 04    MOV   [0x4],A            (0465)         mov   [I2CHW_Temp_SlaveAddr], A
                                        (0466)         ;tst      reg[I2CHW_Temp_MSCR], I2CM_MASTEROP         ;do we even have control of the bus?
                                        (0467)         ;jz    notBusMasterErr
09ED: 5D D9    MOV   A,REG[0xD9]        (0468)     mov   A, reg[I2CHW_Temp_MSCR]                          ;read the mscr register to look for pending master operations
09EF: 21 0F    AND   A,0xF              (0469)     and   A, 0x0f                                          ;only look at the lower bits
09F1: A0 11    JZ    0x0A03             (0470)         jz    BusIdleSendStart
09F3: 62 D9 02 MOV   REG[0xD9],0x2      
                                        (0471)         ; for a single master system this should not be an issue,
                                        (0472)         ; so we'll go ahead and request the restart.  If a stop condition was already generated
                                        (0473)         ; the state machine will automatically generate a start instead.
                                        (0474) 
                                        (0475)         ;SetI2CHW_Temp_SCR I2CM_RESTRT
                                        (0476)     ;mov   reg[I2CHW_Temp_MSCR], I2CM_RESTRT
                                        (0477)         ;SetI2CHW_Temp_SCR          I2C_TX                                ;even though the restart has been requested the state
                                        (0478)         ;mov      reg[I2CHW_Temp_SCR], I2C_TX              ;even though the restart has been requested the state
                                        (0479) 
                                        (0480) ;IF I2CHW_Temp_THROTTLE_CLK_RATE
                                        (0481)         SetI2CHW_Temp_MSCR I2CM_RESTRT
                                        (0482) ;ELSE
                                        (0483) ;    mov   reg[I2CHW_Temp_MSCR], I2CM_RESTRT
                                        (0484) ;ENDIF
09F6: 49 D7 04 TST   REG[0xD7],0x4      (0485)     tst   reg[I2CHW_Temp_SCR], I2C_TX
09F9: B0 05    JNZ   0x09FF             (0486)     jnz   I2C_RestartRecieve
09FB: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0487) 
                                        (0488) ;IF I2CHW_Temp_THROTTLE_CLK_RATE
                                        (0489)     SetI2CHW_Temp_SCR I2C_TX                               ;even though the restart has been requested the state
                                        (0490) ;ELSE
                                        (0491) ;    mov   reg[I2CHW_Temp_SCR], I2C_TX                     ;send Ack
                                        (0492) ;ENDIF
                                        (0493) 
                                        (0494)     RAM_EPILOGUE RAM_USE_CLASS_4
09FE: 7F       RET                      (0495)     ret
09FF: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0496) I2C_RestartRecieve:
                                        (0497) 
                                        (0498) ;IF I2CHW_Temp_THROTTLE_CLK_RATE
                                        (0499)     SetI2CHW_Temp_SCR 0                                    ;even though the restart has been requested the state
                                        (0500) ;ELSE
                                        (0501) ;    mov   reg[I2CHW_Temp_SCR], 0                          ;send Ack
                                        (0502) ;ENDIF
                                        (0503) 
                                        (0504)    RAM_EPILOGUE RAM_USE_CLASS_4
0A02: 7F       RET                      (0505)    ret
                                        (0506) 
                                        (0507) BusIdleSendStart:
0A03: 51 04    MOV   A,[0x4]            (0508)    mov    A, [I2CHW_Temp_SlaveAddr]
0A05: 90 76    CALL  0x0A7D             (0509)    call   I2C_DoStart
                                        (0510)    ;Since something appears to be messed up do the next best thing to a repeat start, send a start.
                                        (0511)    RAM_EPILOGUE RAM_USE_CLASS_4
0A07: 7F       RET                      (0512)    ret
0A08: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0513) 
                                        (0514) .ENDSECTION
                                        (0515) 
                                        (0516) .SECTION
                                        (0517) 
                                        (0518) ;-----------------------------------------------------------------------------
                                        (0519) ;  FUNCTION NAME: I2CHW_Temp_fSendRepeatStart
                                        (0520) ;
                                        (0521) ;  DESCRIPTION:
                                        (0522) ;    Send repeated start condition and send slave address.
                                        (0523) ;
                                        (0524) ;-----------------------------------------------------------------------------
                                        (0525) ;
                                        (0526) ;  ARGUMENTS:
                                        (0527) ;    I2CHW_Temp_bAddr - Contains the slave address and transfer direction.
                                        (0528) ;
                                        (0529) ;  RETURNS:
                                        (0530) ;    I2CHW_Temp_bSTatus - nonZero if a slave responds to a request. Zero otherwise
                                        (0531) ;    Acc register contains non zero value for success (contents of the i2C_SCR reg)  0 indicates failure
                                        (0532) ;    Returns a zero if the repeat start results in a NAK by an addressed device.
                                        (0533) ;
                                        (0534) ;  SIDE EFFECTS:
                                        (0535) ;    The A and X registers may be modified by this or future implementations
                                        (0536) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0537) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0538) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0539) ;    functions.
                                        (0540) ;          
                                        (0541) ;    Currently only the page pointer registers listed below are modified: 
                                        (0542) ;          CUR_PP
                                        (0543) ;
                                        (0544) ;  THEORY of OPERATION or PROCEDURE:
                                        (0545) ;    Prepare to send start by setting SCl and SDA high.
                                        (0546) ;    must be followed directly by I2CHW_Temp_start.
                                        (0547) ;
                                        (0548) ;-----------------------------------------------------------------------------
                                        (0549)  I2CHW_Temp_fSendRepeatStart:
                                        (0550) _I2CHW_Temp_fSendRepeatStart:
                                        (0551)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0552) 	RAM_SETPAGE_CUR >I2CHW_Temp_bStatus
                                        (0553)     ;wait if the bus is already busy...
0A0B: 08       PUSH  A                  (0554)     push  A
0A0C: 55 03 00 MOV   [0x3],0x0          (0555)     mov   [I2CHW_Temp_bStatus], 0x00
                                        (0556) I2CMSCR_NotReady4:
0A0F: 51 05    MOV   A,[0x5]            (0557)     mov    A, [I2CHW_Temp_RsrcStatus]                      ; test to see if previous command started ISR
0A11: 47 05 80 TST   [0x5],0x80         (0558)     tst    [I2CHW_Temp_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0559)     ;mov   A, reg[I2CHW_Temp_MSCR]                         ;read the mscr register to look for pending master operations
                                        (0560)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0561)           ;For multi master operations, a pening start or restart
                                        (0562)           ;request might be OK, the master might be waiting to
                                        (0563)           ;acquire the bus from another master
0A14: BF FA    JNZ   0x0A0F             (0564)     jnz   I2CMSCR_NotReady4
0A16: 18       POP   A                  (0565)     pop   A
                                        (0566) 
                                        (0567) 
0A17: 64       ASL   A                  (0568)     asl   a                                                ; Shift address to the left
0A18: 79       DEC   X                  (0569)     dec   x                                                ; If zero, C flag will be set
0A19: C0 03    JC    0x0A1D             (0570)     jc    I2C_DoRepeatStart                                ; Do a write if zero
0A1B: 29 01    OR    A,0x1              (0571)     or    a,0x01                                           ; Set Read flag
                                        (0572) 
                                        (0573) I2C_DoRepeatStart:
                                        (0574)     ;here the path through the routine is dependent on the previous transmission.
                                        (0575)         ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
                                        (0576)         ; I2C interrupt
                                        (0577)         ; 2. the master must NAK the byte if he is reading from the slave.
                                        (0578)         ; We don't have to look at the status of the I2C block to see what is going on because if there was a
                                        (0579)         ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
                                        (0580)         ; by setting the master restart bit and writing to I2C_SCR (I2C_TX)
                                        (0581)         ; if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
                                        (0582)         ; I2C_SCR reg.  (same as if we were writing to slave).
                                        (0583)         ;
0A1D: 60 D8    MOV   REG[0xD8],A        (0584)     mov   reg[I2CHW_Temp_DR], A
0A1F: 53 04    MOV   [0x4],A            (0585)     mov   [I2CHW_Temp_SlaveAddr], A
0A21: 49 D9 04 TST   REG[0xD9],0x4      (0586)     tst       reg[I2CHW_Temp_MSCR], I2CM_MASTEROP          ;do we even have control of the bus?
0A24: A0 1C    JZ    0x0A41             (0587)     jz    notBusMaster1
0A26: 62 D9 02 MOV   REG[0xD9],0x2      
0A29: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0588)     ;SetI2CHW_Temp_MSCR  I2CM_RESTRT
                                        (0589)     ;mov   reg[I2CHW_Temp_MSCR], I2CM_RESTRT
                                        (0590)     ;SetI2CHW_Temp_SCR         I2C_TX                         ;even though the restart has been requested the state
                                        (0591)     ;mov      reg[I2CHW_Temp_SCR], I2C_TX                  ;even though the restart has been requested the state
                                        (0592)                                                                 ; machine is stalling the SCL and has to be 'released'
                                        (0593) ;IF I2CHW_Temp_THROTTLE_CLK_RATE
                                        (0594)     SetI2CHW_Temp_MSCR I2CM_RESTRT
                                        (0595)     SetI2CHW_Temp_SCR  0                                   ;getting a restart out requires a 0 into the SCR reg
                                        (0596) ;ELSE
                                        (0597) ;    mov   reg[I2CHW_Temp_MSCR], I2CM_RESTRT
                                        (0598) ;    mov   reg[I2CHW_Temp_SCR], 0                          ;getting a restart out requires a 0 into the SCR reg
                                        (0599) ;ENDIF
                                        (0600) 
                                        (0601) WaitRepStrtCompl:
0A2C: 5D D7    MOV   A,REG[0xD7]        (0602)     mov   A,  reg[I2CHW_Temp_SCR]
0A2E: 49 D7 01 TST   REG[0xD7],0x1      (0603)     tst   reg[I2CHW_Temp_SCR],I2C_BYTE_COMPL               ; Test to see if Slave ACKed
0A31: AF FA    JZ    0x0A2C             (0604)     jz    WaitRepStrtCompl
0A33: 49 D7 02 TST   REG[0xD7],0x2      (0605)     tst   reg[I2CHW_Temp_SCR], I2C_LST_BIT
0A36: B0 07    JNZ   0x0A3E             (0606)     jnz   Err_Exit_RepStart
0A38: 55 03 01 MOV   [0x3],0x1          (0607)     mov   [I2CHW_Temp_bStatus], 0x01
0A3B: 50 01    MOV   A,0x1              (0608)     mov   A, 01
                                        (0609)     RAM_EPILOGUE RAM_USE_CLASS_4
0A3D: 7F       RET                      (0610)     ret
                                        (0611) 
                                        (0612) Err_Exit_RepStart:
0A3E: 50 00    MOV   A,0x0              (0613)     mov   A, 0
                                        (0614)     RAM_EPILOGUE RAM_USE_CLASS_4
0A40: 7F       RET                      (0615)     ret
                                        (0616) 
                                        (0617)  notBusMaster1:
                                        (0618)     ;SetI2CHW_Temp_MSCR 0
                                        (0619)     ;mov reg[I2CHW_Temp_MSCR], 0                           ;we certainly cant restart if we've not Master
                                        (0620)     ;WHAT else should be done for this case?  Some sort of improper operation is being attempted.
0A41: 50 00    MOV   A,0x0              (0621)     mov   A, 0
                                        (0622)     RAM_EPILOGUE RAM_USE_CLASS_4
0A43: 7F       RET                      (0623)     ret
0A44: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0624) 
                                        (0625) .ENDSECTION
                                        (0626) 
                                        (0627) .SECTION
                                        (0628) ;-----------------------------------------------------------------------------
                                        (0629) ;  FUNCTION NAME: I2CHW_Temp_fSendStart
                                        (0630) ;
                                        (0631) ;  DESCRIPTION:
                                        (0632) ;    Generates start condition and sends slave address.
                                        (0633) ;
                                        (0634) ;-----------------------------------------------------------------------------
                                        (0635) ;
                                        (0636) ;  ARGUMENTS:
                                        (0637) ;    A => Contains the slave address.
                                        (0638) ;
                                        (0639) ;  RETURNS:
                                        (0640) ;    I2CHW_Temp_bSTatus - nonZero if a slave responds to a request. Zero otherwise
                                        (0641) ;    Acc register contains non zero value for success (contents of the i2C_SCR reg)  0 indicates failure
                                        (0642) ;    Returns a zero if the repeat start results in a NAK by an addressed device.
                                        (0643) ;
                                        (0644) ;  SIDE EFFECTS:
                                        (0645) ;    The A and X registers may be modified by this or future implementations
                                        (0646) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0647) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0648) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0649) ;    functions.
                                        (0650) ;          
                                        (0651) ;    Currently only the page pointer registers listed below are modified: 
                                        (0652) ;          CUR_PP
                                        (0653) ;
                                        (0654) ;  THEORY of OPERATION or PROCEDURE:
                                        (0655) ;   Send start by setting SDA low while SCL is high. Set
                                        (0656) ;   SCL low in preparation to send address. 
                                        (0657) ;   Sends address, waits for byte complete
                                        (0658) ;   An address must be followed by a read or write of data if it was acked by a slave
                                        (0659) ;
                                        (0660) ;  WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0661) ;   flag is set to return.
                                        (0662) ;
                                        (0663) ;
                                        (0664) ;-----------------------------------------------------------------------------
                                        (0665)  I2CHW_Temp_fSendStart:
                                        (0666) _I2CHW_Temp_fSendStart:
                                        (0667)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0668) 	RAM_SETPAGE_CUR >I2CHW_Temp_bStatus 
                                        (0669)     ;wait if the bus is already busy...
0A47: 08       PUSH  A                  (0670)     push  A
0A48: 55 03 00 MOV   [0x3],0x0          (0671)     mov   [I2CHW_Temp_bStatus], 0x00
                                        (0672) I2CMSCR_NotReady5:
0A4B: 51 05    MOV   A,[0x5]            (0673)     mov    A, [I2CHW_Temp_RsrcStatus]                      ; test to see if previous command started ISR
0A4D: 47 05 80 TST   [0x5],0x80         (0674)     tst    [I2CHW_Temp_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0675)     ;mov   A, reg[I2CHW_Temp_MSCR]                         ;read the mscr register to look for pending master operations
                                        (0676)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0677)           ;For multi master operations, a pening start or restart
                                        (0678)           ;request might be OK, the master might be waiting to
                                        (0679)           ;acquire the bus from another master
0A50: BF FA    JNZ   0x0A4B             (0680)     jnz   I2CMSCR_NotReady5
0A52: 18       POP   A                  (0681)     pop   A
0A53: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0682) 
                                        (0683) 
                                        (0684)     ; disable the interrupt
                                        (0685)         ; *** NOT REENABLED ***
                                        (0686)         ;
                                        (0687)     M8C_DisableIntMask I2CHW_Temp_INT_REG, I2CHW_Temp_INT_MASK
0A56: 49 D7 01 TST   REG[0xD7],0x1      (0688)     tst   reg[I2CHW_Temp_SCR],I2C_BYTE_COMPL               ;If there is a pending BYTE_COMPL here
                                        (0689)                                                                 ;it is highly probable that a start is not the
                                        (0690)                                                                                                                     ;correct thing to do.
                                        (0691)                                                                                                                     ;leaving
0A59: B0 20    JNZ   0x0A7A             (0692)     jnz   Err_Exit_Start
                                        (0693) 
0A5B: 64       ASL   A                  (0694)     asl   a                                                ; Shift address to the left
0A5C: 79       DEC   X                  (0695)     dec   x                                                ; If zero, C flag will be set
0A5D: C0 03    JC    0x0A61             (0696)     jc    I2C_SndWRStart                                   ; Do a write if zero
0A5F: 29 01    OR    A,0x1              (0697)     or    a,0x01                                           ; Set Read flag
                                        (0698) I2C_SndWRStart:
0A61: 60 D8    MOV   REG[0xD8],A        (0699)     mov   reg[I2CHW_Temp_DR], A
0A63: 53 04    MOV   [0x4],A            (0700)     mov   [I2CHW_Temp_SlaveAddr], A
0A65: 62 D9 01 MOV   REG[0xD9],0x1      
                                        (0701)     ;SetI2CHW_Temp_MSCR, I2CM_SNDSTRT
                                        (0702)     ;mov   reg[I2CHW_Temp_MSCR], I2CM_SNDSTRT
                                        (0703) 
                                        (0704) ;IF I2CHW_Temp_THROTTLE_CLK_RATE
                                        (0705)     SetI2CHW_Temp_MSCR I2CM_SNDSTRT
                                        (0706) ;ELSE
                                        (0707) ;    mov   reg[I2CHW_Temp_MSCR], I2CM_SNDSTRT
                                        (0708) ;ENDIF
                                        (0709) 
                                        (0710) 
                                        (0711) WaitStrtByteCompl:
0A68: 5D D7    MOV   A,REG[0xD7]        (0712)     mov   A,  reg[I2CHW_Temp_SCR]
0A6A: 49 D7 01 TST   REG[0xD7],0x1      (0713)     tst   reg[I2CHW_Temp_SCR],I2C_BYTE_COMPL               ; Test to see if Slave ACKed
0A6D: AF FA    JZ    0x0A68             (0714)     jz    WaitStrtByteCompl
0A6F: 49 D7 02 TST   REG[0xD7],0x2      (0715)     tst   reg[I2CHW_Temp_SCR], I2C_LST_BIT
0A72: B0 07    JNZ   0x0A7A             (0716)     jnz   Err_Exit_Start
0A74: 55 03 01 MOV   [0x3],0x1          (0717)     mov   [I2CHW_Temp_bStatus], 0x01
0A77: 50 01    MOV   A,0x1              (0718)     mov   A, 01
                                        (0719)     RAM_EPILOGUE RAM_USE_CLASS_4
0A79: 7F       RET                      (0720)     ret
                                        (0721) Err_Exit_Start:
0A7A: 50 00    MOV   A,0x0              (0722)     mov   A, 0
                                        (0723)     RAM_EPILOGUE RAM_USE_CLASS_4
0A7C: 7F       RET                      (0724)     ret
0A7D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0725) 
                                        (0726) I2C_DoStart:
                                        (0727)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0728)     RAM_SETPAGE_CUR >I2CHW_Temp_SlaveAddr
                                        (0729)     ;here we are not required to test for master operation since we are only attempting to gain control of the bus
                                        (0730)     ; by attempting to assert a Start
                                        (0731)     
0A80: 60 D8    MOV   REG[0xD8],A        (0732)     mov   reg[I2CHW_Temp_DR], A
0A82: 53 04    MOV   [0x4],A            (0733)     mov   [I2CHW_Temp_SlaveAddr], A
0A84: 62 D9 01 MOV   REG[0xD9],0x1      
                                        (0734)     ;SetI2CHW_Temp_MSCR  I2CM_SNDSTRT
                                        (0735)     ;mov   reg[I2CHW_Temp_MSCR], I2CM_SNDSTRT
                                        (0736) 
                                        (0737) ;IF I2CHW_Temp_THROTTLE_CLK_RATE
                                        (0738)     SetI2CHW_Temp_MSCR I2CM_SNDSTRT
                                        (0739) ;ELSE
                                        (0740) ;    mov   reg[I2CHW_Temp_MSCR], I2CM_SNDSTRT
                                        (0741) ;ENDIF
                                        (0742)     RAM_EPILOGUE RAM_USE_CLASS_4
0A87: 7F       RET                      (0743)     ret
0A88: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0744) ;
                                        (0745) ;   DO NOT PLACE
                                        (0746) ;   .SECTION
                                        (0747) ;   .ENDSECTION
                                        (0748) ;   _fSendStart USES CODE BELOW
                                        (0749) ;
                                        (0750) ;-----------------------------------------------------------------------------
                                        (0751) ;  FUNCTION NAME: I2CHW_Temp_fWrite
                                        (0752) ;
                                        (0753) ;  DESCRIPTION:
                                        (0754) ;    Writes a byte to the I2C master bus.
                                        (0755) ;
                                        (0756) ;-----------------------------------------------------------------------------
                                        (0757) ;
                                        (0758) ;  ARGUMENTS:
                                        (0759) ;    A contains Data to be written to I2C slave.
                                        (0760) ;
                                        (0761) ;  RETURNS:
                                        (0762) ;    1 If ACKed, else 0
                                        (0763) ;
                                        (0764) ;  SIDE EFFECTS:
                                        (0765) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0766) ;
                                        (0767) ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0768) ;
                                        (0769) ;  FUNCTION NAME: I2CHW_Temp_fWrite
                                        (0770) ;
                                        (0771) ;  DESCRIPTION:
                                        (0772) ;    Writes a data byte to the I2C master bus. 
                                        (0773) ;
                                        (0774) ;  ARGUMENTS:
                                        (0775) ;    Reg A contains slave address.
                                        (0776) ;    I2CHW_Temp_bData - Contains data to be transmitted.
                                        (0777) ;
                                        (0778) ;  RETURNS:
                                        (0779) ;    I2CHW_Temp_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0780) ;
                                        (0781) ;  SIDE EFFECTS:
                                        (0782) ;    The A and X registers may be modified by this or future implementations
                                        (0783) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0784) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0785) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0786) ;    functions.
                                        (0787) ;          
                                        (0788) ;    Currently only the page pointer registers listed below are modified: 
                                        (0789) ;          CUR_PP
                                        (0790) ;
                                        (0791) ;    Send data byte to slave. .
                                        (0792) ;
                                        (0793) ;   WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0794) ;    flag is set to return.
                                        (0795) ;
                                        (0796)  I2CHW_Temp_fWrite:
                                        (0797) _I2CHW_Temp_fWrite:
                                        (0798)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0799) 	RAM_SETPAGE_CUR >I2CHW_Temp_bStatus
                                        (0800)     ; disable the interrupt
                                        (0801)         ; *** NOT REENABLED ***
                                        (0802)         ;
0A8B: 60 D8    MOV   REG[0xD8],A        (0803)     mov   reg[I2CHW_Temp_DR],A                             ; Put data in Data Reg
0A8D: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0804)     M8C_DisableIntMask I2CHW_Temp_INT_REG, I2CHW_Temp_INT_MASK
0A90: 5D D9    MOV   A,REG[0xD9]        (0805)     mov   A,  reg[I2CHW_Temp_MSCR]                            ;MSCR into A incase there is an error here
0A92: 49 D9 04 TST   REG[0xD9],0x4      (0806)     tst   reg[I2CHW_Temp_MSCR],I2CM_MASTEROP               ;Do we have control of the bus?
0A95: A0 19    JZ    0x0AAF             (0807)     jz    Err_Exit_fWrite
                                        (0808) 
0A97: 55 03 00 MOV   [0x3],0x0          (0809)     mov   [I2CHW_Temp_bStatus],0x00                        ; Clear ACK flag
0A9A: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0810)     ;SetI2CHW_Temp_SCR I2C_TX
                                        (0811)     ;mov   reg[I2CHW_Temp_SCR], I2C_TX                     ; Put data in Data Reg
                                        (0812) 
                                        (0813) ;IF I2CHW_Temp_THROTTLE_CLK_RATE
                                        (0814)         SetI2CHW_Temp_SCR I2C_TX                           ; Put data in Data Reg
                                        (0815) ;ELSE
                                        (0816) ;    mov   reg[I2CHW_Temp_SCR], I2C_TX                     ; Put data in Data Reg
                                        (0817) ;ENDIF
                                        (0818) 
                                        (0819) 
                                        (0820) I2CHW_Temp_write:
                                        (0821) _I2CHW_Temp_write:
                                        (0822) ;    mov   reg[I2CHW_Temp_SCR],A                           ; Put data in bData
                                        (0823) ;   jmp   I2CHW_Temp_get_ack                               ; This jump is not required since it falls
                                        (0824) 
                                        (0825) WaitTXByteCompl:
0A9D: 5D D7    MOV   A,REG[0xD7]        (0826)     mov   A, reg[I2CHW_Temp_SCR]
0A9F: 49 D7 01 TST   REG[0xD7],0x1      (0827)     tst   reg[I2CHW_Temp_SCR],I2C_BYTE_COMPL               ; Test to see if Slave ACKed
0AA2: AF FA    JZ    0x0A9D             (0828)     jz    WaitTXByteCompl
0AA4: 49 D7 02 TST   REG[0xD7],0x2      (0829)     tst   reg[I2CHW_Temp_SCR], I2C_LST_BIT
0AA7: B0 07    JNZ   0x0AAF             (0830)     jnz   Err_Exit_fWrite
0AA9: 55 03 FF MOV   [0x3],0xFF         (0831)     mov   [I2CHW_Temp_bStatus], 0xff
0AAC: 50 01    MOV   A,0x1              (0832)     mov   A, 01
                                        (0833)     RAM_EPILOGUE RAM_USE_CLASS_4
0AAE: 7F       RET                      (0834)     ret
                                        (0835) 
                                        (0836) Err_Exit_fWrite:
0AAF: 50 00    MOV   A,0x0              (0837)     mov   A, 0
0AB1: 53 03    MOV   [0x3],A            (0838)     mov   [I2CHW_Temp_bStatus], A
                                        (0839)     RAM_EPILOGUE RAM_USE_CLASS_4
0AB3: 7F       RET                      (0840)     ret
0AB4: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0841) 
                                        (0842) .ENDSECTION
                                        (0843) 
                                        (0844) .SECTION
                                        (0845) ;-----------------------------------------------------------------------------
                                        (0846) ;  FUNCTION NAME: I2CHW_Temp_get_ack
                                        (0847) ;
                                        (0848) ;  DESCRIPTION:
                                        (0849) ;    Get slave acknowledge response. Used to poll for I2C_BYTE_COMPL and then test Ack (I2C_LST_BIT)
                                        (0850) ;
                                        (0851) ;-----------------------------------------------------------------------------
                                        (0852) ;
                                        (0853) ;  ARGUMENTS:
                                        (0854) ;
                                        (0855) ;  RETURNS:
                                        (0856) ;    Sets flag in I2CHW_Temp_bStatus if ACKed by Slave.  !!!
                                        (0857) ;
                                        (0858) ;  SIDE EFFECTS:
                                        (0859) ;    The A and X registers may be modified by this or future implementations
                                        (0860) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0861) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0862) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0863) ;    functions.
                                        (0864) ;          
                                        (0865) ;    Currently only the page pointer registers listed below are modified: 
                                        (0866) ;          CUR_PP
                                        (0867) ;
                                        (0868) ;    Do the ack clock and check for Slave ACK
                                        (0869) ;
                                        (0870) I2CHW_Temp_get_ack:
                                        (0871) _I2CHW_Temp_get_ack:
                                        (0872)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0873) 	RAM_SETPAGE_CUR >I2CHW_Temp_bStatus
0AB7: 26 03 FE AND   [0x3],0xFE         (0874)     and [I2CHW_Temp_bStatus], ~I2CHW_Temp_SLAVE_ACKed
0ABA: 49 D7 01 TST   REG[0xD7],0x1      (0875)     tst reg[I2CHW_Temp_SCR], I2C_BYTE_COMPL
0ABD: BF F6    JNZ   0x0AB4             (0876)     jnz I2CHW_Temp_get_ack
0ABF: 49 D7 02 TST   REG[0xD7],0x2      (0877)     tst reg[I2CHW_Temp_SCR], I2C_LST_BIT
0AC2: B0 04    JNZ   0x0AC7             (0878)     jnz notAcked
0AC4: 2E 03 01 OR    [0x3],0x1          (0879)     or [I2CHW_Temp_bStatus], I2CHW_Temp_SLAVE_ACKed
                                        (0880) notAcked:
                                        (0881)     RAM_EPILOGUE RAM_USE_CLASS_4
0AC7: 7F       RET                      (0882)     ret
0AC8: 62 D0 00 MOV   REG[0xD0],0x0      
0ACB: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0883) 
                                        (0884) .ENDSECTION
                                        (0885) 
                                        (0886) .SECTION
                                        (0887) 
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;  FUNCTION NAME: I2CHW_Temp_bRead
                                        (0890) ;
                                        (0891) ;  DESCRIPTION:
                                        (0892) ;    Reads 1 data byte from the I2C master bus.
                                        (0893) ;
                                        (0894) ;-----------------------------------------------------------------------------
                                        (0895) ;
                                        (0896) ;  ARGUMENTS:
                                        (0897) ;    Reg A Contains the Slave Address.
                                        (0898) ;    I2CHW_Temp_bStatus - Set for no ack to be followed by stop.
                                        (0899) ;    Clear for ack to indicate more data to follow.
                                        (0900) ;
                                        (0901) ;  RETURNS:
                                        (0902) ;    I2CHW_Temp_bData - Contains received data.
                                        (0903) ;
                                        (0904) ;  SIDE EFFECTS:
                                        (0905) ;    The A and X registers may be modified by this or future implementations
                                        (0906) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0907) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0908) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0909) ;    functions.
                                        (0910) ;          
                                        (0911) ;    Currently only the page pointer registers listed below are modified: 
                                        (0912) ;          CUR_PP
                                        (0913) ;
                                        (0914) ;    Must be followed by I2CHW_Temp_put_ack.
                                        (0915) ;    The I2CHW_Temp interrupt should be disabled since this routine will poll the
                                        (0916) ;    reg[I2CHW_Temp_SCR] to determine when a byte is available
                                        (0917) ;
                                        (0918) ;   WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0919) ;    flag is set to return.
                                        (0920) ;
                                        (0921) I2CHW_Temp_bRead:
                                        (0922) _I2CHW_Temp_bRead:
                                        (0923)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0924) 	RAM_SETPAGE_CUR >I2CHW_Temp_bStatus
                                        (0925)     ; disable the interrupt
                                        (0926)     ; *** NOT REENABLED ***
                                        (0927)     ;
                                        (0928)     M8C_DisableIntMask I2CHW_Temp_INT_REG, I2CHW_Temp_INT_MASK
0ACE: 49 D9 04 TST   REG[0xD9],0x4      (0929)     tst       reg[I2CHW_Temp_MSCR], I2CM_MASTEROP          ;do we even have control of the bus?
0AD1: A0 28    JZ    0x0AFA             (0930)     jz    notBusMaster2
                                        (0931) 
0AD3: 55 03 00 MOV   [0x3],0x0          (0932)     mov   [I2CHW_Temp_bStatus],0x00                        ; Clear ACK flag
                                        (0933)     ;or    I2CHW_Temp_SEND_ACK                             ; Set ACK flag
                                        (0934) ;
                                        (0935) ; Check for the special case of the first read after and address is sent
                                        (0936) ;
                                        (0937) 
0AD6: 08       PUSH  A                  (0938)     push  A                                                ;preserve the information about wether to ACK or NAK this byte
0AD7: 5D D7    MOV   A,REG[0xD7]        (0939)     mov   A, reg[I2CHW_Temp_SCR]
0AD9: 49 D7 08 TST   REG[0xD7],0x8      (0940)     tst   reg[I2CHW_Temp_SCR], I2C_ADDRIN
0ADC: A0 04    JZ    0x0AE1             (0941)     jz    WaitRXByteCompl                                  ;addr bit not set then this is a normal read
0ADE: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0942)     ;SetI2CHW_Temp_SCR 0
                                        (0943)     ;mov   reg[I2CHW_Temp_SCR], 0                          ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0944) 
                                        (0945) ;IF I2CHW_Temp_THROTTLE_CLK_RATE
                                        (0946)     SetI2CHW_Temp_SCR 0                                    ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0947) ;ELSE
                                        (0948) ;    mov   reg[I2CHW_Temp_SCR], 0                          ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0949) ;ENDIF
                                        (0950)                                                            ; through to I2CHW_Temp_put_ack.
                                        (0951) 
                                        (0952)     ;must DROP through to send an Ack and another byte,
                                        (0953)     ;to stop reading we NAK the slave
                                        (0954) WaitRXByteCompl:
0AE1: 49 D7 01 TST   REG[0xD7],0x1      (0955)     tst   reg[I2CHW_Temp_SCR],I2C_BYTE_COMPL               ; Test to see if Slave ACKed
0AE4: AF FC    JZ    0x0AE1             (0956)     jz    WaitRXByteCompl
                                        (0957) 
0AE6: 18       POP   A                  (0958)     pop   A                                                ;recover the saved ACK/NAK flag
0AE7: 21 FF    AND   A,0xFF             (0959)     and   A,0xFF                                           ; Is Ack flag set"
0AE9: A0 0A    JZ    0x0AF4             (0960)     jz    exit_bRead_NOACK                                 ; Don't ACK
                                        (0961) 
                                        (0962)         ;now if the ACK flag was set, Ack the data which will release the bus and start the next byte in
                                        (0963)         ;otherwise do NOTHING to the SCR reg.  This will allow the calling routine to generate a repeat start
                                        (0964)         ;or a stop depending on it's preference.
                                        (0965) 
                                        (0966) 
0AEB: 5D D8    MOV   A,REG[0xD8]        (0967)     mov   A, reg[I2CHW_Temp_DR]                            ; Record data received
0AED: 62 D7 10 MOV   REG[0xD7],0x10     
                                        (0968)     ;SetI2CHW_Temp_SCR I2C_ACKOUT
                                        (0969)     ;mov   reg[I2CHW_Temp_SCR], I2C_ACKOUT                 ; Record data received
                                        (0970) 
                                        (0971) ;IF I2CHW_Temp_THROTTLE_CLK_RATE
                                        (0972)     SetI2CHW_Temp_SCR I2C_ACKOUT                           ; Record data received
                                        (0973) ;ELSE
                                        (0974) ;    mov   reg[I2CHW_Temp_SCR], I2C_ACKOUT                 ; Record data received
                                        (0975) ;ENDIF
                                        (0976) 
0AF0: 55 03 01 MOV   [0x3],0x1          (0977)     mov   [I2CHW_Temp_bStatus],0x01                        ; Clear ACK flag
                                        (0978)     RAM_EPILOGUE RAM_USE_CLASS_4
0AF3: 7F       RET                      (0979)     ret
                                        (0980) 
                                        (0981) exit_bRead_NOACK:
0AF4: 5D D8    MOV   A,REG[0xD8]        (0982)     mov   A, reg[I2CHW_Temp_DR]                            ; Record data received
                                        (0983)     ; send no Ack or Nak, the calling routine will have to decide to NAK or execute a repeat start.
                                        (0984)     ; sending nothing leaves the bus held in wait until a decision is made.
0AF6: 55 03 00 MOV   [0x3],0x0          (0985)     mov   [I2CHW_Temp_bStatus],0x00                        ; Clear ACK flag
                                        (0986)     RAM_EPILOGUE RAM_USE_CLASS_4
0AF9: 7F       RET                      (0987)     ret
                                        (0988) 
                                        (0989) notBusMaster2:
0AFA: 55 03 FF MOV   [0x3],0xFF         (0990)    mov   [I2CHW_Temp_bStatus], 0xff
                                        (0991)    ;SetI2CHW_Temp_SCR 0
                                        (0992)    ;mov          reg[I2CHW_Temp_MSCR], 0                     ;we certainly cant restart if we've not Master
                                        (0993)    ;WHAT else should be done for this case?  Some sort of improper operation is being attempted.
                                        (0994)    RAM_EPILOGUE RAM_USE_CLASS_4
0AFD: 7F       RET                      (0995)    ret
                                        (0996) 
                                        (0997) .ENDSECTION
                                        (0998) 
                                        (0999) 
                                        (1000) .SECTION
                                        (1001) ;-----------------------------------------------------------------------------
                                        (1002) ;  FUNCTION NAME: I2CHW_Temp_SendStop
                                        (1003) ;
                                        (1004) ;  DESCRIPTION:
                                        (1005) ;    Assert stop condition.
                                        (1006) ;
                                        (1007) ;-----------------------------------------------------------------------------
                                        (1008) ;
                                        (1009) ;  ARGUMENTS: none
                                        (1010) ;
                                        (1011) ;  RETURNS: none
                                        (1012) ;
                                        (1013) ;  SIDE EFFECTS:
                                        (1014) ;    The A and X registers may be modified by this or future implementations
                                        (1015) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1016) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1017) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1018) ;    functions.
                                        (1019) ;
                                        (1020) ;  THEORY of OPERATION or PROCEDURE:
                                        (1021) ;     Send stop by releasing SDA high while SCL high. When in Master Read Mode, this
                                        (1022) ;     is done by nak'ing a read from the slave, in Master Write Mode this is done by clearing
                                        (1023) ;     the I2C_TX bit in  reg[I2CHW_Temp_SCR].  In either case this is a zero written to
                                        (1024) ;     reg[I2CHW_Temp_SCR].
                                        (1025) ;
                                        (1026)  I2CHW_Temp_SendStop:
                                        (1027) _I2CHW_Temp_SendStop:
                                        (1028)     RAM_PROLOGUE RAM_USE_CLASS_1
0AFE: 49 D9 04 TST   REG[0xD9],0x4      (1029)     tst   reg[I2CHW_Temp_MSCR], I2CM_MASTEROP              ;do we even have control of the bus?
0B01: A0 04    JZ    0x0B06             (1030)     jz    notBusMaster3
0B03: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (1031)     ;SetI2CHW_Temp_SCR 0
                                        (1032)     ;mov  reg[I2CHW_Temp_SCR], 0
                                        (1033) ;IF I2CHW_Temp_THROTTLE_CLK_RATE
                                        (1034)     SetI2CHW_Temp_SCR 0                                    ; Put data in Data Reg
                                        (1035) ;ELSE
                                        (1036) ;    mov   reg[I2CHW_Temp_SCR], 0                          ; Put data in Data Reg
                                        (1037) ;ENDIF
                                        (1038) 
                                        (1039) notBusMaster3:
                                        (1040)     RAM_EPILOGUE RAM_USE_CLASS_1
0B06: 7F       RET                      (1041)     ret
0B07: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1042) .ENDSECTION
                                        (1043) 
                                        (1044) .SECTION
                                        (1045) ;-----------------------------------------------------------------------------
                                        (1046) ;  FUNCTION NAME: I2CHW_Temp_bReadBusStatus
                                        (1047) ;
                                        (1048) ;  DESCRIPTION:
                                        (1049) ;     Returns the Status bits in the bStatus Register
                                        (1050) ;
                                        (1051) ;-----------------------------------------------------------------------------
                                        (1052) ;
                                        (1053) ;  ARGUMENTS:
                                        (1054) ;
                                        (1055) ;  RETURNS:
                                        (1056) ;     BYTE  bStatus -  Bus status data.  Use the following defined bits
                                        (1057) ;     returned in A.
                                        (1058) ;       I2CHW_Temp_RepStart:                equ  0x01
                                        (1059) ;       I2CHW_Temp_NoStop:                  equ  0x02
                                        (1060) ;       I2CHW_Temp_NAKnextWr:               equ  0x04
                                        (1061) ;
                                        (1062) ;  SIDE EFFECTS:
                                        (1063) ;    The A and X registers may be modified by this or future implementations
                                        (1064) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1065) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1066) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1067) ;    functions.
                                        (1068) ;          
                                        (1069) ;  THEORY of OPERATION or PROCEDURE:
                                        (1070) ;     Read the Bus Status register.
                                        (1071) ;
                                        (1072) 
                                        (1073)  I2CHW_Temp_bReadBusStatus:
                                        (1074) _I2CHW_Temp_bReadBusStatus:
                                        (1075)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1076)    RAM_SETPAGE_CUR >I2CHW_Temp_bStatus				                 ;Set the Page Pointer for LMM
0B0A: 51 03    MOV   A,[0x3]            (1077)    mov   A, [I2CHW_Temp_bStatus]                      ;return the status in A
                                        (1078)    RAM_EPILOGUE RAM_USE_CLASS_4
0B0C: 7F       RET                      (1079)    ret
                                        (1080) 
                                        (1081) .ENDSECTION
                                        (1082) 
                                        (1083) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1084) .SECTION
                                        (1085) ;-----------------------------------------------------------------------------
                                        (1086) ;  FUNCTION NAME: I2CHW_Temp_fReadBytes
                                        (1087) ;
                                        (1088) ;  DESCRIPTION:
                                        (1089) ;
                                        (1090) ;-----------------------------------------------------------------------------
                                        (1091) ;
                                        (1092) ;  ARGUMENTS:
                                        (1093) ;      A => Address of slave
                                        (1094) ;      X => Pointer to other arguments.
                                        (1095) ;    [x] => LSB of Array address to put data in.
                                        (1096) ;  [X-1] => MSB of Array address to put data in (ignorned)
                                        (1097) ;  [X-2] => Count of bytes to read.
                                        (1098) ;  [X-3] => Mode flags that allow the programmer to set flags
                                        (1099) ;           to determine if:
                                        (1100) ;             0x01 => Use RepeatStart instead of Start
                                        (1101) ;             0x02 => Don't send Stop
                                        (1102) ;
                                        (1103) ;  RETURNS:       None
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;    I2C and block must be operational.
                                        (1117) ;    This routine will enable the I2C interrupt!
                                        (1118) ;    If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already running this routine will
                                        (1119) ;    pend on the ISR_ACTIVE bit until it can run
                                        (1120) ;
                                        (1121) IF	(TOOLCHAIN & HITECH)
                                        (1122) RxArray:      set   0
                                        (1123) RxByteCount:  set  -2
                                        (1124) RxMode:       set  -3
                                        (1125) ELSE
                                        (1126) RxArray:      equ   0
                                        (1127) RxByteCount:  equ  -2
                                        (1128) RxMode:       equ  -3
                                        (1129) ENDIF
                                        (1130) 
                                        (1131) 
                                        (1132)  I2CHW_Temp_fReadBytes:
                                        (1133)     push  A
                                        (1134) I2CMSCR_NotReady1Smm:
                                        (1135)         mov    A, [I2CHW_Temp_RsrcStatus]                  ; test to see if previous command started ISR
                                        (1136)         tst    [I2CHW_Temp_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1137)     ;mov   A, reg[I2CHW_Temp_MSCR]                         ;read the mscr register to look for pending master operations
                                        (1138)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1139)           ;For multi master operations, a pening start or restart
                                        (1140)           ;request might be OK, the master might be waiting to
                                        (1141)           ;acquire the bus from another master
                                        (1142)         jnz   I2CMSCR_NotReady1Smm
                                        (1143)     pop   A
                                        (1144)         or    [I2CHW_Temp_RsrcStatus], I2CHW_ISR_ACTIVE    ; flag set here and cleared by ISR
                                        (1145)     asl   A                                                ; Shift address to the left to make
                                        (1146)                                                            ; a complete byte with the R/W bit.
                                        (1147)     or    A,0x01                                           ; OR the address with the Read bit.
                                        (1148)     mov   [I2CHW_Temp_SlaveAddr], A                        ; preserve addr+r/w state for the ISR to use
                                        (1149)     mov   reg[I2CHW_Temp_DR], A                            ; put the write addr into the I2C_DR reg
                                        (1150)     mov   [I2CHW_Temp_bStatus],0x00                        ; Clear all flags
                                        (1151)     mov   A, [X+RxMode]                                                             ; place the RxMode in status so ISR can access it
                                        (1152)     mov   [I2CHW_Temp_bStatus],A
                                        (1153)     ;
                                        (1154)         ;we must now initialize a read buffer using I2CHW_Temp_InitWrite
                                        (1155)         ;
                                        (1156)         push   X                                                ;preserve since it's used later
                                        (1157)         mov    A, [X+RxByteCount]                               ;get the write buf size
                                        (1158)         push   A
                                        (1159)         push   A                                                                                            ;this will be ignored
                                        (1160)         mov    A, [X+RxArray]                                   ;get the write buf addr
                                        (1161)         push   A
                                        (1162)         mov    X, sp
                                        (1163)         dec    X
                                        (1164)         call  I2CHW_Temp_InitWrite                         ;sets the addr and byte count to write to
                                        (1165)         add SP, -3
                                        (1166)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (1167) 
                                        (1168)     mov   A,[I2CHW_Temp_SlaveAddr]
                                        (1169)     tst   [x+RxMode],I2CHW_Temp_RepStart
                                        (1170)     jnz   DoRestartRxSmm
                                        (1171)     tst   reg[I2CHW_Temp_SCR], I2C_BYTE_COMPL              ; indicates the I2C bus is stalled
                                        (1172)     jnz   DoRestartRxSmm
                                        (1173)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1174)     jmp   CheckRxAckSmm
                                        (1175) DoRestartRxSmm:
                                        (1176)     call  I2CHW_Temp_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1177)         ;note that REPEATSTART can only be used if this master currently has control of the bus and is at the end
                                        (1178)         ; of or ending the current data transmission/reception.  This also requres that the software (this UM)
                                        (1179)         ; as a whole be able to detect that a stop has not been sent previously in this transmission.
                                        (1180) 
                                        (1181) CheckRxAckSmm:                                                ; Test to see if Slave ACKed
                                        (1182)         ;nothing to do here, a start and address are being transmitted, wait for the ISR to pick up, when it
                                        (1183)         ;is finished.
                                        (1184) ;End_RD:
                                        (1185)     ret
                                        (1186) 
                                        (1187) .ENDSECTION
                                        (1188) 
                                        (1189) .SECTION
                                        (1190) ;-----------------------------------------------------------------------------
                                        (1191) ;  FUNCTION NAME: I2CHW_Temp_bWriteBytes
                                        (1192) ;
                                        (1193) ;  DESCRIPTION:
                                        (1194) ;    Write multiple data bits to slave device.
                                        (1195) ;
                                        (1196) ;-----------------------------------------------------------------------------
                                        (1197) ;
                                        (1198) ;  ARGUMENTS:
                                        (1199) ;     A => Address of slave
                                        (1200) ;     X => Pointer to other arguments.
                                        (1201) ;   [x] => LSB of Array address to put data in.
                                        (1202) ; [X-1] => MSB of Array address to put data in (ignorned)
                                        (1203) ; [X-2] => Count of bytes to write.
                                        (1204) ; [X-3] => Mode flags that allow the programmer to set flags
                                        (1205) ;          to determine if:
                                        (1206) ;              0x01 => Use RePeatStart instead of Start
                                        (1207) ;              0x02 => Don't send Stop
                                        (1208) ;
                                        (1209) ;
                                        (1210) ;  RETURNS:     None
                                        (1211) ;
                                        (1212) ;  SIDE EFFECTS:
                                        (1213) ;    The A and X registers may be modified by this or future implementations
                                        (1214) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1215) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1216) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1217) ;    functions.
                                        (1218) ;          
                                        (1219) IF	(TOOLCHAIN & HITECH)
                                        (1220) TxArray:      set   0
                                        (1221) TxByteCount:  set  -2
                                        (1222) TxMode:       set  -3
                                        (1223) ELSE
                                        (1224) TxArray:      equ   0
                                        (1225) TxByteCount:  equ  -2
                                        (1226) TxMode:       equ  -3
                                        (1227) ENDIF
                                        (1228) 
                                        (1229)  I2CHW_Temp_bWriteBytes:
                                        (1230)     push  A
                                        (1231) I2CMSCR_NotReady2Smm:
                                        (1232)         mov    A, [I2CHW_Temp_RsrcStatus]                  ; test to see if previous command started ISR
                                        (1233)         tst    [I2CHW_Temp_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1234)     ;mov   A, reg[I2CHW_Temp_MSCR]                         ;read the mscr register to look for pending master operations
                                        (1235)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1236)           ;For multi master operations, a pening start or restart
                                        (1237)           ;request might be OK, the master might be waiting to
                                        (1238)           ;acquire the bus from another master
                                        (1239)         jnz   I2CMSCR_NotReady2Smm
                                        (1240)     pop   A
                                        (1241)         or    [I2CHW_Temp_RsrcStatus], I2CHW_ISR_ACTIVE    ; flag set here and cleared at end of ISR
                                        (1242)     asl   A                                                ; Shift address to the left to make
                                        (1243)                                                            ; a complete byte with the R/W bit.
                                        (1244)                                                            ; The ASL takes care of clearing bit 0.
                                        (1245)     mov   [I2CHW_Temp_bStatus],0x00                        ; Clear all flags
                                        (1246)     mov   [I2CHW_Temp_SlaveAddr], A                        ; preserve addr+r/w state for the ISR to use
                                        (1247)     mov   reg[I2CHW_Temp_DR], A                            ; put the write addr into the I2C_DR reg
                                        (1248)     mov   A, [X+TxMode]                                                             ; place the TxMode in status so ISR can access it
                                        (1249)     mov   [I2CHW_Temp_bStatus],A
                                        (1250)     ;
                                        (1251)         ;we must now initialize a read buffer using I2CHW_Temp_InitWrite
                                        (1252)         ;
                                        (1253)         push   X                                                ;preserve since it's used later
                                        (1254)         inc    [X+TxByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (1255)                                                                 ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
                                        (1256)         mov    A, [X+TxByteCount]                               ;get the write buf size
                                        (1257)         push   A
                                        (1258)         push   A                                                                                            ;this will be ignored
                                        (1259)         mov    A, [X+TxArray]                                   ;get the write buf addr
                                        (1260)         push   A
                                        (1261)         mov    X, sp
                                        (1262)         dec    X
                                        (1263)         call  I2CHW_Temp_InitRamRead                       ;sets the addr and byte count to write to
                                        (1264)         add    SP, -3
                                        (1265)         pop    X                                                ;restore X to be used for the rest of this routine
                                        (1266)     ;and  [I2CHW_Temp_RsrcStatus],~I2C_READFLASH           ;shouldn't be needed should have been taken care of in InitRamRead routine
                                        (1267) 
                                        (1268) 
                                        (1269)     mov   A,[I2CHW_Temp_SlaveAddr]
                                        (1270)     tst   [x+TxMode],I2CHW_Temp_RepStart
                                        (1271)     jnz   DoRestartTxSmm
                                        (1272)     tst   reg[I2CHW_Temp_SCR], I2C_BYTE_COMPL              ; indicates the I2C bus is stalled
                                        (1273)     jnz   DoRestartRxSmm
                                        (1274)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1275)     jmp   DoTxAckSmm
                                        (1276) DoRestartTxSmm:
                                        (1277)     call  I2CHW_Temp_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1278) DoTxAckSmm:
                                        (1279) 
                                        (1280) 
                                        (1281) ;WriteSlaveAck:
                                        (1282)     ret
                                        (1283) 
                                        (1284) .ENDSECTION
                                        (1285) 
                                        (1286) .SECTION
                                        (1287) ;-----------------------------------------------------------------------------
                                        (1288) ;  FUNCTION NAME: I2CHW_Temp_bWriteCBytes
                                        (1289) ;
                                        (1290) ;  DESCRIPTION:
                                        (1291) ;    Write multiple data bits to slave device from ROM
                                        (1292) ;
                                        (1293) ;-----------------------------------------------------------------------------
                                        (1294) ;
                                        (1295) ;  ARGUMENTS:
                                        (1296) ;      A => Address of slave
                                        (1297) ;      X => Pointer to other arguments.
                                        (1298) ;     [x] => LSB of ROM Array address to put data in.
                                        (1299) ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
                                        (1300) ;   [X-2] => Count of bytes to write.
                                        (1301) ;   [X-3] => Mode flags that allow the programmer to set flags
                                        (1302) ;            to determine if:
                                        (1303) ;               0x01 => Use RepeatStart instead of Start
                                        (1304) ;               0x02 => Don't send Stop
                                        (1305) ;
                                        (1306) ;  RETURNS:
                                        (1307) ;    None
                                        (1308) ;
                                        (1309) ;  SIDE EFFECTS:
                                        (1310) ;    The A and X registers may be modified by this or future implementations
                                        (1311) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1313) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1314) ;    functions.
                                        (1315) ;          
                                        (1316) IF	(TOOLCHAIN & HITECH)
                                        (1317) TxCArrayLSB:   set   0
                                        (1318) TxCArrayMSB:   set  -1
                                        (1319) TxCByteCount:  set  -2
                                        (1320) TxCMode:       set  -3
                                        (1321) ELSE
                                        (1322) TxCArrayLSB:   equ   0
                                        (1323) TxCArrayMSB:   equ  -1
                                        (1324) TxCByteCount:  equ  -2
                                        (1325) TxCMode:       equ  -3
                                        (1326) ENDIF
                                        (1327) 
                                        (1328)  I2CHW_Temp_bWriteCBytes:
                                        (1329)     push  A
                                        (1330) I2CMSCR_NotReady3Smm:
                                        (1331)         mov    A, [I2CHW_Temp_RsrcStatus]                  ; test to see if previous command started ISR
                                        (1332)         tst    [I2CHW_Temp_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1333)     ;mov   A, reg[I2CHW_Temp_MSCR]                         ;read the mscr register to look for pending master operations
                                        (1334)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1335)           ;For multi master operations, a pening start or restart
                                        (1336)           ;request might be OK, the master might be waiting to
                                        (1337)           ;acquire the bus from another master
                                        (1338)         jnz   I2CMSCR_NotReady3Smm
                                        (1339)     pop   A
                                        (1340)         or    [I2CHW_Temp_RsrcStatus], I2CHW_ISR_ACTIVE    ;lag set here but cleared in ISRf
                                        (1341)         asl   A                                                 ; Shift address to the left to make
                                        (1342)                                                            ; a complete byte with the R/W bit.
                                        (1343)                                                            ; The ASL takes care of clearing bit 0.
                                        (1344)     mov   [I2CHW_Temp_bStatus],0x00                        ; Clear all flags
                                        (1345)     mov   [I2CHW_Temp_SlaveAddr], A                        ; preserve addr+r/w state for the ISR to use
                                        (1346)     mov   reg[I2CHW_Temp_DR], A                            ; put the write addr into the I2C_DR reg
                                        (1347)         mov   A, [X+RxMode]                                                             ; place the RxMode in status so ISR can access it
                                        (1348)     mov   [I2CHW_Temp_bStatus],A
                                        (1349)     ;
                                        (1350)         ;we must now initialize a read buffer using I2CHW_Temp_InitWrite
                                        (1351)         ;
                                        (1352)         push   X                                                ;preserve X since it's used later
                                        (1353)         mov    A, 0                                             ;get the write buf size (this is the hi order part)
                                        (1354)         inc    [X+TxCByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (1355)         jnc     . + 3                                           ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
                                        (1356)         inc    A                                                                                        ;if the low order part of the count happened to roll to 0x00, inc the hi part
                                        (1357)         push   A
                                        (1358)         mov    A, [X+TxCByteCount]                              ;initFlasRead needs a 2 byte count this is the low ord byte
                                        (1359)         push   A
                                        (1360)         mov    A, [X+TxCArrayMSB]                               ;get the write buf addr
                                        (1361)         push   A                                                                                        ;this will be ignored
                                        (1362)         mov    A, [X+TxCArrayLSB]                               ;get the write buf addr
                                        (1363)         push   A
                                        (1364)         mov    X, sp
                                        (1365)         dec    X
                                        (1366)         call  I2CHW_Temp_InitFlashRead                     ;sets the addr and byte count to write to
                                        (1367)         add SP, -4
                                        (1368)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (1369)     ;or  [I2CHW_Temp_RsrcStatus],I2C_READFLASH
                                        (1370)     mov   A,[I2CHW_Temp_SlaveAddr]
                                        (1371)     tst   [x+TxMode],I2CHW_Temp_RepStart                   ; Check if a Start or RepeatStart
                                        (1372)     jnz   DoCRestartTxSmm                                      ; should executed.
                                        (1373)     tst   reg[I2CHW_Temp_SCR], I2C_BYTE_COMPL              ; indicates the I2C bus is stalled
                                        (1374)     jnz   DoRestartRxSmm
                                        (1375)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1376)     jmp   DoCTxAckSmm
                                        (1377) DoCRestartTxSmm:
                                        (1378)     call  I2CHW_Temp_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1379) 
                                        (1380) DoCTxAckSmm:                                                   ; Test to see if Slave is ACKed
                                        (1381) 
                                        (1382) ;CWriteSlaveAck:
                                        (1383)         ret
                                        (1384) 
                                        (1385) .ENDSECTION
                                        (1386) 
                                        (1387) 
                                        (1388) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (1389) 
                                        (1390) ; End of File I2CHW_Temp.asm
                                        (1391) 
                                        (1392) 
FILE: lib\i2chw_tempint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHW_TempINT.asm
                                        (0004) ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2CHW Master Interrupt Service Routine
                                        (0008) ;;  This is the interrupt service routine for the Single Master I2C function.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "I2CHW_TempCommon.inc"
                                        (0017) include "I2CHW_TempMstr.inc"
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export     I2CHW_Temp_Read_Count
                                        (0024) export    _I2CHW_Temp_Read_Count
                                        (0025) export     I2CHW_Temp_Write_Count
                                        (0026) export    _I2CHW_Temp_Write_Count
                                        (0027) 
                                        (0028) export    pI2CHW_Temp_Read_BufLO
                                        (0029) export   _pI2CHW_Temp_Read_BufLO
                                        (0030) export    pI2CHW_Temp_Write_BufLO
                                        (0031) export   _pI2CHW_Temp_Write_BufLO
                                        (0032) export    I2CHW_Temp_RsrcStatus
                                        (0033) export   _I2CHW_Temp_RsrcStatus
                                        (0034) export    I2CHW_Temp_SlaveAddr
                                        (0035) export   _I2CHW_Temp_SlaveAddr
                                        (0036) 
                                        (0037) ;-----------------------------------------------
                                        (0038) ; WARNING: The variables below are deprecated
                                        (0039) ; and have been replaced with Read_BufLO
                                        (0040) ; and Write_BufLO
                                        (0041) ;-----------------------------------------------
                                        (0042) export    pI2CHW_Temp_Read_Buf
                                        (0043) export   _pI2CHW_Temp_Read_Buf
                                        (0044) export    pI2CHW_Temp_Write_Buf
                                        (0045) export   _pI2CHW_Temp_Write_Buf
                                        (0046) ;-----------------------------------------------
                                        (0047) ; END WARNING
                                        (0048) ;-----------------------------------------------
                                        (0049)  
                                        (0050) area InterruptRAM(RAM, REL, CON)
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ; Variable Allocation
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056)   I2CHW_Temp_SlaveAddr:
                                        (0057)  _I2CHW_Temp_SlaveAddr:                      blk      1
                                        (0058)   I2CHW_Temp_RsrcStatus:
                                        (0059)  _I2CHW_Temp_RsrcStatus:                     blk     1
                                        (0060)   I2CHW_Temp_Write_Count:
                                        (0061)  _I2CHW_Temp_Write_Count:                    blk    1
                                        (0062) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0063) export    pI2CHW_Temp_Write_BufHI
                                        (0064) export   _pI2CHW_Temp_Write_BufHI
                                        (0065) 
                                        (0066)  pI2CHW_Temp_Write_BufHI:
                                        (0067) _pI2CHW_Temp_Write_BufHI:                    blk     1
                                        (0068) ENDIF
                                        (0069) ;-----------------------------------------------
                                        (0070) ; WARNING: The variable below is deprecated
                                        (0071) ; and has been replaced Write_BufLO
                                        (0072) ;-----------------------------------------------
                                        (0073)  pI2CHW_Temp_Write_Buf:
                                        (0074) _pI2CHW_Temp_Write_Buf:
                                        (0075) ;-----------------------------------------------
                                        (0076) ; END WARNING
                                        (0077) ;-----------------------------------------------
                                        (0078)  pI2CHW_Temp_Write_BufLO:
                                        (0079) _pI2CHW_Temp_Write_BufLO:                    blk      1
                                        (0080) 
                                        (0081) IF I2CHW_Temp_READ_FLASH
                                        (0082) export    pI2CHW_Temp_Read_BufHI
                                        (0083) export   _pI2CHW_Temp_Read_BufHI
                                        (0084) 
                                        (0085)  pI2CHW_Temp_Read_BufHI:
                                        (0086) _pI2CHW_Temp_Read_BufHI:                     blk     1
                                        (0087) ELSE
                                        (0088) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0089) export    pI2CHW_Temp_Read_BufHI
                                        (0090) export   _pI2CHW_Temp_Read_BufHI
                                        (0091) 
                                        (0092)  pI2CHW_Temp_Read_BufHI:
                                        (0093) _pI2CHW_Temp_Read_BufHI:                     blk     1
                                        (0094) ENDIF
                                        (0095) ENDIF
                                        (0096) 
                                        (0097) ;-----------------------------------------------
                                        (0098) ; WARNING: The variable below is deprecated
                                        (0099) ; and has been replaced Read_BufLO
                                        (0100) ;-----------------------------------------------
                                        (0101)  pI2CHW_Temp_Read_Buf:
                                        (0102) _pI2CHW_Temp_Read_Buf:
                                        (0103) ;-----------------------------------------------
                                        (0104) ; END WARNING
                                        (0105) ;-----------------------------------------------
                                        (0106)  pI2CHW_Temp_Read_BufLO:
                                        (0107) _pI2CHW_Temp_Read_BufLO:                     blk       1
                                        (0108) 
                                        (0109) IF I2CHW_Temp_READ_FLASH
                                        (0110) export    I2CHW_Temp_Read_CountHI
                                        (0111) export   _I2CHW_Temp_Read_CountHI
                                        (0112) 
                                        (0113)  I2CHW_Temp_Read_CountHI:
                                        (0114) _I2CHW_Temp_Read_CountHI:                    blk    1
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)  I2CHW_Temp_Read_Count:
                                        (0118) _I2CHW_Temp_Read_Count:                      blk      1
                                        (0119) 
                                        (0120) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0121) ;---------------------------------------------------
                                        (0122) ; Insert your custom declarations below this banner
                                        (0123) ;---------------------------------------------------
                                        (0124) 
                                        (0125) ;------------------------
                                        (0126) ; Includes
                                        (0127) ;------------------------
                                        (0128) 
                                        (0129) 	
                                        (0130) ;------------------------
                                        (0131) ;  Constant Definitions
                                        (0132) ;------------------------
                                        (0133) 
                                        (0134) 
                                        (0135) ;------------------------
                                        (0136) ; Variable Allocation
                                        (0137) ;------------------------
                                        (0138) 
                                        (0139) 
                                        (0140) ;---------------------------------------------------
                                        (0141) ; Insert your custom declarations above this banner
                                        (0142) ;---------------------------------------------------
                                        (0143) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0144) 
                                        (0145) 
                                        (0146) 
                                        (0147) AREA UserModules (ROM, REL)
                                        (0148) 
                                        (0149) 
                                        (0150) export _I2CHW_Temp_ISR
                                        (0151) ;;****************************************************
                                        (0152) ;; I2C_MASTER  main entry point from vector 60h
                                        (0153) ;;
                                        (0154) ;;****************************************************
                                        (0155) 
                                        (0156) 
                                        (0157) _I2CHW_Temp_ISR:
0B0D: 08       PUSH  A                  (0158)     push A
0B0E: 10       PUSH  X                  (0159)     push X
0B0F: 5D D3    MOV   A,REG[0xD3]        
0B11: 08       PUSH  A                  
                                        (0160) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0161)     REG_PRESERVE IDX_PP
                                        (0162) ENDIF
                                        (0163)     
                                        (0164)     ; Stop trap is not recommended because the stop bit cannot be cleared
                                        (0165)     ; User may choose to enable it
                                        (0166)     ; Add code to handle stop condition here
                                        (0167) 
0B12: 49 D7 08 TST   REG[0xD7],0x8      (0168)     tst reg[I2CHW_Temp_SCR], I2C_ADDRIN
0B15: A0 18    JZ    0x0B2E             (0169)     jz DataState
                                        (0170)     ;test for a start condition sent out, or bus error, ack from slave, or (lost arb & addr)
                                        (0171) AddrState:
0B17: 49 D9 01 TST   REG[0xD9],0x1      (0172)     tst reg[I2CHW_Temp_MSCR], I2CM_SNDSTRT
0B1A: B0 2F    JNZ   0x0B4A             (0173)     jnz NoStart
0B1C: 49 D7 02 TST   REG[0xD7],0x2      (0174)     tst reg[I2CHW_Temp_SCR], ( I2C_LST_BIT )               ;must be a zero or no slave answered
0B1F: B0 1E    JNZ   0x0B3E             (0175)     jnz SlaveAddrNAK
                                        (0176)                                                            ;slave must have acked here
                                        (0177)                                                            
0B21: 47 04 01 TST   [0x4],0x1          (0178)     tst [I2CHW_Temp_SlaveAddr], 01                         ;bit 0 = 1 then read (from slave and put it in RAM,
                                        (0179)                                                            ;bit 0 = 0 then write to slave and get it from RAM or Flash
0B24: B0 2E    JNZ   0x0B53             (0180)     jnz I2C_ReadSlave1stByte                               ;bit 0 was 1
0B26: 80 A7    JMP   0x0BCE             (0181)     jmp I2C_WriteSlave1stByte                              ;bit 0 was 0
0B28: 18       POP   A                  
0B29: 60 D3    MOV   REG[0xD3],A        
                                        (0182) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0183)     REG_RESTORE IDX_PP
                                        (0184) ENDIF
0B2B: 20       POP   X                  (0185)     pop X
0B2C: 18       POP   A                  (0186)     pop A
0B2D: 7E       RETI                     (0187)     reti
                                        (0188) 
                                        (0189) DataState:
0B2E: 2E 05 80 OR    [0x5],0x80         (0190)     or [I2CHW_Temp_RsrcStatus], I2CHW_ISR_ACTIVE
0B31: 47 04 01 TST   [0x4],0x1          (0191)     tst [I2CHW_Temp_SlaveAddr], 01                         ;bit 0 = 1 then read, bit 0 = 0 then write
0B34: B0 2D    JNZ   0x0B62             (0192)     jnz I2C_ReadSlave                                      ;bit 0 was 1
                                        (0193) 
                                        (0194) StillDataToWrite:
0B36: 80 9D    JMP   0x0BD4             (0195)     jmp I2C_WriteSlave                                     ;bit 0 was 0
0B38: 18       POP   A                  
0B39: 60 D3    MOV   REG[0xD3],A        
                                        (0196) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0197)     REG_RESTORE IDX_PP
                                        (0198) ENDIF
0B3B: 20       POP   X                  (0199)     pop X
0B3C: 18       POP   A                  (0200)     pop A
0B3D: 7E       RETI                     (0201)     reti
0B3E: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0202) 
                                        (0203) 
                                        (0204) SlaveAddrNAK:
                                        (0205)     ;;
                                        (0206)     ;; all there is to do here is to return, the slave didn't respond so it's not there or needs
                                        (0207)     ;; to be tried later.
                                        (0208)     ;;
                                        (0209) ;@PSoC_UserCode_BODY4@ (Do not change this line.)
                                        (0210) ;---------------------------------------------------
                                        (0211) ; Insert your custom code below this banner
                                        (0212) ; to modify the way a NAK from a slave is handled
                                        (0213) ; possibly set a user defined status
                                        (0214) ;---------------------------------------------------
                                        (0215) 
                                        (0216) ;********************************************************
                                        (0217) ; End user I2C Buffered WRITE (to RAM) Customization
                                        (0218) ;********************************************************
                                        (0219) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0220) ;
                                        (0221) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0222) ;
                                        (0223)     SetI2CHW_Temp_SCR 0     ;sets the tx/rx bit to receive, generates a stop without sending any data
                                        (0224) 
0B41: 26 05 7F AND   [0x5],0x7F         (0225)     and [I2CHW_Temp_RsrcStatus], ~I2CHW_ISR_ACTIVE
0B44: 18       POP   A                  
0B45: 60 D3    MOV   REG[0xD3],A        
                                        (0226) 
                                        (0227) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0228)     REG_RESTORE IDX_PP
                                        (0229) ENDIF
0B47: 20       POP   X                  (0230)     pop X
0B48: 18       POP   A                  (0231)     pop A
0B49: 7E       RETI                     (0232)     reti
                                        (0233) 
                                        (0234) NoStart:
                                        (0235)     ;here might test loss of arbitration and the presence of an address bit indicating that the
                                        (0236)     ;Master is being addressed as a slave.
                                        (0237)     ;;
                                        (0238)     ;; there may be a need to indicate that there was a Master transmission
                                        (0239)     ;; failure or an unsuccessful attempt.
                                        (0240)     ;;
0B4A: 26 05 7F AND   [0x5],0x7F         (0241)     and [I2CHW_Temp_RsrcStatus], ~I2CHW_ISR_ACTIVE
0B4D: 18       POP   A                  
0B4E: 60 D3    MOV   REG[0xD3],A        
                                        (0242) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0243)     REG_RESTORE IDX_PP
                                        (0244) ENDIF
0B50: 20       POP   X                  (0245)     pop X
0B51: 18       POP   A                  (0246)     pop A
0B52: 7E       RETI                     (0247)     reti
                                        (0248) 
                                        (0249) I2C_ReadSlave1stByte:
0B53: 2E 05 80 OR    [0x5],0x80         (0250)     or [I2CHW_Temp_RsrcStatus], I2CHW_ISR_ACTIVE
0B56: 26 05 FB AND   [0x5],0xFB         (0251)     and [I2CHW_Temp_RsrcStatus], ~I2CHW_RD_COMPLETE
0B59: 62 D7 00 MOV   REG[0xD7],0x0      
0B5C: 18       POP   A                  
0B5D: 60 D3    MOV   REG[0xD3],A        
                                        (0252) 
                                        (0253) ;read normal data in from slave immediately after the address is sent, there is no data to read
                                        (0254) ;but the bus is stalled at byte complete
                                        (0255) 
                                        (0256) ;
                                        (0257) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0258) ;
                                        (0259)     SetI2CHW_Temp_SCR 0     ;sets the tx/rx bit to receive, and clocks a byte in
                                        (0260) 
                                        (0261) 
                                        (0262) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0263)     REG_RESTORE IDX_PP
                                        (0264) ENDIF
0B5F: 20       POP   X                  (0265)     pop X
0B60: 18       POP   A                  (0266)     pop A
0B61: 7E       RETI                     (0267)     reti
                                        (0268) 
                                        (0269) I2C_ReadSlave:                                             ;this is just a normal read
                                        (0270) 
                                        (0271) 
                                        (0272) ;;code snipped from old SW I2C below
                                        (0273) ;
                                        (0274) ; MASTER READ from SLAVE
                                        (0275) ; (and writing to it's own RAM--Write_Buf and Write_Cnt)
                                        (0276) ;
                                        (0277) ;@PSoC_UserCode_BODY1_V1.2@ (Do not change this line.)
                                        (0278) ;---------------------------------------------------
                                        (0279) ; Insert your custom code below this banner
                                        (0280) ;---------------------------------------------------
                                        (0281) 
                                        (0282) ;********************************************************
                                        (0283) ; By modifying the section from here down to the next comment block
                                        (0284) ; a user could process data for a custom I2C Master Read (write to RAM) application
                                        (0285) ; NOTE: I2C handshakes (ACK/NAK may be effected by any introduced bugs)
                                        (0286) ;********************************************************
0B62: 47 03 04 TST   [0x3],0x4          (0287)    tst   [I2CHW_Temp_bStatus], fI2C_NAKnextWr
0B65: B0 14    JNZ   0x0B7A             (0288)    jnz   InStoreData
                                        (0289)    ;
                                        (0290)    ;process write data here
                                        (0291)    ;
0B67: 7A 06    DEC   [0x6]              (0292)    dec   [I2CHW_Temp_Write_Count]
0B69: C0 4F    JC    0x0BB9             (0293)    jc    CompleteRDXfer                                              ; carry set if value became -1
                                        (0294)    ;jz    InStoreData                                                                                             ;In theory overflow cant happen but stop the transaction anyway.
0B6B: 3C 06 00 CMP   [0x6],0x0          (0295)    cmp   [I2CHW_Temp_Write_Count], 00                                ;set nak flag, dec count, and store data
0B6E: A0 03    JZ    0x0B72             (0296)    jz    InNakNextByte
0B70: 80 06    JMP   0x0B77             (0297)    jmp   InNotBufEnd
                                        (0298) InNakNextByte:                                                       ;set the nakflag in I2CHW_Temp_bStatus
0B72: 2E 03 04 OR    [0x3],0x4          (0299)    or    [I2CHW_Temp_bStatus], fI2C_NAKnextWr
0B75: 80 04    JMP   0x0B7A             (0300)    jmp   InStoreData
                                        (0301) InNotBufEnd:
0B77: 26 03 FB AND   [0x3],0xFB         (0302)    and   [I2CHW_Temp_bStatus], ~fI2C_NAKnextWr                       ;clear the nak flag in case it was set from a previous operation
                                        (0303) InStoreData:
                                        (0304)    ;This is the ONLY place this bit is set  This bit should never be cleared by the isr ONLY by the API ClrWrStatus()
0B7A: 2E 05 10 OR    [0x5],0x10         (0305)    or    [I2CHW_Temp_RsrcStatus], I2CHW_WR_NOERR                     ;set current status
                                        (0306) IF SYSTEM_LARGE_MEMORY_MODEL
0B7D: 51 07    MOV   A,[0x7]            (0307)    mov   A, [pI2CHW_Temp_Write_BufHI]
0B7F: 60 D3    MOV   REG[0xD3],A        
                                        (0308) ENDIF
                                        (0309)    RAM_SETPAGE_IDX A
0B81: 58 08    MOV   X,[0x8]            (0310)    mov   X, [pI2CHW_Temp_Write_BufLO]
0B83: 5D D8    MOV   A,REG[0xD8]        (0311)    mov   A, reg[I2CHW_Temp_DR]
0B85: 70 3F    AND   F,0x3F             
0B87: 71 80    OR    F,0x80             
                                        (0312)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0B89: 54 00    MOV   [X+0],A            (0313)    mov   [X], A
0B8B: 70 3F    AND   F,0x3F             
0B8D: 71 00    OR    F,0x0              
                                        (0314)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0B8F: 76 08    INC   [0x8]              (0315)    inc   [pI2CHW_Temp_Write_BufLO]
                                        (0316) 
0B91: 47 03 04 TST   [0x3],0x4          (0317)    tst   [I2CHW_Temp_bStatus], fI2C_NAKnextWr
0B94: B0 0A    JNZ   0x0B9F             (0318)    jnz   NAK_this_one
0B96: 62 D7 10 MOV   REG[0xD7],0x10     
0B99: 18       POP   A                  
0B9A: 60 D3    MOV   REG[0xD3],A        
                                        (0319) 
                                        (0320) ;********************************************************
                                        (0321) ; End user I2C Buffered WRITE (to RAM) Customization
                                        (0322) ;********************************************************
                                        (0323) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0324) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0325) 
                                        (0326) ;
                                        (0327) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0328) ;
                                        (0329)     SetI2CHW_Temp_SCR I2C_ACKOUT                                     ;send Ack
                                        (0330) 
                                        (0331) 
                                        (0332) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0333)     REG_RESTORE IDX_PP
                                        (0334) ENDIF
0B9C: 20       POP   X                  (0335)     pop X
0B9D: 18       POP   A                  (0336)     pop A
0B9E: 7E       RETI                     (0337)     reti
                                        (0338) 
                                        (0339) NAK_this_one:
                                        (0340) 
0B9F: 26 03 FB AND   [0x3],0xFB         (0341)     and  [I2CHW_Temp_bStatus], ~fI2C_NAKnextWr
                                        (0342) 
                                        (0343)     ; *****
                                        (0344)     ; here we may need to look at the mode that this was called under
                                        (0345)     ; what does the user want done on the last byte.  Could be a send restart...
                                        (0346)     ; ******
0BA2: 26 05 F8 AND   [0x5],0xF8         (0347)     and   [I2CHW_Temp_RsrcStatus], ~0x07                             ;clear the read status bits
0BA5: 2E 05 01 OR    [0x5],0x1          (0348)     or    [I2CHW_Temp_RsrcStatus], I2CHW_RD_NOERR
0BA8: 2E 05 04 OR    [0x5],0x4          (0349)     or    [I2CHW_Temp_RsrcStatus], I2CHW_RD_COMPLETE
                                        (0350) 
0BAB: 26 03 03 AND   [0x3],0x3          (0351)     and [I2CHW_Temp_bStatus], (I2CHW_Temp_RepStart | I2CHW_Temp_NoStop)
0BAE: A0 0A    JZ    0x0BB9             (0352)     jz      CompleteRDXfer
0BB0: 26 05 7F AND   [0x5],0x7F         (0353)     and   [I2CHW_Temp_RsrcStatus], ~I2CHW_ISR_ACTIVE
0BB3: 18       POP   A                  
0BB4: 60 D3    MOV   REG[0xD3],A        
                                        (0354) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0355)     REG_RESTORE IDX_PP
                                        (0356) ENDIF
0BB6: 20       POP   X                  (0357)     pop X
0BB7: 18       POP   A                  (0358)     pop A
0BB8: 7E       RETI                     (0359)     reti
0BB9: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0360)     ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
                                        (0361)     ;The NAK (not I2C_SNDACK) bit in I2C_SCR below will automatically generate a stop
                                        (0362) 
                                        (0363) CompleteRDXfer:
                                        (0364) 
                                        (0365) ;
                                        (0366) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0367) ;
                                        (0368)     SetI2CHW_Temp_SCR 0                                              ;send Ack
                                        (0369) 
                                        (0370) 
0BBC: 26 05 7F AND   [0x5],0x7F         (0371)     and   [I2CHW_Temp_RsrcStatus], ~I2CHW_ISR_ACTIVE
0BBF: 18       POP   A                  
0BC0: 60 D3    MOV   REG[0xD3],A        
                                        (0372) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0373)     REG_RESTORE IDX_PP
                                        (0374) ENDIF
0BC2: 20       POP   X                  (0375)     pop X
0BC3: 18       POP   A                  (0376)     pop A
0BC4: 7E       RETI                     (0377)     reti                                                             ;return and wait for the next interrupt (on data)
0BC5: 62 D7 10 MOV   REG[0xD7],0x10     
0BC8: 18       POP   A                  
0BC9: 60 D3    MOV   REG[0xD3],A        
                                        (0378) 
                                        (0379) AckTheRead:
                                        (0380) 
                                        (0381) ;
                                        (0382) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0383) ;
                                        (0384)     SetI2CHW_Temp_SCR I2C_ACKOUT                                     ;send Ack
                                        (0385) 
                                        (0386) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0387)     REG_RESTORE IDX_PP
                                        (0388) ENDIF
0BCB: 20       POP   X                  (0389)     pop X
0BCC: 18       POP   A                  (0390)     pop A
0BCD: 7E       RETI                     (0391)     reti
                                        (0392) 
                                        (0393) 
                                        (0394) I2C_WriteSlave1stByte:
                                        (0395) ;write normal data to slave
0BCE: 26 05 BF AND   [0x5],0xBF         (0396)     and [I2CHW_Temp_RsrcStatus], ~I2CHW_WR_COMPLETE
0BD1: 2E 05 80 OR    [0x5],0x80         (0397)     or [I2CHW_Temp_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0398) 
                                        (0399) 
                                        (0400) I2C_WriteSlave:
                                        (0401) 
0BD4: 49 D7 02 TST   REG[0xD7],0x2      (0402)     tst reg[I2CHW_Temp_SCR], ( I2C_LST_BIT )               ;must be a zero or no slave answered
0BD7: B0 4C    JNZ   0x0C24             (0403)     jnz SlaveDataNAK
0BD9: 50 04    MOV   A,0x4              (0404)     mov A, (I2C_TX)
0BDB: 08       PUSH  A                  (0405)     push A
                                        (0406) 
                                        (0407) ;
                                        (0408) ;MASTER is WRITING TO SLAVE (& reading data from ram or flash buffer)
                                        (0409) ;
                                        (0410) ;;code snipped from SW I2C below
                                        (0411) 
                                        (0412) I2C_ObtainOutData:
                                        (0413) 
                                        (0414) 
                                        (0415) ;********************************************************
                                        (0416) ; here we need to get the next data to output (master-read)
                                        (0417) ; also set the status byte for use on exit
                                        (0418) ;********************************************************
                                        (0419) IF I2CHW_Temp_READ_FLASH
                                        (0420) ;@PSoC_UserCode_BODY2_V1.2@ (Do not change this line.)
                                        (0421) ;---------------------------------------------------
                                        (0422) ; Insert your custom code below this banner
                                        (0423) ; to modify the way a master might read non-volitile data
                                        (0424) ; to send.
                                        (0425) ;---------------------------------------------------
                                        (0426) 
                                        (0427)     tst  [I2CHW_Temp_RsrcStatus],I2CHW_READFLASH
                                        (0428)     jz   ReadOutData
                                        (0429) 
                                        (0430)     ;
                                        (0431)     ;get the data
                                        (0432)     ;
                                        (0433)     mov  X, [pI2CHW_Temp_Read_BufLO]
                                        (0434)     mov  A, [pI2CHW_Temp_Read_BufHI]
                                        (0435)     romx
                                        (0436)     mov  reg[I2CHW_Temp_DR],A
                                        (0437)     dec  [I2CHW_Temp_Read_Count]                                     ;calc addr lsb
                                        (0438)     jnc  NoDecHighCount
                                        (0439)     dec  [I2CHW_Temp_Read_CountHI]
                                        (0440) 
                                        (0441)     jc   MstrWRComplete
                                        (0442) 
                                        (0443) NoDecHighCount:
                                        (0444) 
                                        (0445)     inc  [pI2CHW_Temp_Read_BufLO]                                    ;set the next flash address to read
                                        (0446)     jnc  NoIncHiAddr
                                        (0447)     inc  [pI2CHW_Temp_Read_BufHI]
                                        (0448) NoIncHiAddr:
                                        (0449)    jmp   I2CNormalOutput
                                        (0450) ;
                                        (0451) ;****** THERE SHOULD BE NO WAY TO REACH THIS STATE WE'LL JUST TERMINATE THE ACTIVITY SINCE WERE THE MASTER
                                        (0452) ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
                                        (0453) ;
                                        (0454) ;FlashRdOverflow:
                                        (0455)     ;deal with the over flow cond by resending last data byte (dec the low addr)
                                        (0456) 
                                        (0457) ;   or    [I2CHW_Temp_RsrcStatus], I2CHW_RD_OVERFLOW
                                        (0458) ;                                                                      ;set count back to 0
                                        (0459) ;   mov   [I2CHW_Temp_Read_CountHI], 0                               ;functionally the same as incrementing ffff and less instructions
                                        (0460) ;   mov   [I2CHW_Temp_Read_Count], 0
                                        (0461) ;   jmp   I2CNormalRead
                                        (0462) 
                                        (0463) ;---------------------------------------------------
                                        (0464) ; Insert your custom code above this banner
                                        (0465) ;---------------------------------------------------
                                        (0466) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0467) 
                                        (0468) ENDIF
                                        (0469) ;@PSoC_UserCode_BODY3@ (Do not change this line.)
                                        (0470) ;---------------------------------------------------
                                        (0471) ; Insert your custom code below this banner
                                        (0472) ; to modify the way a master might read RAM data to send
                                        (0473) ; to an I2C device
                                        (0474) ; By replacing the section from here down to the next block
                                        (0475) ; a user could process data for a custom I2C READ application
                                        (0476) ;---------------------------------------------------
                                        (0477) ReadOutData:
                                        (0478)    ;read the current data byte
                                        (0479) IF SYSTEM_LARGE_MEMORY_MODEL
0BDC: 51 09    MOV   A,[0x9]            (0480)    mov   A, [pI2CHW_Temp_Read_BufHI]
0BDE: 60 D3    MOV   REG[0xD3],A        
                                        (0481) ENDIF
                                        (0482)    RAM_SETPAGE_IDX A
0BE0: 58 0A    MOV   X,[0xA]            (0483)    mov   X, [pI2CHW_Temp_Read_BufLO]
0BE2: 70 3F    AND   F,0x3F             
0BE4: 71 80    OR    F,0x80             
                                        (0484)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0BE6: 52 00    MOV   A,[X+0]            (0485)    mov   A, [X]
0BE8: 70 3F    AND   F,0x3F             
0BEA: 71 00    OR    F,0x0              
                                        (0486)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0BEC: 60 D8    MOV   REG[0xD8],A        (0487)    mov   reg[I2CHW_Temp_DR], A
0BEE: 7A 0B    DEC   [0xB]              (0488)    dec   [I2CHW_Temp_Read_Count]
                                        (0489) 
0BF0: C0 0E    JC    0x0BFF             (0490)    jc    MstrWRComplete
0BF2: 76 0A    INC   [0xA]              (0491)    inc   [pI2CHW_Temp_Read_BufLO]
0BF4: 80 01    JMP   0x0BF6             (0492)    jmp   I2CNormalOutput
                                        (0493) ;
                                        (0494) ;ram read overflow detected here, just resend the last location in the buffer
                                        (0495) ;
                                        (0496) ;********        THERE SHOULD BE NO WAY TO OVERFLOW FOR THIS CASE
                                        (0497) ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
                                        (0498) ;
                                        (0499) ;RamRDOverflow:
                                        (0500) ;   or    [I2CHW_Temp_RsrcStatus], I2CHW_RD_OVERFLOW
                                        (0501) ;   inc   [I2CHW_Temp_Read_Count]                                    ; set back to zero
                                        (0502) 
                                        (0503) ;---------------------------------------------------
                                        (0504) ; End user I2C MASTER WRITE TO SLAVE /READ buffer customization section
                                        (0505) ; Insert your custom code above this banner
                                        (0506) ;---------------------------------------------------
                                        (0507) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0508) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0509) I2CNormalOutput:
                                        (0510) 
                                        (0511)     ;load the bits to set in the I2C_ISR from the stack, The proper bit pattern was previously determined
                                        (0512)     ;and place there based on whether or not the previous transmission was our I2C address.
0BF6: 18       POP   A                  (0513)     pop   A
0BF7: 60 D7    MOV   REG[0xD7],A        
0BF9: 18       POP   A                  
0BFA: 60 D3    MOV   REG[0xD3],A        
                                        (0514) 
                                        (0515) ;
                                        (0516) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0517) ;
                                        (0518)     SetI2CHW_Temp_SCR A                                              ;Sets the I2C_TX bit in the I2C_SCR reg.
                                        (0519) 
                                        (0520) 
                                        (0521) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0522)     REG_RESTORE IDX_PP
                                        (0523) ENDIF
0BFC: 20       POP   X                  (0524)     pop X
0BFD: 18       POP   A                  (0525)     pop A
0BFE: 7E       RETI                     (0526)     reti ;return and wait for the next interrupt (on data)
                                        (0527) 
                                        (0528) MstrWRComplete:
0BFF: 26 05 8F AND   [0x5],0x8F         (0529)     and   [I2CHW_Temp_RsrcStatus], ~0x70                             ;clear the write status bits
0C02: 2E 05 40 OR    [0x5],0x40         (0530)     or    [I2CHW_Temp_RsrcStatus], I2CHW_WR_COMPLETE
0C05: 2E 05 10 OR    [0x5],0x10         (0531)     or    [I2CHW_Temp_RsrcStatus], I2CHW_WR_NOERR
                                        (0532) 
                                        (0533)     ; *****
                                        (0534)     ; here we may need to look at the mode that this was called under
                                        (0535)     ; what does the user want done on the last byte.  Could be a send restart...
                                        (0536)     ; ******
0C08: 26 03 03 AND   [0x3],0x3          (0537)     and [I2CHW_Temp_bStatus], (I2CHW_Temp_RepStart | I2CHW_Temp_NoStop)
0C0B: A0 0B    JZ    0x0C17             (0538)     jz      CompleteWRXfer
0C0D: 18       POP   A                  (0539)     pop  A                                                           ;clear the stack for return
0C0E: 26 05 7F AND   [0x5],0x7F         (0540)     and  [I2CHW_Temp_RsrcStatus], ~I2CHW_ISR_ACTIVE
0C11: 18       POP   A                  
0C12: 60 D3    MOV   REG[0xD3],A        
                                        (0541) 
                                        (0542) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0543)     REG_RESTORE IDX_PP
                                        (0544) ENDIF
0C14: 20       POP   X                  (0545)     pop X
0C15: 18       POP   A                  (0546)     pop A
0C16: 7E       RETI                     (0547)     reti
                                        (0548)     ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
                                        (0549)     ; The release of the I2C_TX bit in I2C_SCR below will automatically generate a stop
                                        (0550) 
                                        (0551) CompleteWRXfer:
                                        (0552) 
0C17: 18       POP   A                  (0553)     pop   A
0C18: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0554) 
                                        (0555) ;
                                        (0556) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0557) ;
                                        (0558)     SetI2CHW_Temp_SCR 0                                              ;this will release the bus and generate a stop condition
                                        (0559) 
0C1B: 26 05 7F AND   [0x5],0x7F         (0560)    and  [I2CHW_Temp_RsrcStatus], ~I2CHW_ISR_ACTIVE
0C1E: 18       POP   A                  
0C1F: 60 D3    MOV   REG[0xD3],A        
                                        (0561) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0562)    REG_RESTORE IDX_PP
                                        (0563) ENDIF
0C21: 20       POP   X                  (0564)    pop X
0C22: 18       POP   A                  (0565)    pop A
0C23: 7E       RETI                     (0566)    reti
                                        (0567) 
                                        (0568) SlaveDataNAK:
                                        (0569) ;must also fix up the data buffer.  While it is marginally safe to nak a byte as a slave and 
                                        (0570) ;store it.  It is NEVER safe as a master to notice that a written byte has been nak'ed by a 
                                        (0571) ;slave and fail to resend it.
                                        (0572) ;this piece of code fixes up the count and buffer that the master is using to get data from
                                        (0573) ;to re-transmit the byte when the next master write is done.
0C24: 76 0B    INC   [0xB]              (0574)     inc  [I2CHW_Temp_Read_Count]                          ;calc addr lsb
                                        (0575) IF I2CHW_Temp_READ_FLASH
                                        (0576)     jnc  NoIncHighCount
                                        (0577)     inc  [I2CHW_Temp_Read_CountHI]
                                        (0578) 
                                        (0579) NoIncHighCount:
                                        (0580) ENDIF
0C26: 7A 0A    DEC   [0xA]              (0581)     dec  [pI2CHW_Temp_Read_BufLO]                         ;set the next flash address to read
                                        (0582) IF SYSTEM_LARGE_MEMORY_MODEL
0C28: D0 03    JNC   0x0C2C             (0583)     jnc  NoDecHiAddr
0C2A: 7A 09    DEC   [0x9]              (0584)     dec  [pI2CHW_Temp_Read_BufHI]
0C2C: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0585) NoDecHiAddr:
                                        (0586) ELSE
                                        (0587) IF I2CHW_Temp_READ_FLASH
                                        (0588)     jnc  NoDecHiCAddr
                                        (0589)     dec  [pI2CHW_Temp_Read_BufHI]
                                        (0590) NoDecHiCAddr:
                                        (0591) ENDIF
                                        (0592) ENDIF
                                        (0593) 
                                        (0594) ;;
                                        (0595) ;; all there is to do here is to return & set status, the slave didn't want any more data
                                        (0596) ;;
                                        (0597) ; no pop needed because the nak is detected before the push happens above
                                        (0598) 
                                        (0599) ;
                                        (0600) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0601) ;
                                        (0602)     SetI2CHW_Temp_SCR 0                                              ;this will release the bus and generate a stop condition
                                        (0603) 
0C2F: 26 05 7F AND   [0x5],0x7F         (0604)     and [I2CHW_Temp_RsrcStatus], ~I2CHW_ISR_ACTIVE
0C32: 26 05 8F AND   [0x5],0x8F         (0605)     and   [I2CHW_Temp_RsrcStatus], ~0x70                             ;clear the write status bits
0C35: 2E 05 40 OR    [0x5],0x40         (0606)     or    [I2CHW_Temp_RsrcStatus], I2CHW_WR_COMPLETE
0C38: 2E 05 20 OR    [0x5],0x20         (0607)     or    [I2CHW_Temp_RsrcStatus], I2CHW_WR_OVERFLOW
0C3B: 18       POP   A                  
0C3C: 60 D3    MOV   REG[0xD3],A        
                                        (0608) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0609)     REG_RESTORE IDX_PP
                                        (0610) ENDIF
0C3E: 20       POP   X                  (0611)     pop X
0C3F: 18       POP   A                  (0612)     pop A
0C40: 7E       RETI                     (0613)    reti
                                        (0614) 
                                        (0615) STOPTRAP:
                                        (0616)     ;
                                        (0617)     ;   If interrupt on STOP condition is enabled:
                                        (0618)     ;   Add user code to process stop (not recommended becuase I2C bus is NOT stalled and ISR
                                        (0619)     ;   may block reception of ongoing transactions/addresses
                                        (0620)     ;   STOP condition is never detected when a repeat start is used by the master.
                                        (0621)     ;
0C41: 26 05 7F AND   [0x5],0x7F         (0622)     and [I2CHW_Temp_RsrcStatus], ~I2CHW_ISR_ACTIVE
0C44: 18       POP   A                  
0C45: 60 D3    MOV   REG[0xD3],A        
                                        (0623) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0624)     REG_RESTORE IDX_PP
                                        (0625) ENDIF
0C47: 20       POP   X                  (0626)     pop X
0C48: 18       POP   A                  (0627)     pop A
0C49: 7E       RETI                     (0628)     reti
                                        (0629) 
                                        (0630) ; end of file I2CHW_TempINT.asm
FILE: lib\i2chw_tempcommon.asm          (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHW_TempCommon.asm
                                        (0004) ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHW_TempCommon.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ; include instance specific register definitions
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) ;-----------------------------------------------
                                        (0031) ;  Global Symbols
                                        (0032) ;-----------------------------------------------
                                        (0033) ;-------------------------------------------------------------------
                                        (0034) ;  Declare the functions global for both assembler and C compiler.
                                        (0035) ;
                                        (0036) ;  Note that there are two names for each API. First name is
                                        (0037) ;  assembler reference. Name with underscore is name refence for
                                        (0038) ;  C compiler.  Calling function in C source code does not require
                                        (0039) ;  the underscore.
                                        (0040) ;-------------------------------------------------------------------
                                        (0041) 
                                        (0042) export    I2CHW_Temp_InitWrite
                                        (0043) export   _I2CHW_Temp_InitWrite
                                        (0044) export    I2CHW_Temp_InitRamRead
                                        (0045) export   _I2CHW_Temp_InitRamRead
                                        (0046) export    I2CHW_Temp_InitFlashRead
                                        (0047) export   _I2CHW_Temp_InitFlashRead
                                        (0048) export    I2CHW_Temp_bReadI2CStatus
                                        (0049) export   _I2CHW_Temp_bReadI2CStatus
                                        (0050) export    I2CHW_Temp_ClrRdStatus
                                        (0051) export   _I2CHW_Temp_ClrRdStatus
                                        (0052) export    I2CHW_Temp_ClrWrStatus
                                        (0053) export   _I2CHW_Temp_ClrWrStatus
                                        (0054) 
                                        (0055) 
                                        (0056) AREA UserModules (ROM, REL)
                                        (0057) 
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: I2CHW_Temp_InitWrite
                                        (0062) ;
                                        (0063) ;  DESCRIPTION:
                                        (0064) ;     Initializes a data buffer pointer for the slave to use to deposit data, and
                                        (0065) ;     zeroes the value of a count byte for the same buffer.
                                        (0066) ;
                                        (0067) ;-----------------------------------------------------------------------------
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  [SP-5]   -- count of bytes to write
                                        (0070) ;              [SP-4]   -- Hi order part of address Wrbuf
                                        (0071) ;              [SP-3]   -- Low order part of the address Wrbuf 
                                        (0072) ;
                                        (0073) ;  RETURNS:  none
                                        (0074) ;
                                        (0075) ;    Write Status bits are cleared
                                        (0076) ;
                                        (0077) ;  SIDE EFFECTS:
                                        (0078) ;    The A and X registers may be modified by this or future implementations
                                        (0079) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0080) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0081) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0082) ;    functions.
                                        (0083) ;          
                                        (0084) ;    Currently only the page pointer registers listed below are modified: 
                                        (0085) ;          CUR_PP
                                        (0086) ;
                                        (0087) ;    Write Status bits are cleared
                                        (0088) ;
                                        (0089) ;  THEORY of OPERATION or PROCEDURE:
                                        (0090) ;     The C compiler will always place a 0 (the upper order byte of the address pointer) in
                                        (0091) ;     the accumulator.  X register is the low order pointer.
                                        (0092) ;     IF a one byte buffer is established, set a flag to NAK the first written data byte.
                                        (0093) ;
                                        (0094) 
                                        (0095)  I2CHW_Temp_InitWrite:
                                        (0096) _I2CHW_Temp_InitWrite:
                                        (0097) 
                                        (0098) WrCnt:   equ -5
                                        (0099) WrBufHi: equ -4
                                        (0100) WrBufLo: equ -3
                                        (0101) 
                                        (0102) 	RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0103)     RAM_PROLOGUE RAM_USE_CLASS_2
0C4A: 10       PUSH  X                  (0104) 	push  X
0C4B: 4F       MOV   X,SP               (0105) 	mov   X, SP
0C4C: 79       DEC   X                  (0106)     dec   X                                                          ;set up the pointer for correct param access
0C4D: 08       PUSH  A                  (0107)     push  A
0C4E: 5D DE    MOV   A,REG[0xDE]        (0108)     mov   A, reg[I2CHW_Temp_INT_REG]
0C50: 08       PUSH  A                  (0109)     push  A                                                           ;preserve flags prior to disabling int
0C51: 41 DE FE AND   REG[0xDE],0xFE     
0C54: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0110)     M8C_DisableIntMask I2CHW_Temp_INT_REG, I2CHW_Temp_INT_MASK
                                        (0111) 
                                        (0112)     RAM_SETPAGE_CUR >I2CHW_Temp_bStatus						                        ;Set the Page Pointer for LMM
0C57: 26 03 FB AND   [0x3],0xFB         (0113)     and    [I2CHW_Temp_bStatus], ~fI2C_NAKnextWr                     ;reset the nak-next-written-byte flag.
                                        (0114) IF SYSTEM_LARGE_MEMORY_MODEL
0C5A: 52 FC    MOV   A,[X-4]            (0115)     mov   A, [X + WrBufHi]                                           ;move wrbuf addr to A
0C5C: 53 07    MOV   [0x7],A            (0116)     mov   [pI2CHW_Temp_Write_BufHI], A
                                        (0117) ENDIF
0C5E: 52 FD    MOV   A,[X-3]            (0118)     mov   A, [X + WrBufLo]                                           ;move wrbuf addr to A
0C60: 53 08    MOV   [0x8],A            (0119)     mov   [pI2CHW_Temp_Write_BufLO], A
0C62: 52 FB    MOV   A,[X-5]            (0120)     mov   A, [X + WrCnt]                                               ;move Write_count to A
0C64: 53 06    MOV   [0x6],A            (0121)     mov   [I2CHW_Temp_Write_Count], A
0C66: 39 01    CMP   A,0x1              (0122)     cmp   A, 01                                                        ;if data buffer is one byte long or less
0C68: A0 08    JZ    0x0C71             (0123)     jz    I2CHW_Temp_SetNak
0C6A: C0 06    JC    0x0C71             (0124)     jc    I2CHW_Temp_SetNak
0C6C: 26 05 8F AND   [0x5],0x8F         (0125)     and   [I2CHW_Temp_RsrcStatus], ~0x70                             ;clear the 0x10, 0x20 (Write status bits)
0C6F: 80 09    JMP   0x0C79             (0126)     jmp   I2Cs_1_ResetFlgs
                                        (0127) 
                                        (0128) I2CHW_Temp_SetNak:
0C71: 2E 03 04 OR    [0x3],0x4          (0129)     or    [I2CHW_Temp_bStatus], fI2C_NAKnextWr                       ;set the nak-next-written-byte flag.
0C74: 26 05 8F AND   [0x5],0x8F         (0130)     and   [I2CHW_Temp_RsrcStatus], ~0x70                             ; clear the 0x10, 0x20 (Write status bits)
0C77: 80 01    JMP   0x0C79             (0131)     jmp   I2Cs_1_ResetFlgs
                                        (0132) 
                                        (0133) I2Cs_1_ResetFlgs:
0C79: 18       POP   A                  (0134)     pop A
0C7A: 21 01    AND   A,0x1              (0135)     and A, I2CHW_Temp_INT_MASK                                                ; Only enable if it was previously enabled
0C7C: A0 04    JZ    0x0C81             (0136)     jz  . + 5
0C7E: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0137)     M8C_EnableIntMask I2CHW_Temp_INT_REG, I2CHW_Temp_INT_MASK
0C81: 18       POP   A                  (0138)     pop A
0C82: 20       POP   X                  (0139)     pop X
0C83: 70 3F    AND   F,0x3F             
0C85: 71 C0    OR    F,0xC0             
                                        (0140) 	RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0141)     RAM_EPILOGUE RAM_USE_CLASS_2
0C87: 7F       RET                      (0142)     ret
0C88: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0143) 
                                        (0144) .ENDSECTION
                                        (0145) 
                                        (0146) .SECTION
                                        (0147) ;-----------------------------------------------------------------------------
                                        (0148) ;  FUNCTION NAME: I2CHW_Temp_InitRamRead
                                        (0149) ;
                                        (0150) ;  DESCRIPTION:
                                        (0151) ;     Initializes a data buffer pointer for the slave to use to retrieve data from,
                                        (0152) ;     and zeroes the value of a count byte for the same buffer.
                                        (0153) ;
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:  [SP-5]  -- count of bytes to read
                                        (0157) ;              [SP-4]  -- Hi order part of addr to ReadBuf
                                        (0158) ;              [SP-3]  -- Low order part of the address to ReadBuf
                                        (0159) ;
                                        (0160) ;  RETURNS: none
                                        (0161) ;
                                        (0162) ;  SIDE EFFECTS:
                                        (0163) ;    The A and X registers may be modified by this or future implementations
                                        (0164) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0165) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0166) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0167) ;    functions.
                                        (0168) ;          
                                        (0169) ;    Currently only the page pointer registers listed below are modified: 
                                        (0170) ;          CUR_PP
                                        (0171) ;
                                        (0172) ;     Read Status bits are cleared
                                        (0173) ;
                                        (0174) ;  THEORY of OPERATION or PROCEDURE:
                                        (0175) ;     The C compiler will always place a 0 (the upper order byte of the address pointer) in
                                        (0176) ;     the accumulator.  X register is the low order pointer.
                                        (0177) ;
                                        (0178) 
                                        (0179)  I2CHW_Temp_InitRamRead:
                                        (0180) _I2CHW_Temp_InitRamRead:
                                        (0181) 
                                        (0182) RdCnt:     equ   -5
                                        (0183) RdBufHi:   equ   -4
                                        (0184) RdBufLo:   equ   -3
                                        (0185) 
                                        (0186)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0187) 	RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0188) 	RAM_SETPAGE_CUR >I2CHW_Temp_Read_Count
0C8B: 10       PUSH  X                  (0189)     push  X
0C8C: 4F       MOV   X,SP               (0190) 	mov   X, SP
0C8D: 79       DEC   X                  (0191)     dec   X                                                          ;set up the pointer for correct param access
0C8E: 08       PUSH  A                  (0192)     push  A
0C8F: 5D DE    MOV   A,REG[0xDE]        (0193)     mov   A, reg[I2CHW_Temp_INT_REG]
0C91: 08       PUSH  A                  (0194)     push  A                                                            ;preserve flags prior to disabling int
0C92: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0195)     M8C_DisableIntMask I2CHW_Temp_INT_REG, I2CHW_Temp_INT_MASK
                                        (0196) 
                                        (0197) IF SYSTEM_LARGE_MEMORY_MODEL
0C95: 52 FC    MOV   A,[X-4]            (0198)     mov   A, [X + RdBufHi]                                           ;move wrbuf addr to A
0C97: 53 09    MOV   [0x9],A            (0199)     mov   [pI2CHW_Temp_Read_BufHI], A
                                        (0200) ENDIF
0C99: 52 FD    MOV   A,[X-3]            (0201)     mov   A, [X + RdBufLo]                                             ; move rdbuf addr to A
0C9B: 53 0A    MOV   [0xA],A            (0202)     mov   [pI2CHW_Temp_Read_BufLO], A
0C9D: 52 FB    MOV   A,[X-5]            (0203)     mov   A, [X + RdCnt]                                               ; move RamRead_count to A
0C9F: 53 0B    MOV   [0xB],A            (0204)     mov   [I2CHW_Temp_Read_Count], A
0CA1: 7A 0B    DEC   [0xB]              (0205)     dec   [I2CHW_Temp_Read_Count]                                    ; since we decrement through zero...
0CA3: 26 05 F0 AND   [0x5],0xF0         (0206)     and   [I2CHW_Temp_RsrcStatus], ~0x0f                             ; clear the lower 4 (read status bits)
                                        (0207) 
0CA6: 18       POP   A                  (0208)     pop A
0CA7: 21 01    AND   A,0x1              (0209)     and A, I2CHW_Temp_INT_MASK                                                ; Only enable if it was previously enabled
0CA9: A0 04    JZ    0x0CAE             (0210)     jz  . + 5
0CAB: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0211)     M8C_EnableIntMask I2CHW_Temp_INT_REG, I2CHW_Temp_INT_MASK
0CAE: 18       POP   A                  (0212)     pop A
0CAF: 20       POP   X                  (0213)     pop X
0CB0: 70 3F    AND   F,0x3F             
0CB2: 71 C0    OR    F,0xC0             
                                        (0214) 
                                        (0215)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0216)     RAM_EPILOGUE RAM_USE_CLASS_2
0CB4: 7F       RET                      (0217)     ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) .SECTION
                                        (0222) ;-----------------------------------------------------------------------------
                                        (0223) ;  FUNCTION NAME: I2CHW_Temp_InitFlashRead
                                        (0224) ;
                                        (0225) ;  DESCRIPTION:
                                        (0226) ;     Initializes a flash data buffer pointer for the slave to use to retrieve
                                        (0227) ;     data from, and zeroes the value of a count byte for the same buffer.
                                        (0228) ;
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:  [SP-6]   -- Hi order part of flash Read count
                                        (0232) ;              [SP-5]   -- Low order part of flashRead counts
                                        (0233) ;              [SP-4]   -- Hi order part of the flash buf address
                                        (0234) ;              [SP-3]   -- Lo order part of flash buf address
                                        (0235) ;
                                        (0236) ;  RETURNS:
                                        (0237) ;
                                        (0238) ;  SIDE EFFECTS:
                                        (0239) ;    The A and X registers may be modified by this or future implementations
                                        (0240) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0241) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0242) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0243) ;    functions.
                                        (0244) ;          
                                        (0245) ;    Currently only the page pointer registers listed below are modified: 
                                        (0246) ;          CUR_PP
                                        (0247) ;
                                        (0248) ;    Read Status bits are cleared
                                        (0249) ;
                                        (0250) ;  THEORY of OPERATION or PROCEDURE:
                                        (0251) ;     The C compiler will place the upper order address of the buffer in Acc.
                                        (0252) ;     X register is the low order pointer.  A user module parameter is used to conserve code
                                        (0253) ;     if flash buffers are un-needed.  The API call is left defined and capable of returning in
                                        (0254) ;     either case
                                        (0255) ;
                                        (0256)  I2CHW_Temp_InitFlashRead:
                                        (0257) _I2CHW_Temp_InitFlashRead:
                                        (0258) 
                                        (0259) FlRdCntHI:     equ   -6
                                        (0260) FlRdCntLO:     equ   -5
                                        (0261) FlBufAdrHI:    equ   -4
                                        (0262) FlBufAdrLO:    equ   -3
                                        (0263) 
                                        (0264) IF I2CHW_Temp_READ_FLASH
                                        (0265)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0266)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0267)     RAM_SETPAGE_CUR >pI2CHW_Temp_Read_BufLO   
                                        (0268) 	push  X
                                        (0269) 	mov   X, SP
                                        (0270)     dec   X                                                            ;set up the pointer for correct param access
                                        (0271)     push  A
                                        (0272)     mov   A, reg[I2CHW_Temp_INT_REG]
                                        (0273)     push  A                                                            ;preserve flags prior to disabling int
                                        (0274)     M8C_DisableIntMask I2CHW_Temp_INT_REG, I2CHW_Temp_INT_MASK
                                        (0275) 
                                        (0276)     mov   A, [X + FlBufAdrLO]                                          ; move flrdbuf LOaddr to A
                                        (0277)     mov   [pI2CHW_Temp_Read_BufLO], A
                                        (0278)     mov   A, [X + FlBufAdrHI]                                          ; move flrdbuf HIaddr to A
                                        (0279)     mov   [pI2CHW_Temp_Read_BufHI], A
                                        (0280)     mov   A, [X + FlRdCntLO]                                           ; move flrdbuf LOcount to A
                                        (0281)     mov   [I2CHW_Temp_Read_Count], A
                                        (0282)     mov   A, [X + FlRdCntHI]                                           ; move flrdbuf HIcount to A
                                        (0283)     mov   [I2CHW_Temp_Read_CountHI], A
                                        (0284) 
                                        (0285)     dec   [I2CHW_Temp_Read_Count]                                    ; since this will count throu zero
                                        (0286)     jnc    . + 4                                                       ; only Read_CountHI if Read_Count rolled to 0xff
                                        (0287)     dec   [I2CHW_Temp_Read_CountHI]
                                        (0288) 
                                        (0289)     and   [I2CHW_Temp_RsrcStatus], ~0x07                             ; clear the lower 3 (read status bits)
                                        (0290)     or    [I2CHW_Temp_RsrcStatus],I2CHW_READFLASH                    ; set the flash status bit
                                        (0291) 
                                        (0292)     pop A
                                        (0293)     and A, I2CHW_Temp_INT_MASK                                                ; Only enable if it was previously enabled
                                        (0294)     jz  . + 5
                                        (0295)     M8C_EnableIntMask I2CHW_Temp_INT_REG, I2CHW_Temp_INT_MASK
                                        (0296)     pop A
                                        (0297) 	pop X
                                        (0298)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0299) 	RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0300) ENDIF
0CB5: 7F       RET                      (0301)     ret
0CB6: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0302) 
                                        (0303) .ENDSECTION
                                        (0304) 
                                        (0305) .SECTION
                                        (0306) ;-----------------------------------------------------------------------------
                                        (0307) ;  FUNCTION NAME: I2CHW_Temp_bReadI2CStatus
                                        (0308) ;
                                        (0309) ;  DESCRIPTION:
                                        (0310) ;     Returns the value in the the RsrcStatus variable.
                                        (0311) ;
                                        (0312) ;-----------------------------------------------------------------------------
                                        (0313) ;
                                        (0314) ;  ARGUMENTS:
                                        (0315) ;
                                        (0316) ;  RETURNS:
                                        (0317) ;     BYTE  bI2CStatus -  status data.  Use the following defined bits
                                        (0318) ;     returned in A.
                                        (0319) ;         I2CHW_RD_NOERR:                   equ 1
                                        (0320) ;         I2CHW_RD_OVERFLOW:                equ 2
                                        (0321) ;         I2CHW_RD_INCOMPLETE:              equ 4
                                        (0322) ;         I2CHW_READFLASH:                  equ 8
                                        (0323) ;         I2CHW_WR_NOERR:                   equ 10h
                                        (0324) ;         I2CHW_WR_OVERFLOW:                equ 20h
                                        (0325) ;         I2CHW_WR_COMPLETE:                equ 40h
                                        (0326) ;         I2CHW_ISR_ACTIVE:                 equ 80h
                                        (0327) ;
                                        (0328) ;  SIDE EFFECTS:
                                        (0329) ;    The A and X registers may be modified by this or future implementations
                                        (0330) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0331) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0332) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0333) ;    functions.
                                        (0334) ;          
                                        (0335) ;    Currently only the page pointer registers listed below are modified: 
                                        (0336) ;          CUR_PP
                                        (0337) ;          
                                        (0338)  I2CHW_Temp_bReadI2CStatus:
                                        (0339) _I2CHW_Temp_bReadI2CStatus:
                                        (0340)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0341) 	RAM_SETPAGE_CUR >I2CHW_Temp_RsrcStatus
0CB9: 51 05    MOV   A,[0x5]            (0342)     mov   A, [I2CHW_Temp_RsrcStatus]                                 ;return the status in A
                                        (0343)     RAM_EPILOGUE RAM_USE_CLASS_4
0CBB: 7F       RET                      (0344)     ret
0CBC: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0345) 
                                        (0346) .ENDSECTION
                                        (0347) 
                                        (0348) .SECTION
                                        (0349) ;-----------------------------------------------------------------------------
                                        (0350) ;  FUNCTION NAME: I2CHW_Temp_ClrRdStatus
                                        (0351) ;
                                        (0352) ;  DESCRIPTION:
                                        (0353) ;     Clears the Status bits in the Control/Status register, doesn't alter buffer
                                        (0354) ;     addresses or counts, leaves the Flash/Ram Read bit alone too
                                        (0355) ;
                                        (0356) ;-----------------------------------------------------------------------------
                                        (0357) ;
                                        (0358) ;  ARGUMENTS: none
                                        (0359) ;
                                        (0360) ;  RETURNS: none
                                        (0361) ;
                                        (0362) ;  SIDE EFFECTS:
                                        (0363) ;    The A and X registers may be modified by this or future implementations
                                        (0364) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0365) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0366) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0367) ;    functions.
                                        (0368) ;          
                                        (0369) ;    Currently only the page pointer registers listed below are modified: 
                                        (0370) ;          CUR_PP
                                        (0371) ;          
                                        (0372)  I2CHW_Temp_ClrRdStatus:
                                        (0373) _I2CHW_Temp_ClrRdStatus:
                                        (0374)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0375) 	RAM_SETPAGE_CUR >I2CHW_Temp_RsrcStatus
0CBF: 26 05 F8 AND   [0x5],0xF8         (0376)     and   [I2CHW_Temp_RsrcStatus], ~0x07                             ; clear the lower 3 (read status bits)
                                        (0377)     RAM_EPILOGUE RAM_USE_CLASS_4
0CC2: 7F       RET                      (0378)     ret
0CC3: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0379) 
                                        (0380) .ENDSECTION
                                        (0381) 
                                        (0382) .SECTION
                                        (0383) ;-----------------------------------------------------------------------------
                                        (0384) ;  FUNCTION NAME: I2CHW_Temp_ClrWrStatus
                                        (0385) ;
                                        (0386) ;  DESCRIPTION:
                                        (0387) ;     Clears the Status bits in the Control/Status register, doesn't alter buffer
                                        (0388) ;     addresses or counts, leaves the Flash/Ram Read bit alone too
                                        (0389) ;
                                        (0390) ;-----------------------------------------------------------------------------
                                        (0391) ;
                                        (0392) ;  ARGUMENTS: none
                                        (0393) ;
                                        (0394) ;  RETURNS: none
                                        (0395) ;
                                        (0396) ;  SIDE EFFECTS:
                                        (0397) ;    The A and X registers may be modified by this or future implementations
                                        (0398) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0399) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0400) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0401) ;    functions.
                                        (0402) ;          
                                        (0403) ;    Currently only the page pointer registers listed below are modified: 
                                        (0404) ;          CUR_PP
                                        (0405) ;          
                                        (0406)  I2CHW_Temp_ClrWrStatus:
                                        (0407) _I2CHW_Temp_ClrWrStatus:
                                        (0408)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0409) 	RAM_SETPAGE_CUR >I2CHW_Temp_RsrcStatus
0CC6: 26 05 8F AND   [0x5],0x8F         (0410)     and   [I2CHW_Temp_RsrcStatus], ~0x70                             ; clear bits 10,20 (write status bits)
                                        (0411)     RAM_EPILOGUE RAM_USE_CLASS_4
0CC9: 7F       RET                      (0412)     ret
                                        (0413) 
                                        (0414) .ENDSECTION
                                        (0415) ; End of File I2CHW_Temp.asm
FILE: lib\dualadc_1int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   DUALADC_1INT.asm
                                        (0004) ;;  Version: 2.30, Updated on 2015/3/4 at 22:26:9
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DualADC Interrupt Service Routines.
                                        (0008) ;;
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "DUALADC_1.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export _DUALADC_1_CNT1_ISR
                                        (0022) export _DUALADC_1_CNT2_ISR
                                        (0023) export _DUALADC_1_PWM16_ISR
                                        (0024) 
                                        (0025) export  DUALADC_1_cCounter1U
                                        (0026) export  DUALADC_1_cCounter2U
                                        (0027) export _DUALADC_1_iResult1
                                        (0028) export  DUALADC_1_iResult1
                                        (0029) export _DUALADC_1_iResult2
                                        (0030) export  DUALADC_1_iResult2
                                        (0031) export _DUALADC_1_bfStatus
                                        (0032) export  DUALADC_1_bfStatus
                                        (0033) export  DUALADC_1_bSampC
                                        (0034) 
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM, REL, CON)
                                        (0040) 
                                        (0041)  DUALADC_1_cCounter1U:     BLK   1  ;The Upper byte of the Counter
                                        (0042)  DUALADC_1_cCounter2U:     BLK   1  ;The Upper byte of the Counter
                                        (0043) _DUALADC_1_iResult1:
                                        (0044)  DUALADC_1_iResult1:       BLK   2  ;A/D value
                                        (0045) _DUALADC_1_iResult2:
                                        (0046)  DUALADC_1_iResult2:       BLK   2  ;A/D value
                                        (0047) _DUALADC_1_bfStatus:
                                        (0048)  DUALADC_1_bfStatus:       BLK   1  ;Data Valid Flag
                                        (0049)  DUALADC_1_bSampC:         BLK   1  ;# of times to run A/D
                                        (0050) 
                                        (0051) 
                                        (0052) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0053) ;---------------------------------------------------
                                        (0054) ; Insert your custom declarations below this banner
                                        (0055) ;---------------------------------------------------
                                        (0056) 
                                        (0057) ;------------------------
                                        (0058) ; Includes
                                        (0059) ;------------------------
                                        (0060) 
                                        (0061) 	
                                        (0062) ;------------------------
                                        (0063) ;  Constant Definitions
                                        (0064) ;------------------------
                                        (0065) 
                                        (0066) 
                                        (0067) ;------------------------
                                        (0068) ; Variable Allocation
                                        (0069) ;------------------------
                                        (0070) 
                                        (0071) 
                                        (0072) ;---------------------------------------------------
                                        (0073) ; Insert your custom declarations above this banner
                                        (0074) ;---------------------------------------------------
                                        (0075) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0076) 
                                        (0077) 
                                        (0078) ;-----------------------------------------------
                                        (0079) ;  EQUATES and TABLES
                                        (0080) ;-----------------------------------------------
                                        (0081) ; Constant Definitions
                                        (0082) LowByte:   equ 1
                                        (0083) HighByte:  equ 0
                                        (0084) 
                                        (0085) 
                                        (0086) AREA UserModules (ROM, REL)
                                        (0087) 
                                        (0088) 
                                        (0089) .LITERAL
                                        (0090) DUALADC_1MaxNegX4Table:
                                        (0091) ; Bits  7    8    9   10   11   12   13
                                        (0092)    DB  FFh, FEh, FCh, F8h, F0h, E0h, C0h
                                        (0093) 
                                        (0094) DUALADC_1MaxPosX4Table:
                                        (0095) IF (DUALADC_1_DATA_FORMAT)
                                        (0096) ; Bits (signed)    7    8    9   10   11   12   13
                                        (0097)               DB  01h, 02h, 04h, 08h, 10h, 20h, 40h
                                        (0098) ELSE
                                        (0099) ; Bits (unsigned)  7    8    9   10   11   12   13
                                        (0100)               DB  02h, 04h, 08h, 10h, 20h, 40h, 80h
                                        (0101) 
                                        (0102) ENDIF
                                        (0103) .ENDLITERAL
                                        (0104) 
                                        (0105) 
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) ;  FUNCTION NAME: _DUALADC_1_CNT1_ISR (Counter8 Interrupt)
                                        (0108) ;
                                        (0109) ;
                                        (0110) ;  DESCRIPTION:
                                        (0111) ;    Increment the upper (software) half on the counter whenever the
                                        (0112) ;    lower (hardware) half of the counter underflows.  This counter
                                        (0113) ;    should start out at the most negative value (0xFF).
                                        (0114) ;
                                        (0115) ;-----------------------------------------------------------------------------
                                        (0116) ;
                                        (0117) _DUALADC_1_CNT1_ISR:
0CD8: 76 0C    INC   [0xC]              (0118)    inc [DUALADC_1_cCounter1U]
                                        (0119)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0120)    ;---------------------------------------------------
                                        (0121)    ; Insert your custom assembly code below this banner
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ;   NOTE: interrupt service routines must preserve
                                        (0124)    ;   the values of the A and X CPU registers.
                                        (0125)    
                                        (0126)    ;---------------------------------------------------
                                        (0127)    ; Insert your custom assembly code above this banner
                                        (0128)    ;---------------------------------------------------
                                        (0129)    
                                        (0130)    ;---------------------------------------------------
                                        (0131)    ; Insert a lcall to a C function below this banner
                                        (0132)    ; and un-comment the lines between these banners
                                        (0133)    ;---------------------------------------------------
                                        (0134)    
                                        (0135)    ;PRESERVE_CPU_CONTEXT
                                        (0136)    ;lcall _My_C_Function
                                        (0137)    ;RESTORE_CPU_CONTEXT
                                        (0138)    
                                        (0139)    ;---------------------------------------------------
                                        (0140)    ; Insert a lcall to a C function above this banner
                                        (0141)    ; and un-comment the lines between these banners
                                        (0142)    ;---------------------------------------------------
                                        (0143)    ;@PSoC_UserCode_END@ (Do not change this line.)
0CDA: 7E       RETI                     (0144)    reti
                                        (0145) 
                                        (0146) 
                                        (0147) ;-----------------------------------------------------------------------------
                                        (0148) ;  FUNCTION NAME: _DUALADC_1_CNT2_ISR (Counter8 Interrupt)
                                        (0149) ;
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;  Increment the upper (software) half on the counter whenever the
                                        (0153) ;  lower (hardware) half of the counter underflows.  This counter
                                        (0154) ;  should start out at the most negative value (0xFF).
                                        (0155) ;
                                        (0156) ;-----------------------------------------------------------------------------
                                        (0157) ;
                                        (0158) _DUALADC_1_CNT2_ISR:
0CDB: 76 0D    INC   [0xD]              (0159)    inc [DUALADC_1_cCounter2U]
                                        (0160)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0161)    ;---------------------------------------------------
                                        (0162)    ; Insert your custom assembly code below this banner
                                        (0163)    ;---------------------------------------------------
                                        (0164)    ;   NOTE: interrupt service routines must preserve
                                        (0165)    ;   the values of the A and X CPU registers.
                                        (0166)    
                                        (0167)    ;---------------------------------------------------
                                        (0168)    ; Insert your custom assembly code above this banner
                                        (0169)    ;---------------------------------------------------
                                        (0170)    
                                        (0171)    ;---------------------------------------------------
                                        (0172)    ; Insert a lcall to a C function below this banner
                                        (0173)    ; and un-comment the lines between these banners
                                        (0174)    ;---------------------------------------------------
                                        (0175)    
                                        (0176)    ;PRESERVE_CPU_CONTEXT
                                        (0177)    ;lcall _My_C_Function
                                        (0178)    ;RESTORE_CPU_CONTEXT
                                        (0179)    
                                        (0180)    ;---------------------------------------------------
                                        (0181)    ; Insert a lcall to a C function above this banner
                                        (0182)    ; and un-comment the lines between these banners
                                        (0183)    ;---------------------------------------------------
                                        (0184)    ;@PSoC_UserCode_END@ (Do not change this line.)
0CDD: 7E       RETI                     (0185)    reti
                                        (0186) 
                                        (0187) 
                                        (0188) ;-----------------------------------------------------------------------------
                                        (0189) ;  FUNCTION NAME: _DUALADC_1_PWM16_ISR  (PWM16 Interrupt)
                                        (0190) ;
                                        (0191) ;  DESCRIPTION:
                                        (0192) ;  This ISR is called when the ADC has completed and integrate cycle.
                                        (0193) ;  The ADC value is calculated and stored in a global location before
                                        (0194) ;  the end of the ISR.
                                        (0195) ;
                                        (0196) ;-----------------------------------------------------------------------------
                                        (0197) ;
                                        (0198) _DUALADC_1_PWM16_ISR:
0CDE: 41 23 FE AND   REG[0x23],0xFE     (0199)    and   reg[DUALADC_1_bCounter1_CR0], ~DUALADC_1_fDBLK_ENABLE  ; Disable Counter
0CE1: 41 2F FE AND   REG[0x2F],0xFE     (0200)    and   reg[DUALADC_1_bCounter2_CR0], ~DUALADC_1_fDBLK_ENABLE  ; Disable Counter
                                        (0201) IF DUALADC_1_NoAZ
0CE4: 43 82 20 OR    REG[0x82],0x20     (0202)    or    reg[DUALADC_1_bfADC1cr2], DUALADC_1_fAutoZero     ; Put Integrator in AutoZero
0CE7: 43 86 20 OR    REG[0x86],0x20     (0203)    or    reg[DUALADC_1_bfADC2cr2], DUALADC_1_fAutoZero     ; Put Integrator in AutoZero
                                        (0204) ENDIF
0CEA: 43 83 10 OR    REG[0x83],0x10     (0205)    or   reg[DUALADC_1_bfADC1cr3],DUALADC_1_fFSW0           ; Put Integrator in reset
0CED: 43 87 10 OR    REG[0x87],0x10     (0206)    or   reg[DUALADC_1_bfADC2cr3],DUALADC_1_fFSW0           ; Put Integrator in reset
0CF0: 71 01    OR    F,0x1              
                                        (0207) 
                                        (0208)                                                            ; Enable interrupts for a short period of time just in case.
                                        (0209)                                                            ; Make sure we didn't have a counter interrupt ready to fire
                                        (0210)    M8C_EnableGInt
0CF2: 40       NOP                      (0211)    nop                                                     ; Wait a couple cycles
0CF3: 70 FE    AND   F,0xFE             
                                        (0212)    M8C_DisableGInt                                         ; Disable interrupt, read to complete processing
0CF5: 08       PUSH  A                  (0213)    push  A                                                 ; Save the Accumulator
                                        (0214) 
                                        (0215) 
                                        (0216)    ; Get ADC1 result
0CF6: 5D 20    MOV   A,REG[0x20]        (0217)    mov   A,reg[DUALADC_1_bCount1]                          ; Read counter value  (Bogus read puts value in Period register)
0CF8: 5D 22    MOV   A,REG[0x22]        (0218)    mov   A,reg[DUALADC_1_bCompare1]                        ; Read counter value
0CFA: 78       DEC   A                  (0219)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
0CFB: 73       CPL   A                  (0220)    cpl   A                                                 ; Invert the value
0CFC: D0 03    JNC   0x0D00             (0221)    jnc   DUALADC_1_INT_CALCV1                              ; if carry, then inc MSB as well
0CFE: 76 0C    INC   [0xC]              (0222)    inc   [DUALADC_1_cCounter1U]
                                        (0223) DUALADC_1_INT_CALCV1:
0D00: 53 0F    MOV   [0xF],A            (0224)    mov   [(DUALADC_1_iResult1 + LowByte)],A                ; Store LSB value
0D02: 51 0C    MOV   A,[0xC]            (0225)    mov   A, [DUALADC_1_cCounter1U]                         ; Store MSB from temp counter
0D04: 53 0E    MOV   [0xE],A            (0226)    mov   [(DUALADC_1_iResult1 + HighByte)],A
                                        (0227) 
                                        (0228)    ; Get ADC2 result
0D06: 5D 2C    MOV   A,REG[0x2C]        (0229)    mov   A,reg[DUALADC_1_bCount2]                          ; Read counter value  (Bogus read puts value in Period register)
0D08: 5D 2E    MOV   A,REG[0x2E]        (0230)    mov   A,reg[DUALADC_1_bCompare2]                        ; Read counter value
0D0A: 78       DEC   A                  (0231)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
0D0B: 73       CPL   A                  (0232)    cpl   A                                                 ; Invert the value
0D0C: D0 03    JNC   0x0D10             (0233)    jnc   DUALADC_1_INT_CALCV2                              ; if carry, then inc MSB as well
0D0E: 76 0D    INC   [0xD]              (0234)    inc   [DUALADC_1_cCounter2U]
                                        (0235) DUALADC_1_INT_CALCV2:
0D10: 53 11    MOV   [0x11],A           (0236)    mov   [(DUALADC_1_iResult2 + LowByte)],A                ; Store LSB value
0D12: 51 0D    MOV   A,[0xD]            (0237)    mov   A, [DUALADC_1_cCounter2U]                         ; Store MSB from temp counter
0D14: 53 10    MOV   [0x10],A           (0238)    mov   [(DUALADC_1_iResult2 + HighByte)],A
                                        (0239) 
                                        (0240)                                                            ; The new value has been stored,
                                        (0241)                                                            ; so get counters ready for next reading first.
0D16: 62 21 FF MOV   REG[0x21],0xFF     (0242)    mov   reg[DUALADC_1_bPeriod1], ffh                      ; Initialize counter1 to FF - Set to overflow after 256 counts
0D19: 62 2D FF MOV   REG[0x2D],0xFF     (0243)    mov   reg[DUALADC_1_bPeriod2], ffh                      ; Initialize counter2 to FF - Set to overflow after 256 counts
0D1C: 43 23 01 OR    REG[0x23],0x1      (0244)    or    reg[DUALADC_1_bCounter1_CR0],DUALADC_1_fDBLK_ENABLE  ; Enable Counter1
0D1F: 43 2F 01 OR    REG[0x2F],0x1      (0245)    or    reg[DUALADC_1_bCounter2_CR0],DUALADC_1_fDBLK_ENABLE  ; Enable Counter2
                                        (0246) 
                                        (0247) 
                                        (0248) IF (DUALADC_1_DATA_FORMAT)                                 ; Only check for Negative numbers if SIGNED result
                                        (0249)    mov   A, [DUALADC_1_bfStatus]                           ; Get Status with Resolution
                                        (0250)    and   A, DUALADC_1_bRES_MASK                            ; Mask of resolution
                                        (0251)    index DUALADC_1MaxNegX4Table                            ; Get Maximum negative value from table
                                        (0252)    mov   [DUALADC_1_cCounter1U], A                         ; Place result back into MSB of counter
                                        (0253)    mov   [DUALADC_1_cCounter2U], A                         ; Place result back into MSB of counter
                                        (0254) ELSE
0D22: 55 0C 00 MOV   [0xC],0x0          (0255)    mov   [DUALADC_1_cCounter1U], 00h                       ; Place result back into MSB of counter
0D25: 55 0D 00 MOV   [0xD],0x0          (0256)    mov   [DUALADC_1_cCounter2U], 00h                       ; Place result back into MSB of counter
                                        (0257) ENDIF
                                        (0258) 
                                        (0259)    ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                        (0260)    ;---------------------------------------------------
                                        (0261)    ; If the input is muxed with multiple inputs
                                        (0262)    ; this is a good place to change inputs.
                                        (0263)    ; Insert your custom code below this banner
                                        (0264)    ;---------------------------------------------------
                                        (0265)    ;   NOTE: interrupt service routines must preserve
                                        (0266)    ;   the values of the A and X CPU registers. At this
                                        (0267)    ;   point A has been preserved on the stack and will
                                        (0268)    ;   be restored before the return from interrupt.
                                        (0269)    ;   However, if you use the X register, you must
                                        (0270)    ;   preserve its value and restore it here.
                                        (0271) 
                                        (0272) 
                                        (0273)    ;---------------------------------------------------
                                        (0274)    ; Insert your custom code above this banner
                                        (0275)    ;---------------------------------------------------
                                        (0276)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0277) 
0D28: 41 83 EF AND   REG[0x83],0xEF     (0278)    and   reg[DUALADC_1_bfADC1cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
0D2B: 41 87 EF AND   REG[0x87],0xEF     (0279)    and   reg[DUALADC_1_bfADC2cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
                                        (0280) IF DUALADC_1_NoAZ
0D2E: 41 82 DF AND   REG[0x82],0xDF     (0281)    and   reg[DUALADC_1_bfADC1cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
0D31: 41 86 DF AND   REG[0x86],0xDF     (0282)    and   reg[DUALADC_1_bfADC2cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
                                        (0283) ENDIF
                                        (0284) 
                                        (0285) 
                                        (0286)    ;****************************************************************************
                                        (0287)    ;M8C_EnableGInt            ; May want to re-enable interrupts at this point,
                                        (0288)    ;                          ; if stack space isn't at a premium.
                                        (0289)    ; NOTE:  this will make system more responsive but, will increase the
                                        (0290)    ;        overall processing time of the A/D calctime.  If an interrupt is
                                        (0291)    ;        taken, it must return within the specified CalcTime to guarantee
                                        (0292)    ;        successful acquisition of the next byte.
                                        (0293)    ;****************************************************************************
                                        (0294) 
                                        (0295) ; ADC1
                                        (0296) IF (DUALADC_1_DATA_FORMAT)                       ; Only check for Negative numbers if SIGNED result
                                        (0297)                                                  ; Negative Overflow Check
                                        (0298)    tst   [(DUALADC_1_iResult1 + HighByte)],80h
                                        (0299)    jnz   DUALADC_1_NOT_2POVFL1
                                        (0300) 
                                        (0301) ENDIF
                                        (0302)                                                  ; Postive Overflow Check
                                        (0303)                                                  ; Get MSB of Max Positive value x4 + 1
0D34: 51 12    MOV   A,[0x12]           (0304)    mov   A,[DUALADC_1_bfStatus]                  ; Get Status with Resolution
0D36: 21 0F    AND   A,0xF              (0305)    and   A,DUALADC_1_bRES_MASK                   ; Mask of resolution normalized to 0
0D38: FF 97    INDEX 0x0CD1             (0306)    index DUALADC_1MaxPosX4Table                  ; Get Maximum positive value x4 + 1 from table
0D3A: 08       PUSH  A                  (0307)    push  A
0D3B: 22 0E    AND   A,[0xE]            (0308)    and   A, [(DUALADC_1_iResult1 + HighByte)]
0D3D: A0 0B    JZ    0x0D49             (0309)    jz    DUALADC_1_NOT_POVFL1
                                        (0310)                                                  ; Positive overflow, fix it - set to Max Positive + 1
0D3F: 18       POP   A                  (0311)    pop   A
0D40: 11 01    SUB   A,0x1              (0312)    sub   A, 01h
                                        (0313)                                                  ; Force most positive * 4 into result
0D42: 53 0E    MOV   [0xE],A            (0314)    mov   [(DUALADC_1_iResult1 + HighByte)], A
0D44: 55 0F FF MOV   [0xF],0xFF         (0315)    mov   [(DUALADC_1_iResult1 + LowByte)], ffh
0D47: 80 02    JMP   0x0D4A             (0316)    jmp   DUALADC_1_NOT_2POVFL1
                                        (0317) DUALADC_1_NOT_POVFL1:
0D49: 18       POP   A                  (0318)    pop   A
                                        (0319) 
                                        (0320) DUALADC_1_NOT_2POVFL1:
0D4A: 68 0E    ASR   [0xE]              (0321)    asr   [(DUALADC_1_iResult1 + HighByte)]       ; Shift MSB and LSB right twice to divide by four
0D4C: 6E 0F    RRC   [0xF]              (0322)    rrc   [(DUALADC_1_iResult1 + LowByte)]        ; Remember digital clock 4 times analog clock
0D4E: 68 0E    ASR   [0xE]              (0323)    asr   [(DUALADC_1_iResult1 + HighByte)]
0D50: 6E 0F    RRC   [0xF]              (0324)    rrc   [(DUALADC_1_iResult1 + LowByte)]
                                        (0325) 
                                        (0326) ; ADC2
                                        (0327) IF (DUALADC_1_DATA_FORMAT)                       ; Only check for Negative numbers if SIGNED result
                                        (0328)                                                  ; Negative Overflow Check
                                        (0329)    tst   [(DUALADC_1_iResult2 + HighByte)],80h
                                        (0330)    jnz   DUALADC_1_NOT_2POVFL2
                                        (0331) 
                                        (0332) ENDIF
                                        (0333)                                                  ; Postive Overflow Check
                                        (0334)                                                  ; Get MSB of Max Positive value x4 + 1
0D52: 51 12    MOV   A,[0x12]           (0335)    mov   A,[DUALADC_1_bfStatus]                  ; Get Status with Resolution
0D54: 21 0F    AND   A,0xF              (0336)    and   A,DUALADC_1_bRES_MASK                   ; Mask of resolution normalized to 0
0D56: FF 79    INDEX 0x0CD1             (0337)    index DUALADC_1MaxPosX4Table                  ; Get Maximum positive value x4 + 1 from table
0D58: 08       PUSH  A                  (0338)    push  A
0D59: 22 10    AND   A,[0x10]           (0339)    and   A, [(DUALADC_1_iResult2 + HighByte)]
0D5B: A0 0B    JZ    0x0D67             (0340)    jz    DUALADC_1_NOT_POVFL2
                                        (0341)                                                  ; Positive overflow, fix it - set to Max Positive + 1
0D5D: 18       POP   A                  (0342)    pop   A
0D5E: 11 01    SUB   A,0x1              (0343)    sub   A, 01h
                                        (0344)                                                  ; Force most positive * 4 into result
0D60: 53 10    MOV   [0x10],A           (0345)    mov   [(DUALADC_1_iResult2 + HighByte)], A
0D62: 55 11 FF MOV   [0x11],0xFF        (0346)    mov   [(DUALADC_1_iResult2 + LowByte)], ffh
0D65: 80 02    JMP   0x0D68             (0347)    jmp   DUALADC_1_NOT_2POVFL2
                                        (0348) DUALADC_1_NOT_POVFL2:
0D67: 18       POP   A                  (0349)    pop   A
                                        (0350) 
                                        (0351) DUALADC_1_NOT_2POVFL2:
0D68: 68 10    ASR   [0x10]             (0352)    asr   [(DUALADC_1_iResult2 + HighByte)]       ; Shift MSB and LSB right twice to divide by four
0D6A: 6E 11    RRC   [0x11]             (0353)    rrc   [(DUALADC_1_iResult2 + LowByte)]        ; Remember digital clock 4 times analog clock
0D6C: 68 10    ASR   [0x10]             (0354)    asr   [(DUALADC_1_iResult2 + HighByte)]
0D6E: 6E 11    RRC   [0x11]             (0355)    rrc   [(DUALADC_1_iResult2 + LowByte)]
                                        (0356) 
                                        (0357)    ;**********************************************
                                        (0358)    ; Data is ready at this point.
                                        (0359)    ; If processing Data at Interrupt level - add
                                        (0360)    ;     User Code to handle the data
                                        (0361)    ;**********************************************
                                        (0362)    ;@PSoC_UserCode_BODY_4@ (Do not change this line.)
                                        (0363)    ;---------------------------------------------------
                                        (0364)    ; Insert your custom code below this banner
                                        (0365)    ;---------------------------------------------------
                                        (0366)    ;   NOTE: interrupt service routines must preserve
                                        (0367)    ;   the values of the A and X CPU registers. At this
                                        (0368)    ;   point A has been preserved on the stack and wil
                                        (0369)    ;   be restored later. However, if you use X, be
                                        (0370)    ;   sure to take care of it yourself!
                                        (0371) 
                                        (0372) 
                                        (0373)    ;---------------------------------------------------
                                        (0374)    ; Insert your custom code above this banner
                                        (0375)    ;---------------------------------------------------
                                        (0376)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0377) 
0D70: 18       POP   A                  (0378)    pop   A                                       ; Restore A, not used any more
                                        (0379) 
0D71: 2E 12 10 OR    [0x12],0x10        (0380)    or    [DUALADC_1_bfStatus],DUALADC_1_fDATA_READY  ; Set Data ready bit
                                        (0381) 
0D74: 47 13 FF TST   [0x13],0xFF        (0382)    tst   [DUALADC_1_bSampC], ffh                 ; If sample_counter == 0 -->> continuous data collection
0D77: A0 23    JZ    0x0D9B             (0383)    jz    DUALADC_1_END_PWM16_ISR
                                        (0384) 
0D79: 7A 13    DEC   [0x13]             (0385)    dec   [DUALADC_1_bSampC]                      ; Dec sample counter and check for zero
0D7B: B0 1F    JNZ   0x0D9B             (0386)    jnz   DUALADC_1_END_PWM16_ISR
                                        (0387) 
0D7D: 41 27 FE AND   REG[0x27],0xFE     (0388)    and   reg[DUALADC_1_fPWM_LSB_CR0], ~DUALADC_1_fDBLK_ENABLE     ; Disable the PWM
                                        (0389) 
0D80: 41 23 FE AND   REG[0x23],0xFE     (0390)    and   reg[DUALADC_1_bCounter1_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter
0D83: 41 2F FE AND   REG[0x2F],0xFE     (0391)    and   reg[DUALADC_1_bCounter2_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter
                                        (0392) 
                                        (0393) IF DUALADC_1_NoAZ
0D86: 43 82 20 OR    REG[0x82],0x20     (0394)    or    reg[DUALADC_1_bfADC1cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
0D89: 43 86 20 OR    REG[0x86],0x20     (0395)    or    reg[DUALADC_1_bfADC2cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
                                        (0396) ENDIF
                                        (0397) 
0D8C: 43 83 10 OR    REG[0x83],0x10     (0398)    or    reg[DUALADC_1_bfADC1cr3], DUALADC_1_fFSW0             ; Put Integrator into reset
0D8F: 43 87 10 OR    REG[0x87],0x10     (0399)    or    reg[DUALADC_1_bfADC2cr3], DUALADC_1_fFSW0             ; Put Integrator into reset
                                        (0400) 
0D92: 41 E1 FB AND   REG[0xE1],0xFB     (0401)    and   reg[DUALADC_1_bfPWM16_INT_REG], ~DUALADC_1_bfPWM16_Mask      ; Disable interrupts
0D95: 41 E1 FE AND   REG[0xE1],0xFE     (0402)    and   reg[DUALADC_1_bfCounter1_INT_REG], ~DUALADC_1_bfCounter1_Mask
0D98: 41 E1 F7 AND   REG[0xE1],0xF7     (0403)    and   reg[DUALADC_1_bfCounter2_INT_REG], ~DUALADC_1_bfCounter2_Mask
                                        (0404) 
                                        (0405) DUALADC_1_END_PWM16_ISR:
0D9B: 7E       RETI                     (0406)    reti
                                        (0407) 
                                        (0408) DUALADC_1_APIINT_END:
FILE: lib\dualadc_1.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0D9C: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  DUALADC_1.asm
                                        (0004) ;;  Version: 2.30, Updated on 2015/3/4 at 22:26:9
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DualADC User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) include "DUALADC_1.inc"
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) 
                                        (0025) ;-----------------------------------------------
                                        (0026) ;  Global Symbols
                                        (0027) ;-----------------------------------------------
                                        (0028) 
                                        (0029) export  DUALADC_1_Start
                                        (0030) export _DUALADC_1_Start
                                        (0031) export  DUALADC_1_SetPower
                                        (0032) export _DUALADC_1_SetPower
                                        (0033) export  DUALADC_1_Stop
                                        (0034) export _DUALADC_1_Stop
                                        (0035) export  DUALADC_1_GetSamples
                                        (0036) export _DUALADC_1_GetSamples
                                        (0037) export  DUALADC_1_StopAD
                                        (0038) export _DUALADC_1_StopAD
                                        (0039) export  DUALADC_1_fIsData
                                        (0040) export _DUALADC_1_fIsData
                                        (0041) export  DUALADC_1_fIsDataAvailable
                                        (0042) export _DUALADC_1_fIsDataAvailable
                                        (0043) export  DUALADC_1_iGetData1
                                        (0044) export _DUALADC_1_iGetData1
                                        (0045) export  DUALADC_1_iGetData2
                                        (0046) export _DUALADC_1_iGetData2
                                        (0047) export  DUALADC_1_ClearFlag
                                        (0048) export _DUALADC_1_ClearFlag
                                        (0049) export  DUALADC_1_iGetData1ClearFlag
                                        (0050) export _DUALADC_1_iGetData1ClearFlag
                                        (0051) export  DUALADC_1_iGetData2ClearFlag
                                        (0052) export _DUALADC_1_iGetData2ClearFlag
                                        (0053) export  DUALADC_1_SetResolution
                                        (0054) export _DUALADC_1_SetResolution
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  EQUATES
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) ; Calctime parameters
                                        (0061) wCalcTime:     equ   DUALADC_1_bCALCTIME
                                        (0062) 
                                        (0063) ; Constants
                                        (0064) LowByte:       equ 1
                                        (0065) HighByte:      equ 0
                                        (0066) 
                                        (0067) AREA UserModules (ROM, REL)
                                        (0068) .SECTION
                                        (0069) ;-----------------------------------------------------------------------------
                                        (0070) ;  FUNCTION NAME: DUALADC_1_Start
                                        (0071) ;  FUNCTION NAME: DUALADC_1_SetPower
                                        (0072) ;
                                        (0073) ;  DESCRIPTION:
                                        (0074) ;  Applies power setting to the module's analog PSoc block.
                                        (0075) ;
                                        (0076) ;-----------------------------------------------------------------------------
                                        (0077) ;
                                        (0078) ;  ARGUMENTS:
                                        (0079) ;   A  Contains power level setting 0 to 3
                                        (0080) ;
                                        (0081) ;  RETURNS:  none
                                        (0082) ;
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;          
                                        (0090) ;    Currently only the page pointer registers listed below are modified: 
                                        (0091) ;          CUR_PP
                                        (0092) ;
                                        (0093) ;  THEORY of OPERATION or PROCEDURE:
                                        (0094) ;
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096)  DUALADC_1_Start:
                                        (0097) _DUALADC_1_Start:
                                        (0098)  DUALADC_1_SetPower:
                                        (0099) _DUALADC_1_SetPower:
                                        (0100)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0102)    RAM_SETPAGE_CUR >DUALADC_1_bfStatus
                                        (0103) 
0D9F: 21 03    AND   A,0x3              (0104)    and   A,DUALADC_1_bfPOWERMASK                     ; Mask only the valid power setting bits
0DA1: 4F       MOV   X,SP               (0105)    mov   X, SP                                       ; Get location of next location on stack
0DA2: 08       PUSH  A                  (0106)    push  A                                           ; Save power value on temp location
                                        (0107) 
                                        (0108)                                                      ; Set power for ADC1
0DA3: 5D 83    MOV   A,REG[0x83]        (0109)    mov   A, reg[DUALADC_1_bfADC1cr3]                 ; Get current value of ADC1cr3
0DA5: 21 FC    AND   A,0xFC             (0110)    and   A, ~DUALADC_1_bfPOWERMASK                   ; Mask off old power value
0DA7: 2B 00    OR    A,[X+0]            (0111)    or    A, [X]                                      ; OR in new power value
0DA9: 29 F0    OR    A,0xF0             (0112)    or    A, f0h                                      ; Make sure other register is set correctly
0DAB: 60 83    MOV   REG[0x83],A        (0113)    mov   reg[DUALADC_1_bfADC1cr3], A                 ; Reload CR with new power value
                                        (0114) 
                                        (0115)                                                      ; Set power for ADC2
0DAD: 5D 87    MOV   A,REG[0x87]        (0116)    mov   A, reg[DUALADC_1_bfADC2cr3]                 ; Get current value of ADC2cr3
0DAF: 21 FC    AND   A,0xFC             (0117)    and   A, ~DUALADC_1_bfPOWERMASK                   ; Mask off old power value
0DB1: 2B 00    OR    A,[X+0]            (0118)    or    A, [X]                                      ; OR in new power value
0DB3: 29 F0    OR    A,0xF0             (0119)    or    A, f0h                                      ; Make sure other register is set correctly
0DB5: 60 87    MOV   REG[0x87],A        (0120)    mov   reg[DUALADC_1_bfADC2cr3], A                 ; Reload CR with new power value
                                        (0121) 
0DB7: 49 82 01 TST   REG[0x82],0x1      (0122)    tst   reg[DUALADC_1_bfADC1cr2], DUALADC_1_fRES_SET
0DBA: A0 05    JZ    0x0DC0             (0123)    jz    .DoNotLoadRes
0DBC: 50 03    MOV   A,0x3              (0124)    mov   A,DUALADC_1_bNUMBITS - DUALADC_1_bMINRES               ; get and set the resolution
0DBE: 53 12    MOV   [0x12],A           (0125)    mov   [DUALADC_1_bfStatus], A              ; place it in the status variable
                                        (0126) .DoNotLoadRes:
                                        (0127) 
0DC0: 18       POP   A                  (0128)    pop   A                                           ; Restore the stack and power value
0DC1: 70 3F    AND   F,0x3F             
0DC3: 71 C0    OR    F,0xC0             
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0130)    RAM_EPILOGUE RAM_USE_CLASS_4
0DC5: 7F       RET                      (0131)    ret
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) .SECTION
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;  FUNCTION NAME: DUALADC_1_Stop
                                        (0137) ;
                                        (0138) ;  DESCRIPTION:
                                        (0139) ;  Removes power from the module's analog PSoc blocks, but the digital
                                        (0140) ;  blocks keep on running.
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS: None
                                        (0145) ;
                                        (0146) ;  RETURNS:   NA
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS:
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155)  DUALADC_1_Stop:
                                        (0156) _DUALADC_1_Stop:
                                        (0157)    RAM_PROLOGUE RAM_USE_CLASS_1
0DC6: 41 83 FC AND   REG[0x83],0xFC     (0158)    and   reg[DUALADC_1_bfADC1cr3], ~DUALADC_1_bfPOWERMASK
0DC9: 41 87 FC AND   REG[0x87],0xFC     (0159)    and   reg[DUALADC_1_bfADC2cr3], ~DUALADC_1_bfPOWERMASK
                                        (0160)    RAM_EPILOGUE RAM_USE_CLASS_1
0DCC: 7F       RET                      (0161)    ret
0DCD: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0162) .ENDSECTION
                                        (0163) 
                                        (0164) .SECTION
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;  FUNCTION NAME: DUALADC_1_Get_Samples
                                        (0167) ;
                                        (0168) ;  DESCRIPTION:
                                        (0169) ;  Starts the A/D convertor and will place data is memory.  A flag
                                        (0170) ;  is set whenever a new data value is available.
                                        (0171) ;
                                        (0172) ;-----------------------------------------------------------------------------
                                        (0173) ;
                                        (0174) ;  ARGUMENTS:
                                        (0175) ;  A  Number of samples to be taken.  A zero will cause the ADC to run
                                        (0176) ;     continuously.  A flag is set whenever a new data values are available.
                                        (0177) ;
                                        (0178) ;  RETURNS:  NA
                                        (0179) ;
                                        (0180) ;  SIDE EFFECTS:
                                        (0181) ;    The A and X registers may be modified by this or future implementations
                                        (0182) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0183) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0184) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0185) ;    functions.
                                        (0186) ;          
                                        (0187) ;    Currently only the page pointer registers listed below are modified: 
                                        (0188) ;          CUR_PP
                                        (0189) ;
                                        (0190)  DUALADC_1_GetSamples:
                                        (0191) _DUALADC_1_GetSamples:
                                        (0192)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0193)    RAM_SETPAGE_CUR >DUALADC_1_bSampC
0DD0: 53 13    MOV   [0x13],A           (0194)    mov   [DUALADC_1_bSampC], A                             ; Store sample count
                                        (0195)                                                            ; Interrupts, Put A/D in reset
0DD2: 51 12    MOV   A,[0x12]           (0196)    mov   A,[DUALADC_1_bfStatus]                            ; get and set the resolution
0DD4: 21 0F    AND   A,0xF              (0197)    and   A,DUALADC_1_bRES_MASK
0DD6: 01 07    ADD   A,0x7              (0198)    add   A,DUALADC_1_bMINRES
0DD8: 90 8C    CALL  _DUALADC_1_SetResolution(0199)    call  DUALADC_1_SetResolution
                                        (0200) 
                                        (0201) DUALADC_1_LoadMSBCounter:                                  ; The PWM has been setup by SetResolution, now set the upper
                                        (0202)                                                            ; counter which will be the same as the period.
                                        (0203)                                                            ; Reset MSB of counter to most negative value
                                        (0204) 
0DDA: 5D 2A    MOV   A,REG[0x2A]        (0205)    mov   A,reg[DUALADC_1_bPWM_IntTime_MSB]                 ; Get MSB of PWM and move it into RAM
0DDC: 53 0C    MOV   [0xC],A            (0206)    mov   [DUALADC_1_cCounter1U], A                         ; Use counter as temp location
0DDE: 50 00    MOV   A,0x0              (0207)    mov   A, 00h                                            ; Load A with zero for the calculation
0DE0: 12 0C    SUB   A,[0xC]            (0208)    sub   A, [DUALADC_1_cCounter1U]                         ; 0 - MSB_PWM = MSB_of_most_neg_value
0DE2: 67       ASR   A                  (0209)    asr   A                                                 ; Half the range (+ and -)
                                        (0210) IF (DUALADC_1_DATA_FORMAT)
                                        (0211)    mov   [DUALADC_1_cCounter1U], A                         ; Place result back into MSB of counter1
                                        (0212)    mov   [DUALADC_1_cCounter2U], A                         ; Place result back into MSB of counter2
                                        (0213) ELSE
0DE3: 55 0C 00 MOV   [0xC],0x0          (0214)    mov   [DUALADC_1_cCounter1U], 00h                       ; Always start at zero for unsigned values for ADC1
0DE6: 55 0D 00 MOV   [0xD],0x0          (0215)    mov   [DUALADC_1_cCounter2U], 00h                       ; Always start at zero for unsigned values for ADC2
                                        (0216) ENDIF
0DE9: 5D 26    MOV   A,REG[0x26]        (0217)    mov   A, reg[DUALADC_1_bPWM_IntTime_LSB]                ; Dummy Read  - required do not remove
0DEB: 62 21 FF MOV   REG[0x21],0xFF     (0218)    mov   reg[DUALADC_1_bPeriod1], FFh                      ; Make sure counter1 starts at FF
0DEE: 62 2D FF MOV   REG[0x2D],0xFF     (0219)    mov   reg[DUALADC_1_bPeriod2], FFh                      ; Make sure counter2 starts at FF
                                        (0220) 
0DF1: 41 83 EF AND   REG[0x83],0xEF     (0221)    and   reg[DUALADC_1_bfADC1cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
0DF4: 41 87 EF AND   REG[0x87],0xEF     (0222)    and   reg[DUALADC_1_bfADC2cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
                                        (0223) IF DUALADC_1_NoAZ
0DF7: 41 82 DF AND   REG[0x82],0xDF     (0224)     and  reg[DUALADC_1_bfADC1cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
0DFA: 41 86 DF AND   REG[0x86],0xDF     (0225)     and  reg[DUALADC_1_bfADC2cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
                                        (0226) ENDIF
                                        (0227) 
0DFD: 43 23 05 OR    REG[0x23],0x5      (0228)    or    reg[DUALADC_1_bCounter1_CR0], (DUALADC_1_fDBLK_ENABLE|DUALADC_1_fPULSE_WIDE)   ; Enable the Counter
0E00: 43 2F 05 OR    REG[0x2F],0x5      (0229)    or    reg[DUALADC_1_bCounter2_CR0], (DUALADC_1_fDBLK_ENABLE|DUALADC_1_fPULSE_WIDE)   ; Enable the Counter
0E03: 43 27 01 OR    REG[0x27],0x1      (0230)    or    reg[DUALADC_1_fPWM_LSB_CR0], DUALADC_1_fDBLK_ENABLE          ; Enable PWM
0E06: 43 E1 04 OR    REG[0xE1],0x4      (0231)    or    reg[DUALADC_1_bfPWM16_INT_REG], DUALADC_1_bfPWM16_Mask      ; Enable PWM and Counter interrupts
0E09: 43 E1 01 OR    REG[0xE1],0x1      (0232)    or    reg[DUALADC_1_bfCounter1_INT_REG], DUALADC_1_bfCounter1_Mask
0E0C: 43 E1 08 OR    REG[0xE1],0x8      (0233)    or    reg[DUALADC_1_bfCounter2_INT_REG], DUALADC_1_bfCounter2_Mask
                                        (0234) 
0E0F: 7F       RET                      (0235)    ret
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0237) .ENDSECTION
                                        (0238) 
                                        (0239) .SECTION
                                        (0240) ;-----------------------------------------------------------------------------
                                        (0241) ;  FUNCTION NAME: DUALADC_1_StopAD
                                        (0242) ;
                                        (0243) ;  DESCRIPTION:
                                        (0244) ;  Completely shuts down the A/D is an orderly manner.  Both the
                                        (0245) ;  Timer and Counter are disabled and their interrupts are deactivated.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS:  None
                                        (0250) ;
                                        (0251) ;  RETURNS: NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;     The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  DUALADC_1_StopAD:
                                        (0261) _DUALADC_1_StopAD:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
0E10: 41 27 FE AND   REG[0x27],0xFE     (0263)    and   reg[DUALADC_1_fPWM_LSB_CR0], ~DUALADC_1_fDBLK_ENABLE     ; Disable the PWM
                                        (0264) 
0E13: 41 23 FE AND   REG[0x23],0xFE     (0265)    and   reg[DUALADC_1_bCounter1_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter
0E16: 41 2F FE AND   REG[0x2F],0xFE     (0266)    and   reg[DUALADC_1_bCounter2_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter
                                        (0267) 
                                        (0268) IF DUALADC_1_NoAZ
0E19: 43 82 20 OR    REG[0x82],0x20     (0269)    or    reg[DUALADC_1_bfADC1cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
0E1C: 43 86 20 OR    REG[0x86],0x20     (0270)    or    reg[DUALADC_1_bfADC2cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
                                        (0271) ENDIF
                                        (0272) 
0E1F: 43 83 10 OR    REG[0x83],0x10     (0273)    or   reg[DUALADC_1_bfADC1cr3], DUALADC_1_fFSW0              ; Put Integrator into reset
0E22: 43 87 10 OR    REG[0x87],0x10     (0274)    or   reg[DUALADC_1_bfADC2cr3], DUALADC_1_fFSW0              ; Put Integrator into reset
                                        (0275) 
0E25: 08       PUSH  A                  (0276)    push A
0E26: 41 E1 FB AND   REG[0xE1],0xFB     
0E29: 41 E1 FE AND   REG[0xE1],0xFE     
0E2C: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0277)    M8C_DisableIntMask DUALADC_1_bfPWM16_INT_REG, DUALADC_1_bfPWM16_Mask      ; Disable interrupts
                                        (0278)    M8C_DisableIntMask DUALADC_1_bfCounter1_INT_REG, DUALADC_1_bfCounter1_Mask
                                        (0279)    M8C_DisableIntMask DUALADC_1_bfCounter2_INT_REG, DUALADC_1_bfCounter1_Mask
0E2F: 18       POP   A                  (0280)    pop  A
                                        (0281)    
                                        (0282)    RAM_EPILOGUE RAM_USE_CLASS_1
0E30: 7F       RET                      (0283)    ret
0E31: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0284) .ENDSECTION
                                        (0285) 
                                        (0286) .SECTION
                                        (0287) ;-----------------------------------------------------------------------------
                                        (0288) ;  FUNCTION NAME: DUALADC_1_fIsData
                                        (0289) ;  FUNCTION NAME: DUALADC_1_fIsDataAvailable
                                        (0290) ;
                                        (0291) ;  DESCRIPTION:
                                        (0292) ;  Returns the status of the A/D Data is set whenever a new data
                                        (0293) ;  value is available.
                                        (0294) ;
                                        (0295) ;-----------------------------------------------------------------------------
                                        (0296) ;
                                        (0297) ;  ARGUMENTS: None
                                        (0298) ;
                                        (0299) ;  RETURNS:
                                        (0300) ;  A  Returns data status  A == 0 no data available
                                        (0301) ;                          A != 0 data available
                                        (0302) ;
                                        (0303) ;  SIDE EFFECTS:
                                        (0304) ;    The A and X registers may be modified by this or future implementations
                                        (0305) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0306) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0307) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0308) ;    functions.
                                        (0309) ;          
                                        (0310) ;    Currently only the page pointer registers listed below are modified:
                                        (0311) ;          CUR_PP
                                        (0312) ;
                                        (0313)  DUALADC_1_fIsData:
                                        (0314) _DUALADC_1_fIsData:
                                        (0315)  DUALADC_1_fIsDataAvailable:
                                        (0316) _DUALADC_1_fIsDataAvailable:
                                        (0317)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0318)    RAM_SETPAGE_CUR >DUALADC_1_bfStatus
0E34: 51 12    MOV   A,[0x12]           (0319)    mov   A, [DUALADC_1_bfStatus]                      ; Get status byte
0E36: 21 10    AND   A,0x10             (0320)    and   A, DUALADC_1_fDATA_READY                     ; Mask off other bits
                                        (0321)    RAM_EPILOGUE RAM_USE_CLASS_4
0E38: 7F       RET                      (0322)    ret
0E39: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0323) .ENDSECTION
                                        (0324) 
                                        (0325) .SECTION
                                        (0326) ;-----------------------------------------------------------------------------
                                        (0327) ;  FUNCTION NAME: DUALADC_1_iGetData1ClearFlag
                                        (0328) ;  FUNCTION NAME: DUALADC_1_iGetData1
                                        (0329) ;
                                        (0330) ;  DESCRIPTION:
                                        (0331) ;  Returns the data from channel-1 of A/D.  Does not check if data is available.
                                        (0332) ;  iGetData1ClearFlag clears the result ready flag as well.
                                        (0333) ;
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;
                                        (0336) ;  ARGUMENTS: None
                                        (0337) ;
                                        (0338) ;  RETURNS:
                                        (0339) ;    A  Contains the LSB of the 16 bit result
                                        (0340) ;    X  Contains the MSB of the 16 bit result
                                        (0341) ;
                                        (0342) ;  SIDE EFFECTS:
                                        (0343) ;    The A and X registers may be modified by this or future implementations
                                        (0344) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0345) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0346) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0347) ;    functions.
                                        (0348) ;          
                                        (0349) ;    Currently only the page pointer registers listed below are modified:
                                        (0350) ;          CUR_PP
                                        (0351) ;
                                        (0352)  DUALADC_1_iGetData1ClearFlag:
                                        (0353) _DUALADC_1_iGetData1ClearFlag:
                                        (0354)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0355)    RAM_SETPAGE_CUR >DUALADC_1_iResult1 
0E3C: 26 12 EF AND   [0x12],0xEF        (0356)    and   [DUALADC_1_bfStatus], ~DUALADC_1_fDATA_READY  ; Clear Data ready bit
0E3F: 58 0E    MOV   X,[0xE]            (0357)    mov   X, [(DUALADC_1_iResult1 + HighByte)]
0E41: 51 0F    MOV   A,[0xF]            (0358)    mov   A, [(DUALADC_1_iResult1 + LowByte)]
                                        (0359)    RAM_EPILOGUE RAM_USE_CLASS_4
0E43: 7F       RET                      (0360)    ret
0E44: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0361) 
                                        (0362)  DUALADC_1_iGetData1:
                                        (0363) _DUALADC_1_iGetData1:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >DUALADC_1_iResult1  
0E47: 58 0E    MOV   X,[0xE]            (0366)    mov   X, [(DUALADC_1_iResult1 + HighByte)]
0E49: 51 0F    MOV   A,[0xF]            (0367)    mov   A, [(DUALADC_1_iResult1 + LowByte)]
                                        (0368)    RAM_EPILOGUE RAM_USE_CLASS_4
0E4B: 7F       RET                      (0369)    ret
0E4C: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0370) .ENDSECTION
                                        (0371) 
                                        (0372) .SECTION
                                        (0373) ;-----------------------------------------------------------------------------
                                        (0374) ;  FUNCTION NAME: DUALADC_1_iGetData2ClearFlag
                                        (0375) ;  FUNCTION NAME: DUALADC_1_iGetData2
                                        (0376) ;
                                        (0377) ;  DESCRIPTION:
                                        (0378) ;  Returns the data from channel-1 of A/D.  Does not check if data is available.
                                        (0379) ;  iGetData1ClearFlag clears the result ready flag as well.
                                        (0380) ;
                                        (0381) ;-----------------------------------------------------------------------------
                                        (0382) ;
                                        (0383) ;  ARGUMENTS: None
                                        (0384) ;
                                        (0385) ;  RETURNS:
                                        (0386) ;    A  Contains the LSB of the 16 bit result
                                        (0387) ;    X  Contains the MSB of the 16 bit result
                                        (0388) ;
                                        (0389) ;  SIDE EFFECTS:
                                        (0390) ;    The A and X registers may be modified by this or future implementations
                                        (0391) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0392) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0393) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0394) ;    functions.
                                        (0395) ;          
                                        (0396) ;    Currently only the page pointer registers listed below are modified:
                                        (0397) ;          CUR_PP
                                        (0398) ;
                                        (0399)  DUALADC_1_iGetData2ClearFlag:
                                        (0400) _DUALADC_1_iGetData2ClearFlag:
                                        (0401)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0402)    RAM_SETPAGE_CUR >DUALADC_1_iResult1  
0E4F: 26 12 EF AND   [0x12],0xEF        (0403)    and   [DUALADC_1_bfStatus], ~DUALADC_1_fDATA_READY  ; Clear Data ready bit
0E52: 58 10    MOV   X,[0x10]           (0404)    mov   X, [(DUALADC_1_iResult2 + HighByte)]
0E54: 51 11    MOV   A,[0x11]           (0405)    mov   A, [(DUALADC_1_iResult2 + LowByte)]
                                        (0406)    RAM_EPILOGUE RAM_USE_CLASS_4
0E56: 7F       RET                      (0407)    ret
0E57: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0408) 
                                        (0409)  DUALADC_1_iGetData2:
                                        (0410) _DUALADC_1_iGetData2:
                                        (0411)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0412)    RAM_SETPAGE_CUR >DUALADC_1_iResult1  
0E5A: 58 10    MOV   X,[0x10]           (0413)    mov   X, [(DUALADC_1_iResult2 + HighByte)]
0E5C: 51 11    MOV   A,[0x11]           (0414)    mov   A, [(DUALADC_1_iResult2 + LowByte)]
                                        (0415)    RAM_EPILOGUE RAM_USE_CLASS_4
0E5E: 7F       RET                      (0416)    ret
0E5F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0417) .ENDSECTION
                                        (0418) 
                                        (0419) .SECTION
                                        (0420) ;-----------------------------------------------------------------------------
                                        (0421) ;  FUNCTION NAME: DUALADC_1_ClearFlag
                                        (0422) ;
                                        (0423) ;  DESCRIPTION:
                                        (0424) ;  Clears the data ready flag.
                                        (0425) ;
                                        (0426) ;-----------------------------------------------------------------------------
                                        (0427) ;
                                        (0428) ;  ARGUMENTS: None
                                        (0429) ;
                                        (0430) ;  RETURNS: NA
                                        (0431) ;
                                        (0432) ;  SIDE EFFECTS:
                                        (0433) ;    The A and X registers may be modified by this or future implementations
                                        (0434) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0435) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0436) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0437) ;    functions.
                                        (0438) ;          
                                        (0439) ;    Currently only the page pointer registers listed below are modified:
                                        (0440) ;          CUR_PP
                                        (0441) ;
                                        (0442)  DUALADC_1_ClearFlag:
                                        (0443) _DUALADC_1_ClearFlag:
                                        (0444)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0445)    RAM_SETPAGE_CUR >DUALADC_1_bfStatus  
0E62: 26 12 EF AND   [0x12],0xEF        (0446)    and   [DUALADC_1_bfStatus], ~DUALADC_1_fDATA_READY  ; Clear Data ready bit
                                        (0447)    RAM_EPILOGUE RAM_USE_CLASS_4
0E65: 7F       RET                      (0448)    ret
0E66: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: DUALADC_1_SetResolution
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;  Sets A/D resolution between 7 and 13 bits.
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;  A  Passes the number of bits of resolution, between 7 and 13.
                                        (0462) ;
                                        (0463) ;  RETURNS:  NA
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475) ;    This function halts the PWM and the counter to sync the A/D , but
                                        (0476) ;    does not re-enable the counter or PWM. To restart the A/D, "Get_Samples"
                                        (0477) ;    should be called. It sets the resolution for both channels at the
                                        (0478) ;    same time.
                                        (0479) ;
                                        (0480)  DUALADC_1_SetResolution:
                                        (0481) _DUALADC_1_SetResolution:
                                        (0482)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0483)    RAM_SETPAGE_CUR >DUALADC_1_bfStatus  
                                        (0484) 
0E69: 41 82 FE AND   REG[0x82],0xFE     (0485)    and   reg[DUALADC_1_bfADC1cr2], ~DUALADC_1_fRES_SET
                                        (0486)    
0E6C: 9F A2    CALL  _DUALADC_1_StopAD  (0487)    call  DUALADC_1_StopAD                          ; Stop the A/D if it is running
0E6E: 55 12 00 MOV   [0x12],0x0         (0488)    mov   [DUALADC_1_bfStatus], 00h                 ; and clear status and old resolution
                                        (0489) 
                                        (0490)                                                    ; Check for resolution to be within min and max values
0E71: 39 07    CMP   A,0x7              (0491)    cmp   A,DUALADC_1_bMINRES                       ; Check low end of resolution
0E73: D0 05    JNC   0x0E79             (0492)    jnc   DUALADC_1_CHECKHI
0E75: 50 07    MOV   A,0x7              (0493)    mov   A,DUALADC_1_bMINRES                       ; Too low - load legal low value
0E77: 80 07    JMP   0x0E7F             (0494)    jmp   DUALADC_1_RES_OK
                                        (0495) 
                                        (0496) DUALADC_1_CHECKHI:                                 ; Check high end of resolution
0E79: 39 0D    CMP   A,0xD              (0497)    cmp   A,DUALADC_1_bMAXRES
0E7B: C0 03    JC    0x0E7F             (0498)    jc    DUALADC_1_RES_OK
0E7D: 50 0D    MOV   A,0xD              (0499)    mov   A,DUALADC_1_bMAXRES                       ; Too high - load legal Max value
                                        (0500) 
                                        (0501) DUALADC_1_RES_OK:
                                        (0502)                                                    ; Calculate compare value for the PWM which
                                        (0503)                                                    ; computes the integrate time
0E7F: 11 07    SUB   A,0x7              (0504)    sub   A, DUALADC_1_bMINRES                      ; Normalize with min resolution
0E81: 2C 12    OR    [0x12],A           (0505)    or    [DUALADC_1_bfStatus], A
                                        (0506)                                                    ; Since min resolution is 7, 2^^7 = 128, the clock
                                        (0507)                                                    ; is running 4x so 128*4=512 or 0x0200
0E83: 01 01    ADD   A,0x1              (0508)    add   A,01h                                     ; The MSB is 02h.
0E85: 5C       MOV   X,A                (0509)    mov   X,A
0E86: 50 01    MOV   A,0x1              (0510)    mov   A,01h
                                        (0511) 
                                        (0512) DUALADC_1_CALC_INTTIME:                            ; Now shift the MSB left for every bit of resolution of min (7).
0E88: 64       ASL   A                  (0513)    asl   A
0E89: 79       DEC   X                  (0514)    dec   X
0E8A: BF FD    JNZ   0x0E88             (0515)    jnz   DUALADC_1_CALC_INTTIME
                                        (0516) 
                                        (0517) DUALADC_1_LOAD_INTTIME:                            ; Load compare value and Calc time into registers
                                        (0518)                                                    ; Since minimum resolution is 7 bits, this value will always start at 0
0E8C: 62 26 00 MOV   REG[0x26],0x0      (0519)    mov   reg[DUALADC_1_bPWM_IntTime_LSB], 00h
0E8F: 60 2A    MOV   REG[0x2A],A        (0520)    mov   reg[DUALADC_1_bPWM_IntTime_MSB], A
                                        (0521) 
                                        (0522)                                                    ; Load the CalcTime into the PWM Period
0E91: 62 25 3C MOV   REG[0x25],0x3C     (0523)    mov   reg[DUALADC_1_bPWM_Period_LSB], <wCalcTime
0E94: 01 00    ADD   A,0x0              (0524)    add   A, >wCalcTime
0E96: 60 29    MOV   REG[0x29],A        (0525)    mov   reg[DUALADC_1_bPWM_Period_MSB],A
                                        (0526)    RAM_EPILOGUE RAM_USE_CLASS_4
0E98: 7F       RET                      (0527)    ret
                                        (0528) .ENDSECTION
                                        (0529) 
                                        (0530) ; End of File DUALADC_1.asm
FILE: C:\Users\georg\OneDrive\DOCUME~1\GitHub\TALKIN~1\PDPROJ~1\PDPROJ~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include <stdio.h>
(0008) #define TEMP_SENSOR_SLAVE_ADDRESS 0x18
(0009) #define TEMP_REG    			  0x05
(0010) #define MIC_ADC_CHANNEL			  0x01
(0011) #define LIGHT_SENSOR_ADC_CHANNEL  0x02
(0012) #define SIZE 					  20
(0013) #define X 						  1600 // 1.6s
(0014) #define Z						  200  // 200ms
(0015) #define Z_ns					  (Z*1000000) //ns
(0016) #define Z_div					  (Z_ns/50)
(0017) #define Y                         200  // 200ms
(0018) #define Y_ns					  (Z*1000000) //ns
(0019) #define Y_div					  (Z_ns/50)
(0020) #define Q                         200  // Have find an optimum value
(0021) #define LS_NIBBLE_MASK 			  0x0F
(0022) #define MS_NIBBLE_MASK 			  0xF0
(0023) 
(0024) #define LOUD_STAMP_THRESHOLD 	  0x1FE
(0025) 
(0026) enum light  {DARK, NORMAL , BRIGHT};
(0027) enum temp   {COLD, MEDIUM, HOT};
(0028) enum comb   {DARK_COLD, 
(0029) 			DARK_MEDIUM,
(0030) 			DARK_HOT,
(0031) 			NORMAL_COLD,
(0032) 			NORMAL_MEDIUM,
(0033) 			NORMAL_HOT,
(0034) 			BRIGHT_COLD,
(0035) 			BRIGHT_MEDIUM,
(0036) 			BRIGHT_HOT, 
(0037) 			DARK_ONLY,
(0038) 			NORMAL_ONLY,
(0039) 			BRIGHT_ONLY,
(0040) 			COLD_ONLY,
(0041) 			MEDIUM_ONLY,
(0042) 			HOT_ONLY};
(0043) 
(0044) typedef struct vocabTable
(0045) {
(0046) 	BYTE word;
(0047) 	enum comb label;
(0048) 	BYTE frequency;
(0049) 	BYTE age;
(0050) }vocabTable_type;
(0051) 
(0052) // This is the initial default ranges that both the systems will start with
(0053) INT lux_range_1 = 333;
(0054) INT lux_range_2 = 666;
(0055) INT temp_range_1 = 10;
(0056) INT temp_range_2 =23;
(0057) /*
(0058) typedef struct learning_table
(0059) {
(0060) 	BYTE 	
(0061) }
(0062) */
(0063) 
(0064) vocabTable_type my_table[SIZE]= {0};		// To do: finalize on the size
(0065) vocabTable_type neighours_table[SIZE] = {0};// To do: finalize on the size
(0066) INT wElapsedTime = 0; 						// timer with us resolution
(0067) 
(0068) BOOL sortVocabTables = FALSE;
(0069) void print_LCD_debug_msg(char* msg,INT row,INT col);
(0070) INT readDualAdc(INT channel);
(0071) INT read_temperature(void);
(0072) float getLux(void) ;
(0073) BYTE create_word(float lux, INT temp, char *label,INT l1,INT l2,INT t1,INT t2);
(0074) void blocking_delay(BYTE bTimes);
(0075) BOOL update_table(BYTE word_encoding, vocabTable_type* table,char * label);
(0076) void quickSort(vocabTable_type A[], int l, int h);
(0077) int part(vocabTable_type arr[], int l, int h);
(0078) void swap(vocabTable_type* a, vocabTable_type* b);
(0079) void remove(BYTE freq_threshold,vocabTable_type* table );
(0080) void speak(BYTE word_encoding);
(0081) BYTE listen(void);
(0082) BOOL check_if_labelPresent(char * index);
(0083) BOOL check_if_bit_stream_match(char index,BYTE word_listened);
(0084) 
(0085) #pragma interrupt_handler Timer16_1_ISR
(0086) void Timer16_1_ISR(void )
(0087) {
__UserModules_end|__text_start|_Timer16_1_ISR|_Timer16_1_ISR:
    0E99: 71 C0    OR    F,0xC0
    0E9B: 08       PUSH  A
    0E9C: 5D D0    MOV   A,REG[0xD0]
    0E9E: 08       PUSH  A
(0088) 		wElapsedTime++;
    0E9F: 62 D0 00 MOV   REG[0xD0],0x0
    0EA2: 76 C4    INC   [wElapsedTime+1]
    0EA4: 0E C3 00 ADC   [wElapsedTime],0x0
    0EA7: 18       POP   A
    0EA8: 60 D0    MOV   REG[0xD0],A
    0EAA: 18       POP   A
    0EAB: 7E       RETI  
(0089) }
(0090) #pragma interrupt_handler ResetSwitchISR
(0091) // This ISR is triffered every 60 seconds
(0092) void TimerISR(void )
(0093) {
(0094) 	sortVocabTables = TRUE;
_TimerISR:
    0EAC: 62 D0 00 MOV   REG[0xD0],0x0
    0EAF: 55 C5 01 MOV   [sortVocabTables],0x1
    0EB2: 7F       RET   
(0095) }
(0096) 
(0097) void ResetSwitchISR(void )
(0098) {
_ResetSwitchISR:
    0EB3: 08       PUSH  A
    0EB4: 18       POP   A
    0EB5: 7E       RETI  
(0099) 	// Trigger a reset 
(0100) 	// Trigger the hardware reset ISR from the software	
(0101) }
(0102) 
(0103) void main(void)
(0104) {
_main:
  neword               --> X+12
  index                --> X+10
  label                --> X+8
  tempValue            --> X+6
  luxValue             --> X+2
  word_listened        --> X+1
  speak_word           --> X+0
    0EB6: 10       PUSH  X
    0EB7: 4F       MOV   X,SP
    0EB8: 38 0D    ADD   SP,0xD
(0105) 	float luxValue; // Ambient Light illumiance value
(0106) 	INT   tempValue;     // Ambient temperature
(0107) 	BYTE  speak_word;
(0108) 	BYTE  word_listened;
(0109) 	BOOL neword;
(0110) 	char * label;
(0111) 	char * index;
(0112) 	
(0113) 	// PGA1 init
(0114) 	PGA_1_Start(PGA_1_HIGHPOWER);
    0EBA: 10       PUSH  X
    0EBB: 50 03    MOV   A,0x3
    0EBD: 7C 06 17 LCALL _PGA_1_SetPower|PGA_1_Start|PGA_1_SetPower|_PGA_1_Start
(0115) 	// PGA2 init
(0116) 	PGA_2_Start(PGA_1_HIGHPOWER);
    0EC0: 50 03    MOV   A,0x3
    0EC2: 7C 05 CF LCALL _PGA_2_Start|PGA_2_SetPower|_PGA_2_SetPower|PGA_2_Start
(0117) 
(0118) 	// Initial the Dual ADC
(0119) 	DUALADC_1_Start(DUALADC_1_HIGHPOWER);     	// Turn on Analog section
    0EC5: 50 03    MOV   A,0x3
    0EC7: 7C 0D 9C LCALL _DUALADC_1_Start|DUALADC_1_SetPower|_DUALADC_1_SetPower
(0120) 	DUALADC_1_SetResolution(10);            	// Set resolution to 10 Bits
    0ECA: 50 0A    MOV   A,0xA
    0ECC: 7C 0E 66 LCALL _DUALADC_1_SetResolution
(0121) 	DUALADC_1_GetSamples(0); 
    0ECF: 50 00    MOV   A,0x0
    0ED1: 7C 0D CD LCALL _DUALADC_1_GetSamples
(0122) 
(0123) 	// Initializes LCD to use the multi-line 4-bit interface
(0124) 	LCD_2_Start();
    0ED4: 7C 07 71 LCALL _LCD_2_Start|_LCD_2_Init|LCD_2_Init
(0125) 	
(0126) 	// Enables the I2C HW block as a Master 
(0127) 	I2CHW_Temp_EnableMstr();
    0ED7: 7C 08 FC LCALL _I2CHW_Temp_EnableMstr
(0128) 	
(0129) 	//Enable reset button interrupt
(0130) 	//To do How to trigger a software reset via button?
(0131) 	
(0132) 	// Initialize time
(0133) 	Timer16_1_WritePeriod(0xffff);// Do this in the config
    0EDA: 50 FF    MOV   A,0xFF
    0EDC: 57 FF    MOV   X,0xFF
    0EDE: 7C 05 38 LCALL _Timer16_1_WritePeriod
(0134)   	Timer16_1_WriteCompareValue(0x0001); 
    0EE1: 57 00    MOV   X,0x0
    0EE3: 50 01    MOV   A,0x1
    0EE5: 7C 05 3E LCALL _Timer16_1_WriteCompareValue
(0135) 	Timer16_1_EnableInt();//Enable Timer interrupt
    0EE8: 7C 05 28 LCALL _Timer16_1_EnableInt
    0EEB: 20       POP   X
(0136) 	
(0137) 	
(0138) 	// Enable global interrupts
(0139) 	M8C_EnableGInt;
    0EEC: 71 01    OR    F,0x1
(0140) 	
(0141) 	// Start the timer
(0142) 	Timer16_1_Start(); 
    0EEE: 10       PUSH  X
    0EEF: 7C 05 30 LCALL _Timer16_1_Start
    0EF2: 20       POP   X
    0EF3: 81 0D    JMP   0x1001
(0143) 	while(1)
(0144) 	{
(0145) 		// Sense /////////////////////////////
(0146) 		
(0147) 		//Read light sensor value
(0148) 		luxValue   = getLux(); // luxValue ranges from 0 to 1000
    0EF5: 7C 19 27 LCALL _getLux
    0EF8: 62 D0 00 MOV   REG[0xD0],0x0
    0EFB: 51 BA    MOV   A,[__r0]
    0EFD: 54 02    MOV   [X+2],A
    0EFF: 51 B9    MOV   A,[__r1]
    0F01: 54 03    MOV   [X+3],A
    0F03: 51 B8    MOV   A,[__r2]
    0F05: 54 04    MOV   [X+4],A
    0F07: 51 B7    MOV   A,[__r3]
    0F09: 54 05    MOV   [X+5],A
(0149) 		//Read temperature value
(0150) 		tempValue  = read_temperature();
    0F0B: 7C 18 28 LCALL _read_temperature
    0F0E: 62 D0 00 MOV   REG[0xD0],0x0
    0F11: 51 B9    MOV   A,[__r1]
    0F13: 54 07    MOV   [X+7],A
    0F15: 51 BA    MOV   A,[__r0]
    0F17: 54 06    MOV   [X+6],A
(0151) 	
(0152) 		// Word formation //////////////////
(0153) 		speak_word = create_word(luxValue, tempValue,label, lux_range_1,lux_range_2,temp_range_1,temp_range_2);
    0F19: 62 D0 00 MOV   REG[0xD0],0x0
    0F1C: 51 C1    MOV   A,[temp_range_2]
    0F1E: 08       PUSH  A
    0F1F: 51 C2    MOV   A,[temp_range_2+1]
    0F21: 08       PUSH  A
    0F22: 62 D0 00 MOV   REG[0xD0],0x0
    0F25: 51 BB    MOV   A,[temp_range_1]
    0F27: 08       PUSH  A
    0F28: 51 BC    MOV   A,[temp_range_1+1]
    0F2A: 08       PUSH  A
    0F2B: 62 D0 00 MOV   REG[0xD0],0x0
    0F2E: 51 BD    MOV   A,[lux_range_2]
    0F30: 08       PUSH  A
    0F31: 51 BE    MOV   A,[lux_range_2+1]
    0F33: 08       PUSH  A
    0F34: 62 D0 00 MOV   REG[0xD0],0x0
    0F37: 51 BF    MOV   A,[lux_range_1]
    0F39: 08       PUSH  A
    0F3A: 51 C0    MOV   A,[lux_range_1+1]
    0F3C: 08       PUSH  A
    0F3D: 52 08    MOV   A,[X+8]
    0F3F: 08       PUSH  A
    0F40: 52 09    MOV   A,[X+9]
    0F42: 08       PUSH  A
    0F43: 52 06    MOV   A,[X+6]
    0F45: 08       PUSH  A
    0F46: 52 07    MOV   A,[X+7]
    0F48: 08       PUSH  A
    0F49: 52 02    MOV   A,[X+2]
    0F4B: 08       PUSH  A
    0F4C: 52 03    MOV   A,[X+3]
    0F4E: 08       PUSH  A
    0F4F: 52 04    MOV   A,[X+4]
    0F51: 08       PUSH  A
    0F52: 52 05    MOV   A,[X+5]
    0F54: 08       PUSH  A
    0F55: 90 B1    CALL  _create_word
    0F57: 62 D0 00 MOV   REG[0xD0],0x0
    0F5A: 54 00    MOV   [X+0],A
(0154) 		
(0155) 		
(0156) 		// Update my vocab
(0157) 		update_table(speak_word,my_table,label);
    0F5C: 52 08    MOV   A,[X+8]
    0F5E: 08       PUSH  A
    0F5F: 52 09    MOV   A,[X+9]
    0F61: 08       PUSH  A
    0F62: 50 00    MOV   A,0x0
    0F64: 08       PUSH  A
    0F65: 50 64    MOV   A,0x64
    0F67: 08       PUSH  A
    0F68: 52 00    MOV   A,[X+0]
    0F6A: 08       PUSH  A
    0F6B: 94 7A    CALL  _update_table
    0F6D: 38 EB    ADD   SP,0xEB
(0158) 		
(0159) 
(0160) 		// Sort vocab table
(0161) 		
(0162) 		if (sortVocabTables == TRUE)
    0F6F: 62 D0 00 MOV   REG[0xD0],0x0
    0F72: 3C C5 01 CMP   [sortVocabTables],0x1
    0F75: B0 20    JNZ   0x0F96
(0163) 		{
(0164) 			quickSort(my_table, 0 , SIZE-1);
    0F77: 50 00    MOV   A,0x0
    0F79: 08       PUSH  A
    0F7A: 50 13    MOV   A,0x13
    0F7C: 08       PUSH  A
    0F7D: 50 00    MOV   A,0x0
    0F7F: 08       PUSH  A
    0F80: 08       PUSH  A
    0F81: 50 00    MOV   A,0x0
    0F83: 08       PUSH  A
    0F84: 50 64    MOV   A,0x64
    0F86: 08       PUSH  A
    0F87: 97 6B    CALL  _quickSort
(0165) 			// Remove the table entries which does not meet the required frequency threshold
(0166) 			remove(Q,my_table);
    0F89: 50 00    MOV   A,0x0
    0F8B: 08       PUSH  A
    0F8C: 50 64    MOV   A,0x64
    0F8E: 08       PUSH  A
    0F8F: 50 C8    MOV   A,0xC8
    0F91: 08       PUSH  A
    0F92: 97 DB    CALL  _remove
    0F94: 38 F7    ADD   SP,0xF7
(0167) 		}
(0168) 		// Speak ///////////////////////////
(0169) 		if(neword)
    0F96: 3D 0C 00 CMP   [X+12],0x0
    0F99: A0 09    JZ    0x0FA3
(0170) 		{
(0171) 			speak(speak_word);
    0F9B: 52 00    MOV   A,[X+0]
    0F9D: 08       PUSH  A
    0F9E: 7C 1A B9 LCALL _speak
    0FA1: 38 FF    ADD   SP,0xFF
(0172) 		}
(0173) 		// Listen the bit stream from the other agent
(0174) 		word_listened = listen();
    0FA3: 7C 1B EC LCALL _listen
    0FA6: 62 D0 00 MOV   REG[0xD0],0x0
    0FA9: 54 01    MOV   [X+1],A
(0175) 		
(0176) 		// Check if the listened word needs to be entered in the neighbour's vocab table
(0177) 			// Check if the received bit stream represents a light condition or temp condition or both.
(0178) 			// For example, if listened bit steam is 0000 1010, since the Most Significant 4 bit representing Light is zero, and Least Significant 4 bits is non zero, this means that 
(0179) 			// this word bit stream is represents only a temperature condition.
(0180) 			// If the a same word label is already present but with a different bit stream it means the sender agent have extended the word meaning
(0181) 			// to include a new value for temperature or light conditions. In this case, re-adjust or re learn the ranges for tempearture and light.
(0182) 		// 
(0183) 		// Create a word label for when the a word is received and check if there is a bit stream data available in the neighbours vocab table with the same label.
(0184) 		// if the same label is present but the bit stream mismatches with the received bit stream , it means the other agent have extended the meaning of the word.
(0185) 		
(0186) 		if(check_if_labelPresent(index))
    0FAB: 52 0A    MOV   A,[X+10]
    0FAD: 08       PUSH  A
    0FAE: 52 0B    MOV   A,[X+11]
    0FB0: 08       PUSH  A
    0FB1: 7C 1C F1 LCALL _check_if_labelPresent
    0FB4: 38 FE    ADD   SP,0xFE
    0FB6: 62 D0 00 MOV   REG[0xD0],0x0
    0FB9: 39 00    CMP   A,0x0
    0FBB: A0 31    JZ    0x0FED
(0187) 		{
(0188) 			//Check bitstream associated to the receieved word matches with the bitstream of the word which is already present in the neighbours table
(0189) 			if(check_if_bit_stream_match(*index,word_listened))
    0FBD: 52 01    MOV   A,[X+1]
    0FBF: 08       PUSH  A
    0FC0: 52 0B    MOV   A,[X+11]
    0FC2: 53 B9    MOV   [__r1],A
    0FC4: 52 0A    MOV   A,[X+10]
    0FC6: 60 D4    MOV   REG[0xD4],A
    0FC8: 3E B9    MVI   A,[__r1]
    0FCA: 08       PUSH  A
    0FCB: 7C 1D C0 LCALL _check_if_bit_stream_match
    0FCE: 38 FE    ADD   SP,0xFE
    0FD0: 62 D0 00 MOV   REG[0xD0],0x0
    0FD3: 39 00    CMP   A,0x0
    0FD5: A0 03    JZ    0x0FD9
(0190) 			{
(0191) 				//If bit stream matches re_learning of ranges not required. Other agent hasn't extended its meaning.
(0192) 			}
    0FD7: 80 29    JMP   0x1001
(0193) 			else 
(0194) 			{
(0195) 				//Bit stream doesn't match. Adjust the ranges of temp/light and generate the bitstream/word_encoding. Continue this till the bistream generated 
(0196) 				//matches with the received bit stream
(0197) 				re_learn_ranges(word_listened);
    0FD9: 62 D0 00 MOV   REG[0xD0],0x0
    0FDC: 52 01    MOV   A,[X+1]
    0FDE: 53 B9    MOV   [__r1],A
    0FE0: 50 00    MOV   A,0x0
    0FE2: 08       PUSH  A
    0FE3: 51 B9    MOV   A,[__r1]
    0FE5: 08       PUSH  A
    0FE6: 7C 1D EF LCALL _re_learn_ranges
    0FE9: 38 FE    ADD   SP,0xFE
(0198) 			}
(0199) 		}
    0FEB: 80 15    JMP   0x1001
(0200) 		else
(0201) 		{
(0202) 			//It is a new word. update the table with new word received.
(0203) 			update_table(word_listened,neighours_table,NULL);
    0FED: 50 00    MOV   A,0x0
    0FEF: 08       PUSH  A
    0FF0: 08       PUSH  A
    0FF1: 50 00    MOV   A,0x0
    0FF3: 08       PUSH  A
    0FF4: 50 14    MOV   A,0x14
    0FF6: 08       PUSH  A
    0FF7: 52 01    MOV   A,[X+1]
    0FF9: 08       PUSH  A
    0FFA: 93 EB    CALL  _update_table
    0FFC: 38 FB    ADD   SP,0xFB
    0FFE: 62 D0 00 MOV   REG[0xD0],0x0
(0204) 		}
(0205) 		
(0206) 		/*
(0207) 		//Used for bayesian word prediction when mode == Different environment.
(0208) 		update_freqency_table();
(0209) 		
(0210) 		//-----------------Decesion Making---------------------------
(0211) 		if( mode == SAME_ENVIRONMENT)
(0212) 		//Use sensor values of the agent to predict the meaning of the word received
(0213) 			
(0214) 		if( mode == DIFFERENT_ENVIRONMENT)
(0215) 		//Use bayesian table to predict the meaning of the word associated to the received bit stream	*/
(0216) 	}
    1001: 8E F3    JMP   0x0EF5
    1003: 38 F3    ADD   SP,0xF3
    1005: 20       POP   X
    1006: 8F FF    JMP   0x1006
(0217) }
(0218) 
(0219) BYTE create_word(float lux, INT temp, char *label,INT l1,INT l2,INT t1,INT t2)
(0220) {
_create_word:
  bit_stream           --> X+2
  temp_label           --> X+1
  light_label          --> X+0
  t2                   --> X-19
  t1                   --> X-17
  l2                   --> X-15
  l1                   --> X-13
  label                --> X-11
  temp                 --> X-9
  lux                  --> X-7
    1008: 10       PUSH  X
    1009: 4F       MOV   X,SP
    100A: 38 03    ADD   SP,0x3
(0221) 	enum light light_label;
(0222) 	enum temp temp_label;
(0223) 	BYTE bit_stream;
(0224) 	
(0225) 	if (lux >= 0 && lux < l1)
    100C: 50 00    MOV   A,0x0
    100E: 08       PUSH  A
    100F: 08       PUSH  A
    1010: 08       PUSH  A
    1011: 08       PUSH  A
    1012: 52 F9    MOV   A,[X-7]
    1014: 08       PUSH  A
    1015: 52 FA    MOV   A,[X-6]
    1017: 08       PUSH  A
    1018: 52 FB    MOV   A,[X-5]
    101A: 08       PUSH  A
    101B: 52 FC    MOV   A,[X-4]
    101D: 08       PUSH  A
    101E: 62 D0 00 MOV   REG[0xD0],0x0
    1021: 7C 23 4D LCALL 0x234D
    1024: 38 F8    ADD   SP,0xF8
    1026: 39 FF    CMP   A,0xFF
    1028: A0 63    JZ    0x108C
    102A: 52 F4    MOV   A,[X-12]
    102C: 53 B7    MOV   [__r3],A
    102E: 52 F3    MOV   A,[X-13]
    1030: 53 B8    MOV   [__r2],A
    1032: 47 B8 80 TST   [__r2],0x80
    1035: A0 09    JZ    0x103F
    1037: 55 B9 FF MOV   [__r1],0xFF
    103A: 55 BA FF MOV   [__r0],0xFF
    103D: 80 0A    JMP   0x1048
    103F: 62 D0 00 MOV   REG[0xD0],0x0
    1042: 55 B9 00 MOV   [__r1],0x0
    1045: 55 BA 00 MOV   [__r0],0x0
    1048: 62 D0 00 MOV   REG[0xD0],0x0
    104B: 51 BA    MOV   A,[__r0]
    104D: 08       PUSH  A
    104E: 51 B9    MOV   A,[__r1]
    1050: 08       PUSH  A
    1051: 51 B8    MOV   A,[__r2]
    1053: 08       PUSH  A
    1054: 51 B7    MOV   A,[__r3]
    1056: 08       PUSH  A
    1057: 7C 26 25 LCALL 0x2625
    105A: 18       POP   A
    105B: 53 B7    MOV   [__r3],A
    105D: 18       POP   A
    105E: 53 B8    MOV   [__r2],A
    1060: 18       POP   A
    1061: 53 B9    MOV   [__r1],A
    1063: 18       POP   A
    1064: 08       PUSH  A
    1065: 51 B9    MOV   A,[__r1]
    1067: 08       PUSH  A
    1068: 51 B8    MOV   A,[__r2]
    106A: 08       PUSH  A
    106B: 51 B7    MOV   A,[__r3]
    106D: 08       PUSH  A
    106E: 52 F9    MOV   A,[X-7]
    1070: 08       PUSH  A
    1071: 52 FA    MOV   A,[X-6]
    1073: 08       PUSH  A
    1074: 52 FB    MOV   A,[X-5]
    1076: 08       PUSH  A
    1077: 52 FC    MOV   A,[X-4]
    1079: 08       PUSH  A
    107A: 7C 23 4D LCALL 0x234D
    107D: 38 F8    ADD   SP,0xF8
    107F: 39 00    CMP   A,0x0
    1081: A0 0A    JZ    0x108C
    1083: 39 01    CMP   A,0x1
    1085: A0 06    JZ    0x108C
(0226) 		light_label = DARK;
    1087: 56 00 00 MOV   [X+0],0x0
    108A: 81 3D    JMP   0x11C8
(0227) 	else if(lux >= l1 && lux < l2)
    108C: 62 D0 00 MOV   REG[0xD0],0x0
    108F: 52 F4    MOV   A,[X-12]
    1091: 53 B7    MOV   [__r3],A
    1093: 52 F3    MOV   A,[X-13]
    1095: 53 B8    MOV   [__r2],A
    1097: 47 B8 80 TST   [__r2],0x80
    109A: A0 09    JZ    0x10A4
    109C: 55 B9 FF MOV   [__r1],0xFF
    109F: 55 BA FF MOV   [__r0],0xFF
    10A2: 80 0A    JMP   0x10AD
    10A4: 62 D0 00 MOV   REG[0xD0],0x0
    10A7: 55 B9 00 MOV   [__r1],0x0
    10AA: 55 BA 00 MOV   [__r0],0x0
    10AD: 62 D0 00 MOV   REG[0xD0],0x0
    10B0: 51 BA    MOV   A,[__r0]
    10B2: 08       PUSH  A
    10B3: 51 B9    MOV   A,[__r1]
    10B5: 08       PUSH  A
    10B6: 51 B8    MOV   A,[__r2]
    10B8: 08       PUSH  A
    10B9: 51 B7    MOV   A,[__r3]
    10BB: 08       PUSH  A
    10BC: 7C 26 25 LCALL 0x2625
    10BF: 18       POP   A
    10C0: 53 B7    MOV   [__r3],A
    10C2: 18       POP   A
    10C3: 53 B8    MOV   [__r2],A
    10C5: 18       POP   A
    10C6: 53 B9    MOV   [__r1],A
    10C8: 18       POP   A
    10C9: 08       PUSH  A
    10CA: 51 B9    MOV   A,[__r1]
    10CC: 08       PUSH  A
    10CD: 51 B8    MOV   A,[__r2]
    10CF: 08       PUSH  A
    10D0: 51 B7    MOV   A,[__r3]
    10D2: 08       PUSH  A
    10D3: 52 F9    MOV   A,[X-7]
    10D5: 08       PUSH  A
    10D6: 52 FA    MOV   A,[X-6]
    10D8: 08       PUSH  A
    10D9: 52 FB    MOV   A,[X-5]
    10DB: 08       PUSH  A
    10DC: 52 FC    MOV   A,[X-4]
    10DE: 08       PUSH  A
    10DF: 7C 23 4D LCALL 0x234D
    10E2: 38 F8    ADD   SP,0xF8
    10E4: 39 FF    CMP   A,0xFF
    10E6: A0 63    JZ    0x114A
    10E8: 52 F2    MOV   A,[X-14]
    10EA: 53 B7    MOV   [__r3],A
    10EC: 52 F1    MOV   A,[X-15]
    10EE: 53 B8    MOV   [__r2],A
    10F0: 47 B8 80 TST   [__r2],0x80
    10F3: A0 09    JZ    0x10FD
    10F5: 55 B9 FF MOV   [__r1],0xFF
    10F8: 55 BA FF MOV   [__r0],0xFF
    10FB: 80 0A    JMP   0x1106
    10FD: 62 D0 00 MOV   REG[0xD0],0x0
    1100: 55 B9 00 MOV   [__r1],0x0
    1103: 55 BA 00 MOV   [__r0],0x0
    1106: 62 D0 00 MOV   REG[0xD0],0x0
    1109: 51 BA    MOV   A,[__r0]
    110B: 08       PUSH  A
    110C: 51 B9    MOV   A,[__r1]
    110E: 08       PUSH  A
    110F: 51 B8    MOV   A,[__r2]
    1111: 08       PUSH  A
    1112: 51 B7    MOV   A,[__r3]
    1114: 08       PUSH  A
    1115: 7C 26 25 LCALL 0x2625
    1118: 18       POP   A
    1119: 53 B7    MOV   [__r3],A
    111B: 18       POP   A
    111C: 53 B8    MOV   [__r2],A
    111E: 18       POP   A
    111F: 53 B9    MOV   [__r1],A
    1121: 18       POP   A
    1122: 08       PUSH  A
    1123: 51 B9    MOV   A,[__r1]
    1125: 08       PUSH  A
    1126: 51 B8    MOV   A,[__r2]
    1128: 08       PUSH  A
    1129: 51 B7    MOV   A,[__r3]
    112B: 08       PUSH  A
    112C: 52 F9    MOV   A,[X-7]
    112E: 08       PUSH  A
    112F: 52 FA    MOV   A,[X-6]
    1131: 08       PUSH  A
    1132: 52 FB    MOV   A,[X-5]
    1134: 08       PUSH  A
    1135: 52 FC    MOV   A,[X-4]
    1137: 08       PUSH  A
    1138: 7C 23 4D LCALL 0x234D
    113B: 38 F8    ADD   SP,0xF8
    113D: 39 00    CMP   A,0x0
    113F: A0 0A    JZ    0x114A
    1141: 39 01    CMP   A,0x1
    1143: A0 06    JZ    0x114A
(0228) 		light_label = NORMAL;
    1145: 56 00 01 MOV   [X+0],0x1
    1148: 80 7F    JMP   0x11C8
(0229) 	else if(lux >=l2 && lux <=1000)
    114A: 62 D0 00 MOV   REG[0xD0],0x0
    114D: 52 F2    MOV   A,[X-14]
    114F: 53 B7    MOV   [__r3],A
    1151: 52 F1    MOV   A,[X-15]
    1153: 53 B8    MOV   [__r2],A
    1155: 47 B8 80 TST   [__r2],0x80
    1158: A0 09    JZ    0x1162
    115A: 55 B9 FF MOV   [__r1],0xFF
    115D: 55 BA FF MOV   [__r0],0xFF
    1160: 80 0A    JMP   0x116B
    1162: 62 D0 00 MOV   REG[0xD0],0x0
    1165: 55 B9 00 MOV   [__r1],0x0
    1168: 55 BA 00 MOV   [__r0],0x0
    116B: 62 D0 00 MOV   REG[0xD0],0x0
    116E: 51 BA    MOV   A,[__r0]
    1170: 08       PUSH  A
    1171: 51 B9    MOV   A,[__r1]
    1173: 08       PUSH  A
    1174: 51 B8    MOV   A,[__r2]
    1176: 08       PUSH  A
    1177: 51 B7    MOV   A,[__r3]
    1179: 08       PUSH  A
    117A: 7C 26 25 LCALL 0x2625
    117D: 18       POP   A
    117E: 53 B7    MOV   [__r3],A
    1180: 18       POP   A
    1181: 53 B8    MOV   [__r2],A
    1183: 18       POP   A
    1184: 53 B9    MOV   [__r1],A
    1186: 18       POP   A
    1187: 08       PUSH  A
    1188: 51 B9    MOV   A,[__r1]
    118A: 08       PUSH  A
    118B: 51 B8    MOV   A,[__r2]
    118D: 08       PUSH  A
    118E: 51 B7    MOV   A,[__r3]
    1190: 08       PUSH  A
    1191: 52 F9    MOV   A,[X-7]
    1193: 08       PUSH  A
    1194: 52 FA    MOV   A,[X-6]
    1196: 08       PUSH  A
    1197: 52 FB    MOV   A,[X-5]
    1199: 08       PUSH  A
    119A: 52 FC    MOV   A,[X-4]
    119C: 08       PUSH  A
    119D: 7C 23 4D LCALL 0x234D
    11A0: 38 F8    ADD   SP,0xF8
    11A2: 39 FF    CMP   A,0xFF
    11A4: A0 23    JZ    0x11C8
    11A6: 50 44    MOV   A,0x44
    11A8: 08       PUSH  A
    11A9: 50 7A    MOV   A,0x7A
    11AB: 08       PUSH  A
    11AC: 50 00    MOV   A,0x0
    11AE: 08       PUSH  A
    11AF: 08       PUSH  A
    11B0: 52 F9    MOV   A,[X-7]
    11B2: 08       PUSH  A
    11B3: 52 FA    MOV   A,[X-6]
    11B5: 08       PUSH  A
    11B6: 52 FB    MOV   A,[X-5]
    11B8: 08       PUSH  A
    11B9: 52 FC    MOV   A,[X-4]
    11BB: 08       PUSH  A
    11BC: 7C 23 4D LCALL 0x234D
    11BF: 38 F8    ADD   SP,0xF8
    11C1: 39 01    CMP   A,0x1
    11C3: A0 04    JZ    0x11C8
(0230) 		light_label = BRIGHT;
    11C5: 56 00 02 MOV   [X+0],0x2
(0231) 	
(0232) 	// Check this
(0233) 	if (temp < t1)
    11C8: 52 F8    MOV   A,[X-8]
    11CA: 13 F0    SUB   A,[X-16]
    11CC: 52 EF    MOV   A,[X-17]
    11CE: 31 80    XOR   A,0x80
    11D0: 62 D0 00 MOV   REG[0xD0],0x0
    11D3: 53 B6    MOV   [__rX],A
    11D5: 52 F7    MOV   A,[X-9]
    11D7: 31 80    XOR   A,0x80
    11D9: 1A B6    SBB   A,[__rX]
    11DB: D0 06    JNC   0x11E2
(0234) 		temp_label = COLD;
    11DD: 56 01 00 MOV   [X+1],0x0
    11E0: 80 48    JMP   0x1229
(0235) 	else if(temp >=t1 && temp < t2)
    11E2: 52 F8    MOV   A,[X-8]
    11E4: 13 F0    SUB   A,[X-16]
    11E6: 52 EF    MOV   A,[X-17]
    11E8: 31 80    XOR   A,0x80
    11EA: 62 D0 00 MOV   REG[0xD0],0x0
    11ED: 53 B6    MOV   [__rX],A
    11EF: 52 F7    MOV   A,[X-9]
    11F1: 31 80    XOR   A,0x80
    11F3: 1A B6    SBB   A,[__rX]
    11F5: C0 1B    JC    0x1211
    11F7: 52 F8    MOV   A,[X-8]
    11F9: 13 EE    SUB   A,[X-18]
    11FB: 52 ED    MOV   A,[X-19]
    11FD: 31 80    XOR   A,0x80
    11FF: 62 D0 00 MOV   REG[0xD0],0x0
    1202: 53 B6    MOV   [__rX],A
    1204: 52 F7    MOV   A,[X-9]
    1206: 31 80    XOR   A,0x80
    1208: 1A B6    SBB   A,[__rX]
    120A: D0 06    JNC   0x1211
(0236) 		temp_label = MEDIUM;
    120C: 56 01 01 MOV   [X+1],0x1
    120F: 80 19    JMP   0x1229
(0237) 	else if(temp >= t2)
    1211: 52 F8    MOV   A,[X-8]
    1213: 13 EE    SUB   A,[X-18]
    1215: 52 ED    MOV   A,[X-19]
    1217: 31 80    XOR   A,0x80
    1219: 62 D0 00 MOV   REG[0xD0],0x0
    121C: 53 B6    MOV   [__rX],A
    121E: 52 F7    MOV   A,[X-9]
    1220: 31 80    XOR   A,0x80
    1222: 1A B6    SBB   A,[__rX]
    1224: C0 04    JC    0x1229
(0238) 		temp_label = HOT;
    1226: 56 01 02 MOV   [X+1],0x2
(0239) 	
(0240) 	if (light_label == DARK && temp_label == COLD)
    1229: 3D 00 00 CMP   [X+0],0x0
    122C: B0 2B    JNZ   0x1258
    122E: 3D 01 00 CMP   [X+1],0x0
    1231: B0 26    JNZ   0x1258
(0241) 	{	
(0242) 		bit_stream = 0xa9;//Bit stream : 1010 1001 | Dark light and Cold condition
    1233: 56 02 A9 MOV   [X+2],0xA9
(0243) 		*label = DARK_COLD;
    1236: 62 D0 00 MOV   REG[0xD0],0x0
    1239: 52 F6    MOV   A,[X-10]
    123B: 53 B9    MOV   [__r1],A
    123D: 52 F5    MOV   A,[X-11]
    123F: 60 D5    MOV   REG[0xD5],A
    1241: 50 00    MOV   A,0x0
    1243: 3F B9    MVI   [__r1],A
(0244) 		LCD_2_Position(0,0);
    1245: 10       PUSH  X
    1246: 57 00    MOV   X,0x0
    1248: 7C 07 E4 LCALL _LCD_2_Position
(0245) 		LCD_2_PrCString("Word Generated is: DARK COLD");
    124B: 50 02    MOV   A,0x2
    124D: 08       PUSH  A
    124E: 50 87    MOV   A,0x87
    1250: 5C       MOV   X,A
    1251: 18       POP   A
    1252: 7C 06 5F LCALL _LCD_2_PrCString
    1255: 20       POP   X
(0246) 	}
    1256: 81 87    JMP   0x13DE
(0247) 	else if (light_label == DARK && temp_label == MEDIUM)
    1258: 3D 00 00 CMP   [X+0],0x0
    125B: B0 2D    JNZ   0x1289
    125D: 3D 01 01 CMP   [X+1],0x1
    1260: B0 28    JNZ   0x1289
(0248) 	{
(0249) 		bit_stream = 0xaa; //Bit stream : 1010 1010 |  Dark light and Medium temp condition
    1262: 56 02 AA MOV   [X+2],0xAA
(0250) 		*label = DARK_MEDIUM;
    1265: 62 D0 00 MOV   REG[0xD0],0x0
    1268: 52 F6    MOV   A,[X-10]
    126A: 53 B9    MOV   [__r1],A
    126C: 52 F5    MOV   A,[X-11]
    126E: 60 D5    MOV   REG[0xD5],A
    1270: 50 01    MOV   A,0x1
    1272: 3F B9    MVI   [__r1],A
(0251) 		LCD_2_Position(0,0);
    1274: 10       PUSH  X
    1275: 50 00    MOV   A,0x0
    1277: 57 00    MOV   X,0x0
    1279: 7C 07 E4 LCALL _LCD_2_Position
(0252) 		LCD_2_PrCString("Word Generated is: DARK MEDIUM");
    127C: 50 02    MOV   A,0x2
    127E: 08       PUSH  A
    127F: 50 68    MOV   A,0x68
    1281: 5C       MOV   X,A
    1282: 18       POP   A
    1283: 7C 06 5F LCALL _LCD_2_PrCString
    1286: 20       POP   X
(0253) 	}
    1287: 81 56    JMP   0x13DE
(0254) 	else if (light_label == DARK && temp_label == HOT)
    1289: 3D 00 00 CMP   [X+0],0x0
    128C: B0 2D    JNZ   0x12BA
    128E: 3D 01 02 CMP   [X+1],0x2
    1291: B0 28    JNZ   0x12BA
(0255) 	{
(0256) 		bit_stream = 0xa8;//Bit stream : 1010 1000 | Dark light and Hot temp condition
    1293: 56 02 A8 MOV   [X+2],0xA8
(0257) 		*label = DARK_HOT;
    1296: 62 D0 00 MOV   REG[0xD0],0x0
    1299: 52 F6    MOV   A,[X-10]
    129B: 53 B9    MOV   [__r1],A
    129D: 52 F5    MOV   A,[X-11]
    129F: 60 D5    MOV   REG[0xD5],A
    12A1: 50 02    MOV   A,0x2
    12A3: 3F B9    MVI   [__r1],A
(0258) 		LCD_2_Position(0,0);
    12A5: 10       PUSH  X
    12A6: 50 00    MOV   A,0x0
    12A8: 57 00    MOV   X,0x0
    12AA: 7C 07 E4 LCALL _LCD_2_Position
(0259) 		LCD_2_PrCString("Word Generated is: DARK HOT");
    12AD: 50 02    MOV   A,0x2
    12AF: 08       PUSH  A
    12B0: 50 4C    MOV   A,0x4C
    12B2: 5C       MOV   X,A
    12B3: 18       POP   A
    12B4: 7C 06 5F LCALL _LCD_2_PrCString
    12B7: 20       POP   X
(0260) 	}
    12B8: 81 25    JMP   0x13DE
(0261) 	else if (light_label == NORMAL && temp_label == COLD)
    12BA: 3D 00 01 CMP   [X+0],0x1
    12BD: B0 2D    JNZ   0x12EB
    12BF: 3D 01 00 CMP   [X+1],0x0
    12C2: B0 28    JNZ   0x12EB
(0262) 	{
(0263) 		bit_stream = 0x89; //Bit stream : 1000 1001 | Normal light and cold temp condition
    12C4: 56 02 89 MOV   [X+2],0x89
(0264) 		*label = NORMAL_COLD;
    12C7: 62 D0 00 MOV   REG[0xD0],0x0
    12CA: 52 F6    MOV   A,[X-10]
    12CC: 53 B9    MOV   [__r1],A
    12CE: 52 F5    MOV   A,[X-11]
    12D0: 60 D5    MOV   REG[0xD5],A
    12D2: 50 03    MOV   A,0x3
    12D4: 3F B9    MVI   [__r1],A
(0265) 		LCD_2_Position(0,0);
    12D6: 10       PUSH  X
    12D7: 50 00    MOV   A,0x0
    12D9: 57 00    MOV   X,0x0
    12DB: 7C 07 E4 LCALL _LCD_2_Position
(0266) 		LCD_2_PrCString("Word Generated is: NORMAL COLD");
    12DE: 50 02    MOV   A,0x2
    12E0: 08       PUSH  A
    12E1: 50 2D    MOV   A,0x2D
    12E3: 5C       MOV   X,A
    12E4: 18       POP   A
    12E5: 7C 06 5F LCALL _LCD_2_PrCString
    12E8: 20       POP   X
(0267) 	}
    12E9: 80 F4    JMP   0x13DE
(0268) 	else if (light_label == NORMAL && temp_label == MEDIUM)
    12EB: 3D 00 01 CMP   [X+0],0x1
    12EE: B0 2D    JNZ   0x131C
    12F0: 3D 01 01 CMP   [X+1],0x1
    12F3: B0 28    JNZ   0x131C
(0269) 	{
(0270) 		bit_stream = 0x8a; //Bit stream : 1000 1010 | Normal light and medium temp condition
    12F5: 56 02 8A MOV   [X+2],0x8A
(0271) 		*label = NORMAL_MEDIUM;
    12F8: 62 D0 00 MOV   REG[0xD0],0x0
    12FB: 52 F6    MOV   A,[X-10]
    12FD: 53 B9    MOV   [__r1],A
    12FF: 52 F5    MOV   A,[X-11]
    1301: 60 D5    MOV   REG[0xD5],A
    1303: 50 04    MOV   A,0x4
    1305: 3F B9    MVI   [__r1],A
(0272) 		LCD_2_Position(0,0);
    1307: 10       PUSH  X
    1308: 50 00    MOV   A,0x0
    130A: 57 00    MOV   X,0x0
    130C: 7C 07 E4 LCALL _LCD_2_Position
(0273) 		LCD_2_PrCString("Word Generated is: NORMAL MEDIUM");
    130F: 50 02    MOV   A,0x2
    1311: 08       PUSH  A
    1312: 50 0C    MOV   A,0xC
    1314: 5C       MOV   X,A
    1315: 18       POP   A
    1316: 7C 06 5F LCALL _LCD_2_PrCString
    1319: 20       POP   X
(0274) 	}
    131A: 80 C3    JMP   0x13DE
(0275) 	else if (light_label == NORMAL && temp_label == HOT)
    131C: 3D 00 01 CMP   [X+0],0x1
    131F: B0 2D    JNZ   0x134D
    1321: 3D 01 02 CMP   [X+1],0x2
    1324: B0 28    JNZ   0x134D
(0276) 	{
(0277) 		bit_stream = 0x88; //Bit stream : 1000 1000 | Normal light and hot temp condition
    1326: 56 02 88 MOV   [X+2],0x88
(0278) 		*label = NORMAL_HOT;
    1329: 62 D0 00 MOV   REG[0xD0],0x0
    132C: 52 F6    MOV   A,[X-10]
    132E: 53 B9    MOV   [__r1],A
    1330: 52 F5    MOV   A,[X-11]
    1332: 60 D5    MOV   REG[0xD5],A
    1334: 50 05    MOV   A,0x5
    1336: 3F B9    MVI   [__r1],A
(0279) 		LCD_2_Position(0,0);
    1338: 10       PUSH  X
    1339: 50 00    MOV   A,0x0
    133B: 57 00    MOV   X,0x0
    133D: 7C 07 E4 LCALL _LCD_2_Position
(0280) 		LCD_2_PrCString("Word Generated is: NORMAL HOT");
    1340: 50 01    MOV   A,0x1
    1342: 08       PUSH  A
    1343: 50 EE    MOV   A,0xEE
    1345: 5C       MOV   X,A
    1346: 18       POP   A
    1347: 7C 06 5F LCALL _LCD_2_PrCString
    134A: 20       POP   X
(0281) 	}
    134B: 80 92    JMP   0x13DE
(0282) 	else if (light_label == BRIGHT && temp_label == COLD)
    134D: 3D 00 02 CMP   [X+0],0x2
    1350: B0 2D    JNZ   0x137E
    1352: 3D 01 00 CMP   [X+1],0x0
    1355: B0 28    JNZ   0x137E
(0283) 	{
(0284) 		bit_stream = 0x49; //Bit stream : 01001001 | Bright light and cold temp condition
    1357: 56 02 49 MOV   [X+2],0x49
(0285) 		*label = BRIGHT_COLD;
    135A: 62 D0 00 MOV   REG[0xD0],0x0
    135D: 52 F6    MOV   A,[X-10]
    135F: 53 B9    MOV   [__r1],A
    1361: 52 F5    MOV   A,[X-11]
    1363: 60 D5    MOV   REG[0xD5],A
    1365: 50 06    MOV   A,0x6
    1367: 3F B9    MVI   [__r1],A
(0286) 		LCD_2_Position(0,0);
    1369: 10       PUSH  X
    136A: 50 00    MOV   A,0x0
    136C: 57 00    MOV   X,0x0
    136E: 7C 07 E4 LCALL _LCD_2_Position
(0287) 		LCD_2_PrCString("Word Generated is: BRIGHT COLD");
    1371: 50 01    MOV   A,0x1
    1373: 08       PUSH  A
    1374: 50 CF    MOV   A,0xCF
    1376: 5C       MOV   X,A
    1377: 18       POP   A
    1378: 7C 06 5F LCALL _LCD_2_PrCString
    137B: 20       POP   X
(0288) 	}
    137C: 80 61    JMP   0x13DE
(0289) 	else if (light_label == BRIGHT && temp_label == MEDIUM)
    137E: 3D 00 02 CMP   [X+0],0x2
    1381: B0 2D    JNZ   0x13AF
    1383: 3D 01 01 CMP   [X+1],0x1
    1386: B0 28    JNZ   0x13AF
(0290) 	{
(0291) 		bit_stream = 0x4a; //Bit stream : 01001010 | Bright light and medium temp condition
    1388: 56 02 4A MOV   [X+2],0x4A
(0292) 		*label = BRIGHT_MEDIUM;
    138B: 62 D0 00 MOV   REG[0xD0],0x0
    138E: 52 F6    MOV   A,[X-10]
    1390: 53 B9    MOV   [__r1],A
    1392: 52 F5    MOV   A,[X-11]
    1394: 60 D5    MOV   REG[0xD5],A
    1396: 50 07    MOV   A,0x7
    1398: 3F B9    MVI   [__r1],A
(0293) 		LCD_2_Position(0,0);
    139A: 10       PUSH  X
    139B: 50 00    MOV   A,0x0
    139D: 57 00    MOV   X,0x0
    139F: 7C 07 E4 LCALL _LCD_2_Position
(0294) 		LCD_2_PrCString("Word Generated is: BRIGHT MEDIUM");
    13A2: 50 01    MOV   A,0x1
    13A4: 08       PUSH  A
    13A5: 50 AE    MOV   A,0xAE
    13A7: 5C       MOV   X,A
    13A8: 18       POP   A
    13A9: 7C 06 5F LCALL _LCD_2_PrCString
    13AC: 20       POP   X
(0295) 	}
    13AD: 80 30    JMP   0x13DE
(0296) 	else if (light_label == BRIGHT && temp_label == HOT)
    13AF: 3D 00 02 CMP   [X+0],0x2
    13B2: B0 2B    JNZ   0x13DE
    13B4: 3D 01 02 CMP   [X+1],0x2
    13B7: B0 26    JNZ   0x13DE
(0297) 	{
(0298) 		bit_stream = 0x48; //Bit stream : 01001000 | Bright light and hot temp condition
    13B9: 56 02 48 MOV   [X+2],0x48
(0299) 		*label = BRIGHT_HOT;
    13BC: 62 D0 00 MOV   REG[0xD0],0x0
    13BF: 52 F6    MOV   A,[X-10]
    13C1: 53 B9    MOV   [__r1],A
    13C3: 52 F5    MOV   A,[X-11]
    13C5: 60 D5    MOV   REG[0xD5],A
    13C7: 50 08    MOV   A,0x8
    13C9: 3F B9    MVI   [__r1],A
(0300) 		LCD_2_Position(0,0);
    13CB: 10       PUSH  X
    13CC: 50 00    MOV   A,0x0
    13CE: 57 00    MOV   X,0x0
    13D0: 7C 07 E4 LCALL _LCD_2_Position
(0301) 		LCD_2_PrCString("Word Generated is: BRIGHT HOT");
    13D3: 50 01    MOV   A,0x1
    13D5: 08       PUSH  A
    13D6: 50 90    MOV   A,0x90
    13D8: 5C       MOV   X,A
    13D9: 18       POP   A
    13DA: 7C 06 5F LCALL _LCD_2_PrCString
    13DD: 20       POP   X
(0302) 	}
(0303) 	return bit_stream;// return word encoding
    13DE: 52 02    MOV   A,[X+2]
    13E0: 62 D0 00 MOV   REG[0xD0],0x0
    13E3: 38 FD    ADD   SP,0xFD
    13E5: 20       POP   X
    13E6: 7F       RET   
(0304) }
(0305) 
(0306) 
(0307) BOOL update_table(BYTE word_encoding, vocabTable_type* table, char * label)
(0308) {
_update_table:
  found                --> X+2
  i                    --> X+0
  label                --> X-8
  table                --> X-6
  word_encoding        --> X-4
    13E7: 10       PUSH  X
    13E8: 4F       MOV   X,SP
    13E9: 38 03    ADD   SP,0x3
(0309) 	int i;
(0310) 	BOOL found = FALSE;
    13EB: 56 02 00 MOV   [X+2],0x0
(0311) 	for (i= 0; i< SIZE; i++)
    13EE: 56 01 00 MOV   [X+1],0x0
    13F1: 56 00 00 MOV   [X+0],0x0
(0312) 	{
(0313) 		table[i].age++;
    13F4: 62 D0 00 MOV   REG[0xD0],0x0
    13F7: 52 01    MOV   A,[X+1]
    13F9: 53 B9    MOV   [__r1],A
    13FB: 52 00    MOV   A,[X+0]
    13FD: 53 BA    MOV   [__r0],A
    13FF: 65 B9    ASL   [__r1]
    1401: 6B BA    RLC   [__r0]
    1403: 65 B9    ASL   [__r1]
    1405: 6B BA    RLC   [__r0]
    1407: 52 FB    MOV   A,[X-5]
    1409: 04 B9    ADD   [__r1],A
    140B: 52 FA    MOV   A,[X-6]
    140D: 0C BA    ADC   [__r0],A
    140F: 06 B9 03 ADD   [__r1],0x3
    1412: 0E BA 00 ADC   [__r0],0x0
    1415: 51 BA    MOV   A,[__r0]
    1417: 60 D4    MOV   REG[0xD4],A
    1419: 3E B9    MVI   A,[__r1]
    141B: 7A B9    DEC   [__r1]
    141D: 53 B8    MOV   [__r2],A
    141F: 06 B8 01 ADD   [__r2],0x1
    1422: 51 BA    MOV   A,[__r0]
    1424: 60 D5    MOV   REG[0xD5],A
    1426: 51 B8    MOV   A,[__r2]
    1428: 3F B9    MVI   [__r1],A
(0314) 		if (table[i].word == word_encoding)
    142A: 52 01    MOV   A,[X+1]
    142C: 53 B9    MOV   [__r1],A
    142E: 52 00    MOV   A,[X+0]
    1430: 53 BA    MOV   [__r0],A
    1432: 65 B9    ASL   [__r1]
    1434: 6B BA    RLC   [__r0]
    1436: 65 B9    ASL   [__r1]
    1438: 6B BA    RLC   [__r0]
    143A: 52 FB    MOV   A,[X-5]
    143C: 04 B9    ADD   [__r1],A
    143E: 52 FA    MOV   A,[X-6]
    1440: 0C BA    ADC   [__r0],A
    1442: 51 BA    MOV   A,[__r0]
    1444: 60 D4    MOV   REG[0xD4],A
    1446: 3E B9    MVI   A,[__r1]
    1448: 3B FC    CMP   A,[X-4]
    144A: B0 37    JNZ   0x1482
(0315) 		{
(0316) 			found =TRUE;
    144C: 56 02 01 MOV   [X+2],0x1
(0317) 			table[i].frequency++;
    144F: 52 01    MOV   A,[X+1]
    1451: 53 B9    MOV   [__r1],A
    1453: 52 00    MOV   A,[X+0]
    1455: 53 BA    MOV   [__r0],A
    1457: 65 B9    ASL   [__r1]
    1459: 6B BA    RLC   [__r0]
    145B: 65 B9    ASL   [__r1]
    145D: 6B BA    RLC   [__r0]
    145F: 52 FB    MOV   A,[X-5]
    1461: 04 B9    ADD   [__r1],A
    1463: 52 FA    MOV   A,[X-6]
    1465: 0C BA    ADC   [__r0],A
    1467: 06 B9 02 ADD   [__r1],0x2
    146A: 0E BA 00 ADC   [__r0],0x0
    146D: 51 BA    MOV   A,[__r0]
    146F: 60 D4    MOV   REG[0xD4],A
    1471: 3E B9    MVI   A,[__r1]
    1473: 7A B9    DEC   [__r1]
    1475: 53 B8    MOV   [__r2],A
    1477: 06 B8 01 ADD   [__r2],0x1
    147A: 51 BA    MOV   A,[__r0]
    147C: 60 D5    MOV   REG[0xD5],A
    147E: 51 B8    MOV   A,[__r2]
    1480: 3F B9    MVI   [__r1],A
(0318) 		}
(0319) 	}
    1482: 77 01    INC   [X+1]
    1484: 0F 00 00 ADC   [X+0],0x0
    1487: 52 01    MOV   A,[X+1]
    1489: 11 14    SUB   A,0x14
    148B: 52 00    MOV   A,[X+0]
    148D: 31 80    XOR   A,0x80
    148F: 19 80    SBB   A,0x80
    1491: CF 62    JC    0x13F4
(0320) 	if (found == FALSE)
    1493: 3D 02 00 CMP   [X+2],0x0
    1496: B0 A2    JNZ   0x1539
(0321) 	{	
(0322) 		table[i].word = word_encoding;
    1498: 62 D0 00 MOV   REG[0xD0],0x0
    149B: 52 01    MOV   A,[X+1]
    149D: 53 B9    MOV   [__r1],A
    149F: 52 00    MOV   A,[X+0]
    14A1: 53 BA    MOV   [__r0],A
    14A3: 65 B9    ASL   [__r1]
    14A5: 6B BA    RLC   [__r0]
    14A7: 65 B9    ASL   [__r1]
    14A9: 6B BA    RLC   [__r0]
    14AB: 52 FB    MOV   A,[X-5]
    14AD: 04 B9    ADD   [__r1],A
    14AF: 52 FA    MOV   A,[X-6]
    14B1: 0C BA    ADC   [__r0],A
    14B3: 51 BA    MOV   A,[__r0]
    14B5: 60 D5    MOV   REG[0xD5],A
    14B7: 52 FC    MOV   A,[X-4]
    14B9: 3F B9    MVI   [__r1],A
(0323) 		table[i].frequency = 1;
    14BB: 52 01    MOV   A,[X+1]
    14BD: 53 B9    MOV   [__r1],A
    14BF: 52 00    MOV   A,[X+0]
    14C1: 53 BA    MOV   [__r0],A
    14C3: 65 B9    ASL   [__r1]
    14C5: 6B BA    RLC   [__r0]
    14C7: 65 B9    ASL   [__r1]
    14C9: 6B BA    RLC   [__r0]
    14CB: 52 FB    MOV   A,[X-5]
    14CD: 04 B9    ADD   [__r1],A
    14CF: 52 FA    MOV   A,[X-6]
    14D1: 0C BA    ADC   [__r0],A
    14D3: 06 B9 02 ADD   [__r1],0x2
    14D6: 0E BA 00 ADC   [__r0],0x0
    14D9: 51 BA    MOV   A,[__r0]
    14DB: 60 D5    MOV   REG[0xD5],A
    14DD: 50 01    MOV   A,0x1
    14DF: 3F B9    MVI   [__r1],A
(0324) 		table[i].age = 1;
    14E1: 52 01    MOV   A,[X+1]
    14E3: 53 B9    MOV   [__r1],A
    14E5: 52 00    MOV   A,[X+0]
    14E7: 53 BA    MOV   [__r0],A
    14E9: 65 B9    ASL   [__r1]
    14EB: 6B BA    RLC   [__r0]
    14ED: 65 B9    ASL   [__r1]
    14EF: 6B BA    RLC   [__r0]
    14F1: 52 FB    MOV   A,[X-5]
    14F3: 04 B9    ADD   [__r1],A
    14F5: 52 FA    MOV   A,[X-6]
    14F7: 0C BA    ADC   [__r0],A
    14F9: 06 B9 03 ADD   [__r1],0x3
    14FC: 0E BA 00 ADC   [__r0],0x0
    14FF: 51 BA    MOV   A,[__r0]
    1501: 60 D5    MOV   REG[0xD5],A
    1503: 50 01    MOV   A,0x1
    1505: 3F B9    MVI   [__r1],A
(0325) 		table[i].label = *label;
    1507: 52 F9    MOV   A,[X-7]
    1509: 53 B9    MOV   [__r1],A
    150B: 52 F8    MOV   A,[X-8]
    150D: 60 D4    MOV   REG[0xD4],A
    150F: 3E B9    MVI   A,[__r1]
    1511: 53 BA    MOV   [__r0],A
    1513: 52 01    MOV   A,[X+1]
    1515: 53 B7    MOV   [__r3],A
    1517: 52 00    MOV   A,[X+0]
    1519: 53 B8    MOV   [__r2],A
    151B: 65 B7    ASL   [__r3]
    151D: 6B B8    RLC   [__r2]
    151F: 65 B7    ASL   [__r3]
    1521: 6B B8    RLC   [__r2]
    1523: 52 FB    MOV   A,[X-5]
    1525: 04 B7    ADD   [__r3],A
    1527: 52 FA    MOV   A,[X-6]
    1529: 0C B8    ADC   [__r2],A
    152B: 06 B7 01 ADD   [__r3],0x1
    152E: 0E B8 00 ADC   [__r2],0x0
    1531: 51 B8    MOV   A,[__r2]
    1533: 60 D5    MOV   REG[0xD5],A
    1535: 51 BA    MOV   A,[__r0]
    1537: 3F B7    MVI   [__r3],A
(0326) 	}
(0327) return found;
    1539: 52 02    MOV   A,[X+2]
    153B: 62 D0 00 MOV   REG[0xD0],0x0
    153E: 38 FD    ADD   SP,0xFD
    1540: 20       POP   X
    1541: 7F       RET   
(0328) }
(0329) 
(0330) // Sort Algorithm for tables based on quick sort
(0331) 
(0332) void swap(vocabTable_type* a, vocabTable_type* b)
(0333) {
_swap:
  temp                 --> X+0
  b                    --> X-7
  a                    --> X-5
    1542: 10       PUSH  X
    1543: 4F       MOV   X,SP
    1544: 38 04    ADD   SP,0x4
(0334)     vocabTable_type temp = *a;
    1546: 62 D0 00 MOV   REG[0xD0],0x0
    1549: 52 FC    MOV   A,[X-4]
    154B: 53 B9    MOV   [__r1],A
    154D: 52 FB    MOV   A,[X-5]
    154F: 5A B7    MOV   [__r3],X
    1551: 60 D4    MOV   REG[0xD4],A
    1553: 62 D5 03 MOV   REG[0xD5],0x3
    1556: 3E B9    MVI   A,[__r1]
    1558: 3F B7    MVI   [__r3],A
    155A: 3E B9    MVI   A,[__r1]
    155C: 3F B7    MVI   [__r3],A
    155E: 3E B9    MVI   A,[__r1]
    1560: 3F B7    MVI   [__r3],A
    1562: 3E B9    MVI   A,[__r1]
    1564: 3F B7    MVI   [__r3],A
(0335)     *a = *b;
    1566: 52 FA    MOV   A,[X-6]
    1568: 53 B9    MOV   [__r1],A
    156A: 52 F9    MOV   A,[X-7]
    156C: 53 BA    MOV   [__r0],A
    156E: 52 FC    MOV   A,[X-4]
    1570: 53 B7    MOV   [__r3],A
    1572: 52 FB    MOV   A,[X-5]
    1574: 53 B8    MOV   [__r2],A
    1576: 51 BA    MOV   A,[__r0]
    1578: 60 D4    MOV   REG[0xD4],A
    157A: 51 B8    MOV   A,[__r2]
    157C: 60 D5    MOV   REG[0xD5],A
    157E: 3E B9    MVI   A,[__r1]
    1580: 3F B7    MVI   [__r3],A
    1582: 3E B9    MVI   A,[__r1]
    1584: 3F B7    MVI   [__r3],A
    1586: 3E B9    MVI   A,[__r1]
    1588: 3F B7    MVI   [__r3],A
    158A: 3E B9    MVI   A,[__r1]
    158C: 3F B7    MVI   [__r3],A
(0336)     *b = temp;
    158E: 5A B9    MOV   [__r1],X
    1590: 52 FA    MOV   A,[X-6]
    1592: 53 B7    MOV   [__r3],A
    1594: 52 F9    MOV   A,[X-7]
    1596: 62 D4 03 MOV   REG[0xD4],0x3
    1599: 60 D5    MOV   REG[0xD5],A
    159B: 3E B9    MVI   A,[__r1]
    159D: 3F B7    MVI   [__r3],A
    159F: 3E B9    MVI   A,[__r1]
    15A1: 3F B7    MVI   [__r3],A
    15A3: 3E B9    MVI   A,[__r1]
    15A5: 3F B7    MVI   [__r3],A
    15A7: 3E B9    MVI   A,[__r1]
    15A9: 3F B7    MVI   [__r3],A
    15AB: 38 FC    ADD   SP,0xFC
    15AD: 20       POP   X
    15AE: 7F       RET   
(0337) }
(0338) 
(0339) int part(vocabTable_type arr[], int l, int h)
(0340) {
_part:
  x                    --> X+4
  i                    --> X+2
  j                    --> X+0
  h                    --> X-9
  l                    --> X-7
  arr                  --> X-5
    15AF: 10       PUSH  X
    15B0: 4F       MOV   X,SP
    15B1: 38 06    ADD   SP,0x6
(0341)     int x = arr[h].frequency;
    15B3: 62 D0 00 MOV   REG[0xD0],0x0
    15B6: 52 F8    MOV   A,[X-8]
    15B8: 53 B9    MOV   [__r1],A
    15BA: 52 F7    MOV   A,[X-9]
    15BC: 53 BA    MOV   [__r0],A
    15BE: 65 B9    ASL   [__r1]
    15C0: 6B BA    RLC   [__r0]
    15C2: 65 B9    ASL   [__r1]
    15C4: 6B BA    RLC   [__r0]
    15C6: 52 FC    MOV   A,[X-4]
    15C8: 04 B9    ADD   [__r1],A
    15CA: 52 FB    MOV   A,[X-5]
    15CC: 0C BA    ADC   [__r0],A
    15CE: 06 B9 02 ADD   [__r1],0x2
    15D1: 0E BA 00 ADC   [__r0],0x0
    15D4: 51 BA    MOV   A,[__r0]
    15D6: 60 D4    MOV   REG[0xD4],A
    15D8: 3E B9    MVI   A,[__r1]
    15DA: 54 05    MOV   [X+5],A
    15DC: 56 04 00 MOV   [X+4],0x0
(0342)     int i = (l - 1);
    15DF: 52 FA    MOV   A,[X-6]
    15E1: 11 01    SUB   A,0x1
    15E3: 54 03    MOV   [X+3],A
    15E5: 52 F9    MOV   A,[X-7]
    15E7: 19 00    SBB   A,0x0
    15E9: 54 02    MOV   [X+2],A
(0343)  	int j; 
(0344)     for ( j = l; j <= h - 1; j++) 
    15EB: 52 FA    MOV   A,[X-6]
    15ED: 54 01    MOV   [X+1],A
    15EF: 52 F9    MOV   A,[X-7]
    15F1: 54 00    MOV   [X+0],A
    15F3: 80 85    JMP   0x1679
(0345) 	{
(0346)         if (arr[j].frequency >= x) 
    15F5: 62 D0 00 MOV   REG[0xD0],0x0
    15F8: 52 01    MOV   A,[X+1]
    15FA: 53 B9    MOV   [__r1],A
    15FC: 52 00    MOV   A,[X+0]
    15FE: 53 BA    MOV   [__r0],A
    1600: 65 B9    ASL   [__r1]
    1602: 6B BA    RLC   [__r0]
    1604: 65 B9    ASL   [__r1]
    1606: 6B BA    RLC   [__r0]
    1608: 52 FC    MOV   A,[X-4]
    160A: 04 B9    ADD   [__r1],A
    160C: 52 FB    MOV   A,[X-5]
    160E: 0C BA    ADC   [__r0],A
    1610: 06 B9 02 ADD   [__r1],0x2
    1613: 0E BA 00 ADC   [__r0],0x0
    1616: 51 BA    MOV   A,[__r0]
    1618: 60 D4    MOV   REG[0xD4],A
    161A: 3E B9    MVI   A,[__r1]
    161C: 13 05    SUB   A,[X+5]
    161E: 52 04    MOV   A,[X+4]
    1620: 31 80    XOR   A,0x80
    1622: 53 B6    MOV   [__rX],A
    1624: 50 00    MOV   A,0x0
    1626: 31 80    XOR   A,0x80
    1628: 1A B6    SBB   A,[__rX]
    162A: C0 49    JC    0x1674
(0347) 		{
(0348)             i++;
    162C: 77 03    INC   [X+3]
    162E: 0F 02 00 ADC   [X+2],0x0
(0349)             swap(&arr[i], &arr[j]);
    1631: 62 D0 00 MOV   REG[0xD0],0x0
    1634: 52 01    MOV   A,[X+1]
    1636: 53 B9    MOV   [__r1],A
    1638: 52 00    MOV   A,[X+0]
    163A: 53 BA    MOV   [__r0],A
    163C: 65 B9    ASL   [__r1]
    163E: 6B BA    RLC   [__r0]
    1640: 65 B9    ASL   [__r1]
    1642: 6B BA    RLC   [__r0]
    1644: 52 FC    MOV   A,[X-4]
    1646: 04 B9    ADD   [__r1],A
    1648: 52 FB    MOV   A,[X-5]
    164A: 0C BA    ADC   [__r0],A
    164C: 51 BA    MOV   A,[__r0]
    164E: 08       PUSH  A
    164F: 51 B9    MOV   A,[__r1]
    1651: 08       PUSH  A
    1652: 52 03    MOV   A,[X+3]
    1654: 53 B9    MOV   [__r1],A
    1656: 52 02    MOV   A,[X+2]
    1658: 53 BA    MOV   [__r0],A
    165A: 65 B9    ASL   [__r1]
    165C: 6B BA    RLC   [__r0]
    165E: 65 B9    ASL   [__r1]
    1660: 6B BA    RLC   [__r0]
    1662: 52 FC    MOV   A,[X-4]
    1664: 04 B9    ADD   [__r1],A
    1666: 52 FB    MOV   A,[X-5]
    1668: 0C BA    ADC   [__r0],A
    166A: 51 BA    MOV   A,[__r0]
    166C: 08       PUSH  A
    166D: 51 B9    MOV   A,[__r1]
    166F: 08       PUSH  A
    1670: 9E D0    CALL  _swap
    1672: 38 FC    ADD   SP,0xFC
(0350)         }
(0351)     }
    1674: 77 01    INC   [X+1]
    1676: 0F 00 00 ADC   [X+0],0x0
    1679: 62 D0 00 MOV   REG[0xD0],0x0
    167C: 52 F8    MOV   A,[X-8]
    167E: 11 01    SUB   A,0x1
    1680: 53 B9    MOV   [__r1],A
    1682: 52 F7    MOV   A,[X-9]
    1684: 19 00    SBB   A,0x0
    1686: 53 BA    MOV   [__r0],A
    1688: 51 B9    MOV   A,[__r1]
    168A: 13 01    SUB   A,[X+1]
    168C: 52 00    MOV   A,[X+0]
    168E: 31 80    XOR   A,0x80
    1690: 53 B6    MOV   [__rX],A
    1692: 51 BA    MOV   A,[__r0]
    1694: 31 80    XOR   A,0x80
    1696: 1A B6    SBB   A,[__rX]
    1698: DF 5C    JNC   0x15F5
(0352)     swap(&arr[i + 1], &arr[h]);
    169A: 62 D0 00 MOV   REG[0xD0],0x0
    169D: 52 F8    MOV   A,[X-8]
    169F: 53 B9    MOV   [__r1],A
    16A1: 52 F7    MOV   A,[X-9]
    16A3: 53 BA    MOV   [__r0],A
    16A5: 65 B9    ASL   [__r1]
    16A7: 6B BA    RLC   [__r0]
    16A9: 65 B9    ASL   [__r1]
    16AB: 6B BA    RLC   [__r0]
    16AD: 52 FC    MOV   A,[X-4]
    16AF: 04 B9    ADD   [__r1],A
    16B1: 52 FB    MOV   A,[X-5]
    16B3: 0C BA    ADC   [__r0],A
    16B5: 51 BA    MOV   A,[__r0]
    16B7: 08       PUSH  A
    16B8: 51 B9    MOV   A,[__r1]
    16BA: 08       PUSH  A
    16BB: 52 03    MOV   A,[X+3]
    16BD: 01 01    ADD   A,0x1
    16BF: 53 B9    MOV   [__r1],A
    16C1: 52 02    MOV   A,[X+2]
    16C3: 09 00    ADC   A,0x0
    16C5: 53 BA    MOV   [__r0],A
    16C7: 65 B9    ASL   [__r1]
    16C9: 6B BA    RLC   [__r0]
    16CB: 65 B9    ASL   [__r1]
    16CD: 6B BA    RLC   [__r0]
    16CF: 52 FC    MOV   A,[X-4]
    16D1: 04 B9    ADD   [__r1],A
    16D3: 52 FB    MOV   A,[X-5]
    16D5: 0C BA    ADC   [__r0],A
    16D7: 51 BA    MOV   A,[__r0]
    16D9: 08       PUSH  A
    16DA: 51 B9    MOV   A,[__r1]
    16DC: 08       PUSH  A
    16DD: 9E 63    CALL  _swap
    16DF: 38 FC    ADD   SP,0xFC
(0353)     return (i + 1);
    16E1: 62 D0 00 MOV   REG[0xD0],0x0
    16E4: 52 03    MOV   A,[X+3]
    16E6: 01 01    ADD   A,0x1
    16E8: 53 B9    MOV   [__r1],A
    16EA: 52 02    MOV   A,[X+2]
    16EC: 09 00    ADC   A,0x0
    16EE: 53 BA    MOV   [__r0],A
    16F0: 38 FA    ADD   SP,0xFA
    16F2: 20       POP   X
    16F3: 7F       RET   
(0354) }
(0355) 
(0356) void quickSort(vocabTable_type A[], int l, int h)
(0357) {
_quickSort:
  p                    --> X+0
  h                    --> X-9
  l                    --> X-7
  A                    --> X-5
    16F4: 10       PUSH  X
    16F5: 4F       MOV   X,SP
    16F6: 38 02    ADD   SP,0x2
(0358)     if (l < h) {
    16F8: 52 FA    MOV   A,[X-6]
    16FA: 13 F8    SUB   A,[X-8]
    16FC: 52 F7    MOV   A,[X-9]
    16FE: 31 80    XOR   A,0x80
    1700: 62 D0 00 MOV   REG[0xD0],0x0
    1703: 53 B6    MOV   [__rX],A
    1705: 52 F9    MOV   A,[X-7]
    1707: 31 80    XOR   A,0x80
    1709: 1A B6    SBB   A,[__rX]
    170B: D0 5F    JNC   0x176B
(0359)         int p = part(A, l, h);
    170D: 52 F7    MOV   A,[X-9]
    170F: 08       PUSH  A
    1710: 52 F8    MOV   A,[X-8]
    1712: 08       PUSH  A
    1713: 52 F9    MOV   A,[X-7]
    1715: 08       PUSH  A
    1716: 52 FA    MOV   A,[X-6]
    1718: 08       PUSH  A
    1719: 52 FB    MOV   A,[X-5]
    171B: 08       PUSH  A
    171C: 52 FC    MOV   A,[X-4]
    171E: 08       PUSH  A
    171F: 9E 8E    CALL  _part
    1721: 38 FA    ADD   SP,0xFA
    1723: 62 D0 00 MOV   REG[0xD0],0x0
    1726: 51 B9    MOV   A,[__r1]
    1728: 54 01    MOV   [X+1],A
    172A: 51 BA    MOV   A,[__r0]
    172C: 54 00    MOV   [X+0],A
(0360)         quickSort(A, l, p - 1);
    172E: 52 01    MOV   A,[X+1]
    1730: 11 01    SUB   A,0x1
    1732: 53 B9    MOV   [__r1],A
    1734: 52 00    MOV   A,[X+0]
    1736: 19 00    SBB   A,0x0
    1738: 08       PUSH  A
    1739: 51 B9    MOV   A,[__r1]
    173B: 08       PUSH  A
    173C: 52 F9    MOV   A,[X-7]
    173E: 08       PUSH  A
    173F: 52 FA    MOV   A,[X-6]
    1741: 08       PUSH  A
    1742: 52 FB    MOV   A,[X-5]
    1744: 08       PUSH  A
    1745: 52 FC    MOV   A,[X-4]
    1747: 08       PUSH  A
    1748: 9F AA    CALL  _quickSort
(0361)         quickSort(A, p + 1, h);
    174A: 52 F7    MOV   A,[X-9]
    174C: 08       PUSH  A
    174D: 52 F8    MOV   A,[X-8]
    174F: 08       PUSH  A
    1750: 62 D0 00 MOV   REG[0xD0],0x0
    1753: 52 01    MOV   A,[X+1]
    1755: 01 01    ADD   A,0x1
    1757: 53 B9    MOV   [__r1],A
    1759: 52 00    MOV   A,[X+0]
    175B: 09 00    ADC   A,0x0
    175D: 08       PUSH  A
    175E: 51 B9    MOV   A,[__r1]
    1760: 08       PUSH  A
    1761: 52 FB    MOV   A,[X-5]
    1763: 08       PUSH  A
    1764: 52 FC    MOV   A,[X-4]
    1766: 08       PUSH  A
    1767: 9F 8B    CALL  _quickSort
    1769: 38 F4    ADD   SP,0xF4
(0362)     }
    176B: 38 FE    ADD   SP,0xFE
    176D: 20       POP   X
    176E: 7F       RET   
(0363) }
(0364) 
(0365) void remove(BYTE freq_threshold,vocabTable_type* table )
(0366) {
_remove:
  i                    --> X+0
  table                --> X-6
  freq_threshold       --> X-4
    176F: 10       PUSH  X
    1770: 4F       MOV   X,SP
    1771: 38 02    ADD   SP,0x2
(0367) 	int i;
(0368) 	for(i= 0; i< SIZE; i++)
    1773: 56 01 00 MOV   [X+1],0x0
    1776: 56 00 00 MOV   [X+0],0x0
(0369) 	{	
(0370) 		if(table[i].frequency < freq_threshold)
    1779: 62 D0 00 MOV   REG[0xD0],0x0
    177C: 52 01    MOV   A,[X+1]
    177E: 53 B9    MOV   [__r1],A
    1780: 52 00    MOV   A,[X+0]
    1782: 53 BA    MOV   [__r0],A
    1784: 65 B9    ASL   [__r1]
    1786: 6B BA    RLC   [__r0]
    1788: 65 B9    ASL   [__r1]
    178A: 6B BA    RLC   [__r0]
    178C: 52 FB    MOV   A,[X-5]
    178E: 04 B9    ADD   [__r1],A
    1790: 52 FA    MOV   A,[X-6]
    1792: 0C BA    ADC   [__r0],A
    1794: 06 B9 02 ADD   [__r1],0x2
    1797: 0E BA 00 ADC   [__r0],0x0
    179A: 51 BA    MOV   A,[__r0]
    179C: 60 D4    MOV   REG[0xD4],A
    179E: 3E B9    MVI   A,[__r1]
    17A0: 3B FC    CMP   A,[X-4]
    17A2: D0 70    JNC   0x1813
(0371) 		{
(0372) 			// Remove the old word and details and initial with zero
(0373) 			table[i].word= 0;
    17A4: 62 D0 00 MOV   REG[0xD0],0x0
    17A7: 52 01    MOV   A,[X+1]
    17A9: 53 B9    MOV   [__r1],A
    17AB: 52 00    MOV   A,[X+0]
    17AD: 53 BA    MOV   [__r0],A
    17AF: 65 B9    ASL   [__r1]
    17B1: 6B BA    RLC   [__r0]
    17B3: 65 B9    ASL   [__r1]
    17B5: 6B BA    RLC   [__r0]
    17B7: 52 FB    MOV   A,[X-5]
    17B9: 04 B9    ADD   [__r1],A
    17BB: 52 FA    MOV   A,[X-6]
    17BD: 0C BA    ADC   [__r0],A
    17BF: 51 BA    MOV   A,[__r0]
    17C1: 60 D5    MOV   REG[0xD5],A
    17C3: 50 00    MOV   A,0x0
    17C5: 3F B9    MVI   [__r1],A
(0374) 			table[i].frequency = 0;
    17C7: 52 01    MOV   A,[X+1]
    17C9: 53 B9    MOV   [__r1],A
    17CB: 52 00    MOV   A,[X+0]
    17CD: 53 BA    MOV   [__r0],A
    17CF: 65 B9    ASL   [__r1]
    17D1: 6B BA    RLC   [__r0]
    17D3: 65 B9    ASL   [__r1]
    17D5: 6B BA    RLC   [__r0]
    17D7: 52 FB    MOV   A,[X-5]
    17D9: 04 B9    ADD   [__r1],A
    17DB: 52 FA    MOV   A,[X-6]
    17DD: 0C BA    ADC   [__r0],A
    17DF: 06 B9 02 ADD   [__r1],0x2
    17E2: 0E BA 00 ADC   [__r0],0x0
    17E5: 51 BA    MOV   A,[__r0]
    17E7: 60 D5    MOV   REG[0xD5],A
    17E9: 50 00    MOV   A,0x0
    17EB: 3F B9    MVI   [__r1],A
(0375) 			table[i].age= 0;
    17ED: 52 01    MOV   A,[X+1]
    17EF: 53 B9    MOV   [__r1],A
    17F1: 52 00    MOV   A,[X+0]
    17F3: 53 BA    MOV   [__r0],A
    17F5: 65 B9    ASL   [__r1]
    17F7: 6B BA    RLC   [__r0]
    17F9: 65 B9    ASL   [__r1]
    17FB: 6B BA    RLC   [__r0]
    17FD: 52 FB    MOV   A,[X-5]
    17FF: 04 B9    ADD   [__r1],A
    1801: 52 FA    MOV   A,[X-6]
    1803: 0C BA    ADC   [__r0],A
    1805: 06 B9 03 ADD   [__r1],0x3
    1808: 0E BA 00 ADC   [__r0],0x0
    180B: 51 BA    MOV   A,[__r0]
    180D: 60 D5    MOV   REG[0xD5],A
    180F: 50 00    MOV   A,0x0
    1811: 3F B9    MVI   [__r1],A
(0376) 		}
(0377) 	}
    1813: 77 01    INC   [X+1]
    1815: 0F 00 00 ADC   [X+0],0x0
    1818: 52 01    MOV   A,[X+1]
    181A: 11 14    SUB   A,0x14
    181C: 52 00    MOV   A,[X+0]
    181E: 31 80    XOR   A,0x80
    1820: 19 80    SBB   A,0x80
    1822: CF 56    JC    0x1779
    1824: 38 FE    ADD   SP,0xFE
    1826: 20       POP   X
    1827: 7F       RET   
(0378) 	
(0379) }
(0380) INT read_temperature(void)
(0381) {
_read_temperature:
  Temperature          --> X+2
  LowerByte            --> X+1
  UpperByte            --> X+0
    1828: 10       PUSH  X
    1829: 4F       MOV   X,SP
    182A: 38 04    ADD   SP,0x4
(0382) 	BYTE UpperByte = 0;
    182C: 56 00 00 MOV   [X+0],0x0
(0383) 	BYTE LowerByte = 0;
    182F: 56 01 00 MOV   [X+1],0x0
(0384) 	INT Temperature =0;
    1832: 56 03 00 MOV   [X+3],0x0
    1835: 56 02 00 MOV   [X+2],0x0
(0385) 	
(0386) 	I2CHW_Temp_fSendStart(TEMP_SENSOR_SLAVE_ADDRESS, I2CHW_Temp_WRITE);
    1838: 10       PUSH  X
    1839: 57 00    MOV   X,0x0
    183B: 50 18    MOV   A,0x18
    183D: 7C 0A 44 LCALL _I2CHW_Temp_fSendStart
    1840: 20       POP   X
    1841: 62 D0 00 MOV   REG[0xD0],0x0
(0387) 	I2CHW_Temp_fWrite(TEMP_REG);
    1844: 10       PUSH  X
    1845: 50 05    MOV   A,0x5
    1847: 7C 0A 88 LCALL _I2CHW_Temp_fWrite
    184A: 20       POP   X
    184B: 62 D0 00 MOV   REG[0xD0],0x0
(0388) 	I2CHW_Temp_SendStop();
    184E: 10       PUSH  X
    184F: 7C 0A FE LCALL _I2CHW_Temp_SendStop
(0389) 	I2CHW_Temp_fSendStart(TEMP_SENSOR_SLAVE_ADDRESS, I2CHW_Temp_READ);
    1852: 57 01    MOV   X,0x1
    1854: 50 18    MOV   A,0x18
    1856: 7C 0A 44 LCALL _I2CHW_Temp_fSendStart
    1859: 20       POP   X
    185A: 62 D0 00 MOV   REG[0xD0],0x0
(0390) 	UpperByte = I2CHW_Temp_bRead(I2CHW_Temp_ACKslave);
    185D: 10       PUSH  X
    185E: 50 01    MOV   A,0x1
    1860: 7C 0A C8 LCALL _I2CHW_Temp_bRead
    1863: 20       POP   X
    1864: 62 D0 00 MOV   REG[0xD0],0x0
    1867: 54 00    MOV   [X+0],A
(0391) 	LowerByte = I2CHW_Temp_bRead(I2CHW_Temp_NAKslave);
    1869: 10       PUSH  X
    186A: 50 00    MOV   A,0x0
    186C: 7C 0A C8 LCALL _I2CHW_Temp_bRead
    186F: 20       POP   X
    1870: 62 D0 00 MOV   REG[0xD0],0x0
    1873: 54 01    MOV   [X+1],A
(0392) 	I2CHW_Temp_SendStop();
    1875: 10       PUSH  X
    1876: 7C 0A FE LCALL _I2CHW_Temp_SendStop
    1879: 20       POP   X
(0393) 	
(0394) 	UpperByte = UpperByte & 0x1F; //Clear flag bits
    187A: 27 00 1F AND   [X+0],0x1F
(0395) 	
(0396) 	if ((UpperByte & 0x10) == 0x10){ //TA < 0°C
    187D: 62 D0 00 MOV   REG[0xD0],0x0
    1880: 52 00    MOV   A,[X+0]
    1882: 21 10    AND   A,0x10
    1884: 39 10    CMP   A,0x10
    1886: B0 50    JNZ   0x18D7
(0397) 	UpperByte = UpperByte & 0x0F;//Clear SIGN
    1888: 27 00 0F AND   [X+0],0xF
(0398) 	Temperature = 256 - (UpperByte * 16 + LowerByte / 16);
    188B: 52 01    MOV   A,[X+1]
    188D: 53 B9    MOV   [__r1],A
    188F: 50 00    MOV   A,0x0
    1891: 08       PUSH  A
    1892: 50 10    MOV   A,0x10
    1894: 08       PUSH  A
    1895: 50 00    MOV   A,0x0
    1897: 08       PUSH  A
    1898: 51 B9    MOV   A,[__r1]
    189A: 08       PUSH  A
    189B: 7C 21 EE LCALL 0x21EE
    189E: 18       POP   A
    189F: 53 B9    MOV   [__r1],A
    18A1: 18       POP   A
    18A2: 53 BA    MOV   [__r0],A
    18A4: 38 FE    ADD   SP,0xFE
    18A6: 52 00    MOV   A,[X+0]
    18A8: 53 B7    MOV   [__r3],A
    18AA: 55 B8 00 MOV   [__r2],0x0
    18AD: 65 B7    ASL   [__r3]
    18AF: 6B B8    RLC   [__r2]
    18B1: 65 B7    ASL   [__r3]
    18B3: 6B B8    RLC   [__r2]
    18B5: 65 B7    ASL   [__r3]
    18B7: 6B B8    RLC   [__r2]
    18B9: 65 B7    ASL   [__r3]
    18BB: 6B B8    RLC   [__r2]
    18BD: 51 B7    MOV   A,[__r3]
    18BF: 02 B9    ADD   A,[__r1]
    18C1: 53 B9    MOV   [__r1],A
    18C3: 51 B8    MOV   A,[__r2]
    18C5: 0A BA    ADC   A,[__r0]
    18C7: 53 BA    MOV   [__r0],A
    18C9: 50 00    MOV   A,0x0
    18CB: 12 B9    SUB   A,[__r1]
    18CD: 54 03    MOV   [X+3],A
    18CF: 50 01    MOV   A,0x1
    18D1: 1A BA    SBB   A,[__r0]
    18D3: 54 02    MOV   [X+2],A
(0399) 	}else //TA ≥ 0°C*/
    18D5: 80 42    JMP   0x1918
(0400) 	Temperature = (UpperByte * 16 + LowerByte / 16);//Temperature = Ambient Temperature (°C)
    18D7: 62 D0 00 MOV   REG[0xD0],0x0
    18DA: 52 01    MOV   A,[X+1]
    18DC: 53 B9    MOV   [__r1],A
    18DE: 50 00    MOV   A,0x0
    18E0: 08       PUSH  A
    18E1: 50 10    MOV   A,0x10
    18E3: 08       PUSH  A
    18E4: 50 00    MOV   A,0x0
    18E6: 08       PUSH  A
    18E7: 51 B9    MOV   A,[__r1]
    18E9: 08       PUSH  A
    18EA: 7C 21 EE LCALL 0x21EE
    18ED: 18       POP   A
    18EE: 53 B9    MOV   [__r1],A
    18F0: 18       POP   A
    18F1: 53 BA    MOV   [__r0],A
    18F3: 38 FE    ADD   SP,0xFE
    18F5: 52 00    MOV   A,[X+0]
    18F7: 53 B7    MOV   [__r3],A
    18F9: 55 B8 00 MOV   [__r2],0x0
    18FC: 65 B7    ASL   [__r3]
    18FE: 6B B8    RLC   [__r2]
    1900: 65 B7    ASL   [__r3]
    1902: 6B B8    RLC   [__r2]
    1904: 65 B7    ASL   [__r3]
    1906: 6B B8    RLC   [__r2]
    1908: 65 B7    ASL   [__r3]
    190A: 6B B8    RLC   [__r2]
    190C: 51 B7    MOV   A,[__r3]
    190E: 02 B9    ADD   A,[__r1]
    1910: 54 03    MOV   [X+3],A
    1912: 51 B8    MOV   A,[__r2]
    1914: 0A BA    ADC   A,[__r0]
    1916: 54 02    MOV   [X+2],A
(0401) 	
(0402) 	return Temperature;
    1918: 62 D0 00 MOV   REG[0xD0],0x0
    191B: 52 03    MOV   A,[X+3]
    191D: 53 B9    MOV   [__r1],A
    191F: 52 02    MOV   A,[X+2]
    1921: 53 BA    MOV   [__r0],A
    1923: 38 FC    ADD   SP,0xFC
    1925: 20       POP   X
    1926: 7F       RET   
(0403) }
(0404) float getLux(void )
(0405) {
_getLux:
  lux                  --> X+12
  microamps            --> X+8
  amps                 --> X+4
  volts                --> X+0
    1927: 10       PUSH  X
    1928: 4F       MOV   X,SP
    1929: 38 10    ADD   SP,0x10
(0406) 	float volts = readDualAdc(LIGHT_SENSOR_ADC_CHANNEL)*5.0 /1024.0;
    192B: 50 00    MOV   A,0x0
    192D: 08       PUSH  A
    192E: 50 02    MOV   A,0x2
    1930: 08       PUSH  A
    1931: 91 16    CALL  _readDualAdc
    1933: 38 FE    ADD   SP,0xFE
    1935: 62 D0 00 MOV   REG[0xD0],0x0
    1938: 51 B9    MOV   A,[__r1]
    193A: 53 B7    MOV   [__r3],A
    193C: 51 BA    MOV   A,[__r0]
    193E: 53 B8    MOV   [__r2],A
    1940: 47 B8 80 TST   [__r2],0x80
    1943: A0 09    JZ    0x194D
    1945: 55 B9 FF MOV   [__r1],0xFF
    1948: 55 BA FF MOV   [__r0],0xFF
    194B: 80 0A    JMP   0x1956
    194D: 62 D0 00 MOV   REG[0xD0],0x0
    1950: 55 B9 00 MOV   [__r1],0x0
    1953: 55 BA 00 MOV   [__r0],0x0
    1956: 62 D0 00 MOV   REG[0xD0],0x0
    1959: 51 BA    MOV   A,[__r0]
    195B: 08       PUSH  A
    195C: 51 B9    MOV   A,[__r1]
    195E: 08       PUSH  A
    195F: 51 B8    MOV   A,[__r2]
    1961: 08       PUSH  A
    1962: 51 B7    MOV   A,[__r3]
    1964: 08       PUSH  A
    1965: 7C 26 25 LCALL 0x2625
    1968: 18       POP   A
    1969: 53 B7    MOV   [__r3],A
    196B: 18       POP   A
    196C: 53 B8    MOV   [__r2],A
    196E: 18       POP   A
    196F: 53 B9    MOV   [__r1],A
    1971: 18       POP   A
    1972: 08       PUSH  A
    1973: 51 B9    MOV   A,[__r1]
    1975: 08       PUSH  A
    1976: 51 B8    MOV   A,[__r2]
    1978: 08       PUSH  A
    1979: 51 B7    MOV   A,[__r3]
    197B: 08       PUSH  A
    197C: 50 40    MOV   A,0x40
    197E: 08       PUSH  A
    197F: 50 A0    MOV   A,0xA0
    1981: 08       PUSH  A
    1982: 50 00    MOV   A,0x0
    1984: 08       PUSH  A
    1985: 08       PUSH  A
    1986: 7C 24 8D LCALL 0x248D
    1989: 18       POP   A
    198A: 53 B7    MOV   [__r3],A
    198C: 18       POP   A
    198D: 53 B8    MOV   [__r2],A
    198F: 18       POP   A
    1990: 53 B9    MOV   [__r1],A
    1992: 18       POP   A
    1993: 53 BA    MOV   [__r0],A
    1995: 38 FC    ADD   SP,0xFC
    1997: 50 44    MOV   A,0x44
    1999: 08       PUSH  A
    199A: 50 80    MOV   A,0x80
    199C: 08       PUSH  A
    199D: 50 00    MOV   A,0x0
    199F: 08       PUSH  A
    19A0: 08       PUSH  A
    19A1: 51 BA    MOV   A,[__r0]
    19A3: 08       PUSH  A
    19A4: 51 B9    MOV   A,[__r1]
    19A6: 08       PUSH  A
    19A7: 51 B8    MOV   A,[__r2]
    19A9: 08       PUSH  A
    19AA: 51 B7    MOV   A,[__r3]
    19AC: 08       PUSH  A
    19AD: 7C 23 AA LCALL 0x23AA
    19B0: 18       POP   A
    19B1: 54 03    MOV   [X+3],A
    19B3: 18       POP   A
    19B4: 54 02    MOV   [X+2],A
    19B6: 18       POP   A
    19B7: 54 01    MOV   [X+1],A
    19B9: 18       POP   A
    19BA: 54 00    MOV   [X+0],A
    19BC: 38 FC    ADD   SP,0xFC
(0407) 	float amps  = volts/10000.0; // Across 10,000 Ohms
    19BE: 50 46    MOV   A,0x46
    19C0: 08       PUSH  A
    19C1: 50 1C    MOV   A,0x1C
    19C3: 08       PUSH  A
    19C4: 50 40    MOV   A,0x40
    19C6: 08       PUSH  A
    19C7: 50 00    MOV   A,0x0
    19C9: 08       PUSH  A
    19CA: 52 00    MOV   A,[X+0]
    19CC: 08       PUSH  A
    19CD: 52 01    MOV   A,[X+1]
    19CF: 08       PUSH  A
    19D0: 52 02    MOV   A,[X+2]
    19D2: 08       PUSH  A
    19D3: 52 03    MOV   A,[X+3]
    19D5: 08       PUSH  A
    19D6: 7C 23 AA LCALL 0x23AA
    19D9: 18       POP   A
    19DA: 54 07    MOV   [X+7],A
    19DC: 18       POP   A
    19DD: 54 06    MOV   [X+6],A
    19DF: 18       POP   A
    19E0: 54 05    MOV   [X+5],A
    19E2: 18       POP   A
    19E3: 54 04    MOV   [X+4],A
    19E5: 38 FC    ADD   SP,0xFC
(0408) 	float microamps = amps * 1000000;
    19E7: 52 04    MOV   A,[X+4]
    19E9: 08       PUSH  A
    19EA: 52 05    MOV   A,[X+5]
    19EC: 08       PUSH  A
    19ED: 52 06    MOV   A,[X+6]
    19EF: 08       PUSH  A
    19F0: 52 07    MOV   A,[X+7]
    19F2: 08       PUSH  A
    19F3: 50 49    MOV   A,0x49
    19F5: 08       PUSH  A
    19F6: 50 74    MOV   A,0x74
    19F8: 08       PUSH  A
    19F9: 50 24    MOV   A,0x24
    19FB: 08       PUSH  A
    19FC: 50 00    MOV   A,0x0
    19FE: 08       PUSH  A
    19FF: 7C 24 8D LCALL 0x248D
    1A02: 18       POP   A
    1A03: 54 0B    MOV   [X+11],A
    1A05: 18       POP   A
    1A06: 54 0A    MOV   [X+10],A
    1A08: 18       POP   A
    1A09: 54 09    MOV   [X+9],A
    1A0B: 18       POP   A
    1A0C: 54 08    MOV   [X+8],A
    1A0E: 38 FC    ADD   SP,0xFC
(0409) 	float lux = microamps * 2.0;
    1A10: 52 08    MOV   A,[X+8]
    1A12: 08       PUSH  A
    1A13: 52 09    MOV   A,[X+9]
    1A15: 08       PUSH  A
    1A16: 52 0A    MOV   A,[X+10]
    1A18: 08       PUSH  A
    1A19: 52 0B    MOV   A,[X+11]
    1A1B: 08       PUSH  A
    1A1C: 50 40    MOV   A,0x40
    1A1E: 08       PUSH  A
    1A1F: 50 00    MOV   A,0x0
    1A21: 08       PUSH  A
    1A22: 08       PUSH  A
    1A23: 08       PUSH  A
    1A24: 7C 24 8D LCALL 0x248D
    1A27: 18       POP   A
    1A28: 54 0F    MOV   [X+15],A
    1A2A: 18       POP   A
    1A2B: 54 0E    MOV   [X+14],A
    1A2D: 18       POP   A
    1A2E: 54 0D    MOV   [X+13],A
    1A30: 18       POP   A
    1A31: 54 0C    MOV   [X+12],A
    1A33: 38 FC    ADD   SP,0xFC
(0410) 	
(0411) 	return lux;
    1A35: 52 0C    MOV   A,[X+12]
    1A37: 53 BA    MOV   [__r0],A
    1A39: 52 0D    MOV   A,[X+13]
    1A3B: 53 B9    MOV   [__r1],A
    1A3D: 52 0E    MOV   A,[X+14]
    1A3F: 53 B8    MOV   [__r2],A
    1A41: 52 0F    MOV   A,[X+15]
    1A43: 53 B7    MOV   [__r3],A
    1A45: 38 F0    ADD   SP,0xF0
    1A47: 20       POP   X
    1A48: 7F       RET   
(0412) }	
(0413) 
(0414) INT readDualAdc(INT channel)
(0415) {
_readDualAdc:
  iResult2             --> X+4
  iResult1             --> X+2
  iResult              --> X+0
  channel              --> X-5
    1A49: 10       PUSH  X
    1A4A: 4F       MOV   X,SP
    1A4B: 38 06    ADD   SP,0x6
(0416) 	int iResult1, iResult2, iResult;
(0417) 	while(DUALADC_1_fIsDataAvailable() == 0);  // Wait for data to be ready
    1A4D: 10       PUSH  X
    1A4E: 7C 0E 31 LCALL _DUALADC_1_fIsData|_DUALADC_1_fIsDataAvailable|DUALADC_1_fIsDataAvailable|DUALADC_1_fIsData
    1A51: 20       POP   X
    1A52: 62 D0 00 MOV   REG[0xD0],0x0
    1A55: 39 00    CMP   A,0x0
    1A57: AF F5    JZ    0x1A4D
(0418) 	iResult1 = DUALADC_1_iGetData1();          // Get Data from ADC Input1
    1A59: 10       PUSH  X
    1A5A: 7C 0E 44 LCALL _DUALADC_1_iGetData1
    1A5D: 62 D0 00 MOV   REG[0xD0],0x0
    1A60: 5A BA    MOV   [__r0],X
    1A62: 20       POP   X
    1A63: 54 03    MOV   [X+3],A
    1A65: 51 BA    MOV   A,[__r0]
    1A67: 54 02    MOV   [X+2],A
(0419) 	iResult2 = DUALADC_1_iGetData2ClearFlag(); // Get Data from ADC Input2
    1A69: 10       PUSH  X
    1A6A: 7C 0E 4C LCALL _DUALADC_1_iGetData2ClearFlag
    1A6D: 62 D0 00 MOV   REG[0xD0],0x0
    1A70: 5A BA    MOV   [__r0],X
    1A72: 20       POP   X
    1A73: 54 05    MOV   [X+5],A
    1A75: 51 BA    MOV   A,[__r0]
    1A77: 54 04    MOV   [X+4],A
(0420)     
(0421)                                       		// and clear data ready flag
(0422) 	if (channel == 1)
    1A79: 3D FB 00 CMP   [X-5],0x0
    1A7C: B0 10    JNZ   0x1A8D
    1A7E: 3D FC 01 CMP   [X-4],0x1
    1A81: B0 0B    JNZ   0x1A8D
(0423) 	{
(0424) 		iResult = iResult1;					// Return Mic ADC readings result
    1A83: 52 03    MOV   A,[X+3]
    1A85: 54 01    MOV   [X+1],A
    1A87: 52 02    MOV   A,[X+2]
    1A89: 54 00    MOV   [X+0],A
(0425) 	}
    1A8B: 80 13    JMP   0x1A9F
(0426) 	else if ( channel == 2)
    1A8D: 3D FB 00 CMP   [X-5],0x0
    1A90: B0 0E    JNZ   0x1A9F
    1A92: 3D FC 02 CMP   [X-4],0x2
    1A95: B0 09    JNZ   0x1A9F
(0427) 	{
(0428) 		iResult = iResult2;					// Return light sensor ADC readings result
    1A97: 52 05    MOV   A,[X+5]
    1A99: 54 01    MOV   [X+1],A
    1A9B: 52 04    MOV   A,[X+4]
    1A9D: 54 00    MOV   [X+0],A
(0429) 	}
(0430) 	return iResult;
    1A9F: 62 D0 00 MOV   REG[0xD0],0x0
    1AA2: 52 01    MOV   A,[X+1]
    1AA4: 53 B9    MOV   [__r1],A
    1AA6: 52 00    MOV   A,[X+0]
    1AA8: 53 BA    MOV   [__r0],A
    1AAA: 38 FA    ADD   SP,0xFA
    1AAC: 20       POP   X
    1AAD: 7F       RET   
(0431) }
(0432) 
(0433) 
(0434) void blocking_delay(BYTE bTimes)
(0435) {
_blocking_delay:
  bTimes               --> X-4
    1AAE: 10       PUSH  X
    1AAF: 4F       MOV   X,SP
(0436) 	// Can be used only if the delaly required is a mutiple of 50us.
(0437) 	// This sufficient for this project.
(0438) 	LCD_2_Delay50uTimes(bTimes);// Reuse the delay function provided by LCD user module		
    1AB0: 10       PUSH  X
    1AB1: 52 FC    MOV   A,[X-4]
    1AB3: 7C 07 F4 LCALL _LCD_2_Delay50uTimes
    1AB6: 20       POP   X
    1AB7: 20       POP   X
    1AB8: 7F       RET   
(0439) }
(0440) 
(0441) void speak(BYTE word_encoding)
(0442) {
_speak:
  y                    --> X+0
  word_encoding        --> X-4
    1AB9: 10       PUSH  X
    1ABA: 4F       MOV   X,SP
    1ABB: 38 03    ADD   SP,0x3
(0443) 	BYTE y;
(0444) 	switch (word_encoding)
    1ABD: 52 FC    MOV   A,[X-4]
    1ABF: 54 02    MOV   [X+2],A
    1AC1: 56 01 00 MOV   [X+1],0x0
    1AC4: 3D 01 00 CMP   [X+1],0x0
    1AC7: B0 06    JNZ   0x1ACE
    1AC9: 3D 02 88 CMP   [X+2],0x88
    1ACC: A1 1B    JZ    0x1BE8
    1ACE: 3D 01 00 CMP   [X+1],0x0
    1AD1: B0 06    JNZ   0x1AD8
    1AD3: 3D 02 89 CMP   [X+2],0x89
    1AD6: A1 11    JZ    0x1BE8
    1AD8: 52 02    MOV   A,[X+2]
    1ADA: 11 8A    SUB   A,0x8A
    1ADC: 62 D0 00 MOV   REG[0xD0],0x0
    1ADF: 53 B5    MOV   [__rY],A
    1AE1: 52 01    MOV   A,[X+1]
    1AE3: 31 80    XOR   A,0x80
    1AE5: 19 80    SBB   A,0x80
    1AE7: 2A B5    OR    A,[__rY]
    1AE9: A0 FE    JZ    0x1BE8
    1AEB: D0 21    JNC   0x1B0D
    1AED: 3D 01 00 CMP   [X+1],0x0
    1AF0: B0 06    JNZ   0x1AF7
    1AF2: 3D 02 48 CMP   [X+2],0x48
    1AF5: A0 F2    JZ    0x1BE8
    1AF7: 3D 01 00 CMP   [X+1],0x0
    1AFA: B0 06    JNZ   0x1B01
    1AFC: 3D 02 49 CMP   [X+2],0x49
    1AFF: A0 E8    JZ    0x1BE8
    1B01: 3D 01 00 CMP   [X+1],0x0
    1B04: B0 06    JNZ   0x1B0B
    1B06: 3D 02 4A CMP   [X+2],0x4A
    1B09: A0 DE    JZ    0x1BE8
    1B0B: 80 DC    JMP   0x1BE8
    1B0D: 3D 01 00 CMP   [X+1],0x0
    1B10: B0 06    JNZ   0x1B17
    1B12: 3D 02 A8 CMP   [X+2],0xA8
    1B15: A0 D2    JZ    0x1BE8
    1B17: 3D 01 00 CMP   [X+1],0x0
    1B1A: B0 06    JNZ   0x1B21
    1B1C: 3D 02 A9 CMP   [X+2],0xA9
    1B1F: A0 0D    JZ    0x1B2D
    1B21: 3D 01 00 CMP   [X+1],0x0
    1B24: B0 06    JNZ   0x1B2B
    1B26: 3D 02 AA CMP   [X+2],0xAA
    1B29: A0 5E    JZ    0x1B88
    1B2B: 80 BC    JMP   0x1BE8
(0445) 	{
(0446) 		// Type(2 bits) | spacer(1 bit) | payload (17 bits) (so in total 20bits of bit stream per work speak operation.
(0447) 		// One word consists of 8 stamps
(0448) 		case 0xa9: //1010 1001 4 loud stamp, 4 silent stamp | Dark light and Cold condition 
(0449) 			PWM8_1_Start();
    1B2D: 10       PUSH  X
    1B2E: 7C 05 91 LCALL _PWM8_1_Start
    1B31: 20       POP   X
(0450) 			blocking_delay(Z_div);//1
    1B32: 50 00    MOV   A,0x0
    1B34: 08       PUSH  A
    1B35: 9F 77    CALL  _blocking_delay
    1B37: 38 FF    ADD   SP,0xFF
(0451) 			PWM8_1_Stop();
    1B39: 10       PUSH  X
    1B3A: 7C 05 95 LCALL _PWM8_1_Stop
    1B3D: 20       POP   X
(0452) 			blocking_delay(Y_div);//0
    1B3E: 50 00    MOV   A,0x0
    1B40: 08       PUSH  A
    1B41: 9F 6B    CALL  _blocking_delay
    1B43: 38 FF    ADD   SP,0xFF
(0453) 			PWM8_1_Start();
    1B45: 10       PUSH  X
    1B46: 7C 05 91 LCALL _PWM8_1_Start
    1B49: 20       POP   X
(0454) 			blocking_delay(Z_div);//1
    1B4A: 50 00    MOV   A,0x0
    1B4C: 08       PUSH  A
    1B4D: 9F 5F    CALL  _blocking_delay
    1B4F: 38 FF    ADD   SP,0xFF
(0455) 			PWM8_1_Stop();
    1B51: 10       PUSH  X
    1B52: 7C 05 95 LCALL _PWM8_1_Stop
    1B55: 20       POP   X
(0456) 			blocking_delay(Y_div);//0
    1B56: 50 00    MOV   A,0x0
    1B58: 08       PUSH  A
    1B59: 9F 53    CALL  _blocking_delay
    1B5B: 38 FF    ADD   SP,0xFF
(0457) 			PWM8_1_Start();
    1B5D: 10       PUSH  X
    1B5E: 7C 05 91 LCALL _PWM8_1_Start
    1B61: 20       POP   X
(0458) 			blocking_delay(Z_div);//1
    1B62: 50 00    MOV   A,0x0
    1B64: 08       PUSH  A
    1B65: 9F 47    CALL  _blocking_delay
    1B67: 38 FF    ADD   SP,0xFF
(0459) 			PWM8_1_Stop();
    1B69: 10       PUSH  X
    1B6A: 7C 05 95 LCALL _PWM8_1_Stop
    1B6D: 20       POP   X
(0460) 			blocking_delay(2*Y_div);//00
    1B6E: 50 00    MOV   A,0x0
    1B70: 08       PUSH  A
    1B71: 9F 3B    CALL  _blocking_delay
    1B73: 38 FF    ADD   SP,0xFF
(0461) 			PWM8_1_Start();
    1B75: 10       PUSH  X
    1B76: 7C 05 91 LCALL _PWM8_1_Start
    1B79: 20       POP   X
(0462) 			blocking_delay(Z_div);//1
    1B7A: 50 00    MOV   A,0x0
    1B7C: 08       PUSH  A
    1B7D: 9F 2F    CALL  _blocking_delay
    1B7F: 38 FF    ADD   SP,0xFF
(0463) 			PWM8_1_Stop();
    1B81: 10       PUSH  X
    1B82: 7C 05 95 LCALL _PWM8_1_Stop
    1B85: 20       POP   X
(0464) 			
(0465) 			/*y = Y_div* 16;             
(0466) 			blocking_delay(y);*/
(0467) 			break;;
    1B86: 80 61    JMP   0x1BE8
(0468) 		case 0xaa:// 1010 1010 4 loud stamp, 4 rest silent stamps |  Dark light and Medium temp condition
(0469) 			PWM8_1_Start();
    1B88: 10       PUSH  X
    1B89: 7C 05 91 LCALL _PWM8_1_Start
    1B8C: 20       POP   X
(0470) 			blocking_delay(Z_div);//1
    1B8D: 50 00    MOV   A,0x0
    1B8F: 08       PUSH  A
    1B90: 9F 1C    CALL  _blocking_delay
    1B92: 38 FF    ADD   SP,0xFF
(0471) 			PWM8_1_Stop(); 
    1B94: 10       PUSH  X
    1B95: 7C 05 95 LCALL _PWM8_1_Stop
    1B98: 20       POP   X
(0472) 			blocking_delay(Y_div);//0
    1B99: 50 00    MOV   A,0x0
    1B9B: 08       PUSH  A
    1B9C: 9F 10    CALL  _blocking_delay
    1B9E: 38 FF    ADD   SP,0xFF
(0473) 			PWM8_1_Start();
    1BA0: 10       PUSH  X
    1BA1: 7C 05 91 LCALL _PWM8_1_Start
    1BA4: 20       POP   X
(0474) 			blocking_delay(Z_div);//1
    1BA5: 50 00    MOV   A,0x0
    1BA7: 08       PUSH  A
    1BA8: 9F 04    CALL  _blocking_delay
    1BAA: 38 FF    ADD   SP,0xFF
(0475) 			PWM8_1_Stop();
    1BAC: 10       PUSH  X
    1BAD: 7C 05 95 LCALL _PWM8_1_Stop
    1BB0: 20       POP   X
(0476) 			blocking_delay(Y_div);//0
    1BB1: 50 00    MOV   A,0x0
    1BB3: 08       PUSH  A
    1BB4: 9E F8    CALL  _blocking_delay
    1BB6: 38 FF    ADD   SP,0xFF
(0477) 			PWM8_1_Start();
    1BB8: 10       PUSH  X
    1BB9: 7C 05 91 LCALL _PWM8_1_Start
    1BBC: 20       POP   X
(0478) 			blocking_delay(Z_div);//1
    1BBD: 50 00    MOV   A,0x0
    1BBF: 08       PUSH  A
    1BC0: 9E EC    CALL  _blocking_delay
    1BC2: 38 FF    ADD   SP,0xFF
(0479) 			PWM8_1_Stop();
    1BC4: 10       PUSH  X
    1BC5: 7C 05 95 LCALL _PWM8_1_Stop
    1BC8: 20       POP   X
(0480) 			blocking_delay(Y_div);//0
    1BC9: 50 00    MOV   A,0x0
    1BCB: 08       PUSH  A
    1BCC: 9E E0    CALL  _blocking_delay
    1BCE: 38 FF    ADD   SP,0xFF
(0481) 			PWM8_1_Start();
    1BD0: 10       PUSH  X
    1BD1: 7C 05 91 LCALL _PWM8_1_Start
    1BD4: 20       POP   X
(0482) 			blocking_delay(Z_div);//1
    1BD5: 50 00    MOV   A,0x0
    1BD7: 08       PUSH  A
    1BD8: 9E D4    CALL  _blocking_delay
    1BDA: 38 FF    ADD   SP,0xFF
(0483) 			PWM8_1_Stop();
    1BDC: 10       PUSH  X
    1BDD: 7C 05 95 LCALL _PWM8_1_Stop
    1BE0: 20       POP   X
(0484) 			blocking_delay(Y_div);//0
    1BE1: 50 00    MOV   A,0x0
    1BE3: 08       PUSH  A
    1BE4: 9E C8    CALL  _blocking_delay
    1BE6: 38 FF    ADD   SP,0xFF
(0485) 			/*y = Y_div *14;
(0486) 			blocking_delay(y);*/
(0487) 			break;
(0488) 		case 0xa8:// 1010 1000 3 loud stamp,5 rest silent stamps | Dark light and Hot temp condition
(0489) 			//To do
(0490) 			break;
(0491) 		case 0x89:// 1000 1001  3 loud stamp,5 rest silent stamps |  Normal light and cold temp condition
(0492) 			//To do
(0493) 			break;
(0494) 		case 0x8a:// 1000 1010  3 loud stamp and 5 rest silent stamps | Normal light and medium temp condition
(0495) 			//To do
(0496) 			break;
(0497) 		case 0x88:// 1000 1000 2 loud stamp, 6 rest silent stamps | Normal light and hot temp condition
(0498) 			//To do
(0499) 			break;
(0500) 		case 0x49:// 01001001 3 loud stamp,5 rest silent stamps | Bright light and cold temp condition
(0501) 			//To do
(0502) 			break;
(0503) 		case 0x4a:// 01001010 3 loud stamp,5 rest silent stamps | Bright light and medium temp condition
(0504) 			break;
(0505) 		case 0x48:// 0100 1000 2 loud stamp, 6 rest silent stamps | | Bright light and hot temp condition
(0506) 			//To do
(0507) 			break;
    1BE8: 38 FD    ADD   SP,0xFD
    1BEA: 20       POP   X
    1BEB: 7F       RET   
(0508) 	}
(0509) }
(0510) 
(0511) BYTE listen(void)
(0512) {
_listen:
  start_time           --> X+17
  X_time_elaspsed      --> X+15
  bit_stream           --> X+14
  iResult2             --> X+12
  bit_start_time       --> X+10
  avg_mic_output       --> X+8
  iResult1             --> X+6
  count                --> X+4
  total                --> X+2
  ZY_time_elaspsed     --> X+0
    1BEC: 10       PUSH  X
    1BED: 4F       MOV   X,SP
    1BEE: 38 13    ADD   SP,0x13
(0513) 	int iResult1,iResult2,avg_mic_output,count,total;
(0514) 	INT start_time =wElapsedTime;
    1BF0: 62 D0 00 MOV   REG[0xD0],0x0
    1BF3: 51 C4    MOV   A,[wElapsedTime+1]
    1BF5: 54 12    MOV   [X+18],A
    1BF7: 51 C3    MOV   A,[wElapsedTime]
    1BF9: 54 11    MOV   [X+17],A
(0515) 	INT bit_start_time;
(0516) 	INT X_time_elaspsed = 0;
    1BFB: 56 10 00 MOV   [X+16],0x0
    1BFE: 56 0F 00 MOV   [X+15],0x0
(0517) 	INT ZY_time_elaspsed = 0;
    1C01: 56 01 00 MOV   [X+1],0x0
    1C04: 56 00 00 MOV   [X+0],0x0
(0518) 	BYTE bit_stream = 0;
    1C07: 56 0E 00 MOV   [X+14],0x0
    1C0A: 80 D1    JMP   0x1CDC
(0519) 	// Listen for a word duration to heat the bit stream sent by the other agent
(0520) 	while (X_time_elaspsed < X)
(0521) 	{
(0522) 		// Listen for lound or silen stamp for the Y = Z = 200ms duration
(0523) 		avg_mic_output = 0;
    1C0C: 56 09 00 MOV   [X+9],0x0
    1C0F: 56 08 00 MOV   [X+8],0x0
(0524) 		count = 0;
    1C12: 56 05 00 MOV   [X+5],0x0
    1C15: 56 04 00 MOV   [X+4],0x0
(0525) 		total = 0;
    1C18: 56 03 00 MOV   [X+3],0x0
    1C1B: 56 02 00 MOV   [X+2],0x0
    1C1E: 80 6E    JMP   0x1C8D
(0526) 		while ((ZY_time_elaspsed < Z || ZY_time_elaspsed < Y))
(0527) 		{
(0528) 			ZY_time_elaspsed = wElapsedTime - bit_start_time;
    1C20: 62 D0 00 MOV   REG[0xD0],0x0
    1C23: 51 C4    MOV   A,[wElapsedTime+1]
    1C25: 13 0B    SUB   A,[X+11]
    1C27: 54 01    MOV   [X+1],A
    1C29: 51 C3    MOV   A,[wElapsedTime]
    1C2B: 1B 0A    SBB   A,[X+10]
    1C2D: 54 00    MOV   [X+0],A
(0529) 			
(0530) 			while(DUALADC_1_fIsDataAvailable() == 0);  // Wait for data to be ready
    1C2F: 10       PUSH  X
    1C30: 7C 0E 31 LCALL _DUALADC_1_fIsData|_DUALADC_1_fIsDataAvailable|DUALADC_1_fIsDataAvailable|DUALADC_1_fIsData
    1C33: 20       POP   X
    1C34: 62 D0 00 MOV   REG[0xD0],0x0
    1C37: 39 00    CMP   A,0x0
    1C39: AF F5    JZ    0x1C2F
(0531)         
(0532) 	 		iResult1 = DUALADC_1_iGetData1();          // Get Data from ADC Input1
    1C3B: 10       PUSH  X
    1C3C: 7C 0E 44 LCALL _DUALADC_1_iGetData1
    1C3F: 62 D0 00 MOV   REG[0xD0],0x0
    1C42: 5A BA    MOV   [__r0],X
    1C44: 20       POP   X
    1C45: 54 07    MOV   [X+7],A
    1C47: 51 BA    MOV   A,[__r0]
    1C49: 54 06    MOV   [X+6],A
(0533) 	  		iResult2 = DUALADC_1_iGetData2();
    1C4B: 10       PUSH  X
    1C4C: 7C 0E 57 LCALL _DUALADC_1_iGetData2
    1C4F: 62 D0 00 MOV   REG[0xD0],0x0
    1C52: 5A BA    MOV   [__r0],X
    1C54: 20       POP   X
    1C55: 54 0D    MOV   [X+13],A
    1C57: 51 BA    MOV   A,[__r0]
    1C59: 54 0C    MOV   [X+12],A
(0534) 	
(0535) 	  		DUALADC_1_iGetData1ClearFlag();
    1C5B: 10       PUSH  X
    1C5C: 7C 0E 39 LCALL _DUALADC_1_iGetData1ClearFlag
    1C5F: 62 D0 00 MOV   REG[0xD0],0x0
(0536)       		DUALADC_1_iGetData2ClearFlag();
    1C62: 7C 0E 4C LCALL _DUALADC_1_iGetData2ClearFlag
    1C65: 62 D0 00 MOV   REG[0xD0],0x0
    1C68: 20       POP   X
(0537) 			count++;
    1C69: 77 05    INC   [X+5]
    1C6B: 0F 04 00 ADC   [X+4],0x0
(0538) 			total = total + iResult1;
    1C6E: 52 07    MOV   A,[X+7]
    1C70: 05 03    ADD   [X+3],A
    1C72: 52 06    MOV   A,[X+6]
    1C74: 0D 02    ADC   [X+2],A
(0539) 			avg_mic_output = total/count;
    1C76: 52 04    MOV   A,[X+4]
    1C78: 08       PUSH  A
    1C79: 52 05    MOV   A,[X+5]
    1C7B: 08       PUSH  A
    1C7C: 52 02    MOV   A,[X+2]
    1C7E: 08       PUSH  A
    1C7F: 52 03    MOV   A,[X+3]
    1C81: 08       PUSH  A
    1C82: 7C 21 EE LCALL 0x21EE
    1C85: 18       POP   A
    1C86: 54 09    MOV   [X+9],A
    1C88: 18       POP   A
    1C89: 54 08    MOV   [X+8],A
    1C8B: 38 FE    ADD   SP,0xFE
(0540) 		}
    1C8D: 52 01    MOV   A,[X+1]
    1C8F: 11 C8    SUB   A,0xC8
    1C91: 52 00    MOV   A,[X+0]
    1C93: 31 80    XOR   A,0x80
    1C95: 19 80    SBB   A,0x80
    1C97: CF 88    JC    0x1C20
    1C99: 52 01    MOV   A,[X+1]
    1C9B: 11 C8    SUB   A,0xC8
    1C9D: 52 00    MOV   A,[X+0]
    1C9F: 31 80    XOR   A,0x80
    1CA1: 19 80    SBB   A,0x80
    1CA3: CF 7C    JC    0x1C20
(0541) 		// Detected loud stamp
(0542) 		if (avg_mic_output> LOUD_STAMP_THRESHOLD)
    1CA5: 50 FE    MOV   A,0xFE
    1CA7: 13 09    SUB   A,[X+9]
    1CA9: 52 08    MOV   A,[X+8]
    1CAB: 31 80    XOR   A,0x80
    1CAD: 62 D0 00 MOV   REG[0xD0],0x0
    1CB0: 53 B6    MOV   [__rX],A
    1CB2: 50 81    MOV   A,0x81
    1CB4: 1A B6    SBB   A,[__rX]
    1CB6: D0 06    JNC   0x1CBD
(0543) 		{
(0544) 			bit_stream = bit_stream | 0x1;			
    1CB8: 2F 0E 01 OR    [X+14],0x1
(0545) 		}
    1CBB: 80 01    JMP   0x1CBD
(0546) 		// Detected silent stamp
(0547) 		else
(0548) 		{
(0549) 			bit_stream = bit_stream | 0x0;
(0550) 		}
(0551) 		//shift the bit stream for the next bit value
(0552) 		bit_stream = bit_stream <<1; 
    1CBD: 66 0E    ASL   [X+14]
(0553) 		
(0554) 		X_time_elaspsed = wElapsedTime - start_time;
    1CBF: 62 D0 00 MOV   REG[0xD0],0x0
    1CC2: 51 C4    MOV   A,[wElapsedTime+1]
    1CC4: 13 12    SUB   A,[X+18]
    1CC6: 54 10    MOV   [X+16],A
    1CC8: 51 C3    MOV   A,[wElapsedTime]
    1CCA: 1B 11    SBB   A,[X+17]
    1CCC: 54 0F    MOV   [X+15],A
(0555) 		
(0556) 		bit_start_time = wElapsedTime; 
    1CCE: 51 C4    MOV   A,[wElapsedTime+1]
    1CD0: 54 0B    MOV   [X+11],A
    1CD2: 51 C3    MOV   A,[wElapsedTime]
    1CD4: 54 0A    MOV   [X+10],A
(0557) 		ZY_time_elaspsed = 0;
    1CD6: 56 01 00 MOV   [X+1],0x0
    1CD9: 56 00 00 MOV   [X+0],0x0
(0558) 	}
    1CDC: 52 10    MOV   A,[X+16]
    1CDE: 11 40    SUB   A,0x40
    1CE0: 52 0F    MOV   A,[X+15]
    1CE2: 31 80    XOR   A,0x80
    1CE4: 19 86    SBB   A,0x86
    1CE6: CF 25    JC    0x1C0C
(0559) 	
(0560) 	return bit_stream;
    1CE8: 52 0E    MOV   A,[X+14]
    1CEA: 62 D0 00 MOV   REG[0xD0],0x0
    1CED: 38 ED    ADD   SP,0xED
    1CEF: 20       POP   X
    1CF0: 7F       RET   
(0561) }
(0562) 
(0563) // Check if word label is present in neighbours for the current temp&/light condition
(0564) BOOL check_if_labelPresent(char* index)
(0565) {
_check_if_labelPresent:
  tempValue            --> X+9
  luxValue             --> X+5
  present              --> X+4
  label                --> X+2
  i                    --> X+0
  index                --> X-5
    1CF1: 10       PUSH  X
    1CF2: 4F       MOV   X,SP
    1CF3: 38 0B    ADD   SP,0xB
(0566) 	float luxValue; // Ambient Light illumiance value
(0567) 	INT   tempValue;     // Ambient temperature
(0568) 	char * label;
(0569) 	BOOL present =FALSE;
    1CF5: 56 04 00 MOV   [X+4],0x0
(0570) 	int i;
(0571) 	// Sense /////////////////////////////
(0572) 		
(0573) 	//Read light sensor value
(0574) 	luxValue   = getLux(); // luxValue ranges from 0 to 1000
    1CF8: 9C 2D    CALL  _getLux
    1CFA: 62 D0 00 MOV   REG[0xD0],0x0
    1CFD: 51 BA    MOV   A,[__r0]
    1CFF: 54 05    MOV   [X+5],A
    1D01: 51 B9    MOV   A,[__r1]
    1D03: 54 06    MOV   [X+6],A
    1D05: 51 B8    MOV   A,[__r2]
    1D07: 54 07    MOV   [X+7],A
    1D09: 51 B7    MOV   A,[__r3]
    1D0B: 54 08    MOV   [X+8],A
(0575) 	//Read temperature value
(0576) 	tempValue  = read_temperature();
    1D0D: 9B 19    CALL  _read_temperature
    1D0F: 62 D0 00 MOV   REG[0xD0],0x0
    1D12: 51 B9    MOV   A,[__r1]
    1D14: 54 0A    MOV   [X+10],A
    1D16: 51 BA    MOV   A,[__r0]
    1D18: 54 09    MOV   [X+9],A
(0577) 	
(0578) 	//Create a word label based on the sensor values	
(0579) 	create_word(luxValue, tempValue,label,lux_range_1,lux_range_2,temp_range_1,temp_range_2);
    1D1A: 62 D0 00 MOV   REG[0xD0],0x0
    1D1D: 51 C1    MOV   A,[temp_range_2]
    1D1F: 08       PUSH  A
    1D20: 51 C2    MOV   A,[temp_range_2+1]
    1D22: 08       PUSH  A
    1D23: 62 D0 00 MOV   REG[0xD0],0x0
    1D26: 51 BB    MOV   A,[temp_range_1]
    1D28: 08       PUSH  A
    1D29: 51 BC    MOV   A,[temp_range_1+1]
    1D2B: 08       PUSH  A
    1D2C: 62 D0 00 MOV   REG[0xD0],0x0
    1D2F: 51 BD    MOV   A,[lux_range_2]
    1D31: 08       PUSH  A
    1D32: 51 BE    MOV   A,[lux_range_2+1]
    1D34: 08       PUSH  A
    1D35: 62 D0 00 MOV   REG[0xD0],0x0
    1D38: 51 BF    MOV   A,[lux_range_1]
    1D3A: 08       PUSH  A
    1D3B: 51 C0    MOV   A,[lux_range_1+1]
    1D3D: 08       PUSH  A
    1D3E: 52 02    MOV   A,[X+2]
    1D40: 08       PUSH  A
    1D41: 52 03    MOV   A,[X+3]
    1D43: 08       PUSH  A
    1D44: 52 09    MOV   A,[X+9]
    1D46: 08       PUSH  A
    1D47: 52 0A    MOV   A,[X+10]
    1D49: 08       PUSH  A
    1D4A: 52 05    MOV   A,[X+5]
    1D4C: 08       PUSH  A
    1D4D: 52 06    MOV   A,[X+6]
    1D4F: 08       PUSH  A
    1D50: 52 07    MOV   A,[X+7]
    1D52: 08       PUSH  A
    1D53: 52 08    MOV   A,[X+8]
    1D55: 08       PUSH  A
    1D56: 7C 10 08 LCALL _create_word
    1D59: 38 F0    ADD   SP,0xF0
    1D5B: 62 D0 00 MOV   REG[0xD0],0x0
(0580) 	
(0581) 	// Check if this label is present in neighbour's table
(0582) 	for (i= 0; i< SIZE; i++)
    1D5E: 56 01 00 MOV   [X+1],0x0
    1D61: 56 00 00 MOV   [X+0],0x0
(0583) 	{
(0584) 		if (neighours_table[i].label == *label)
    1D64: 62 D0 00 MOV   REG[0xD0],0x0
    1D67: 52 03    MOV   A,[X+3]
    1D69: 53 B9    MOV   [__r1],A
    1D6B: 52 02    MOV   A,[X+2]
    1D6D: 60 D4    MOV   REG[0xD4],A
    1D6F: 3E B9    MVI   A,[__r1]
    1D71: 53 BA    MOV   [__r0],A
    1D73: 52 01    MOV   A,[X+1]
    1D75: 53 B7    MOV   [__r3],A
    1D77: 52 00    MOV   A,[X+0]
    1D79: 53 B8    MOV   [__r2],A
    1D7B: 65 B7    ASL   [__r3]
    1D7D: 6B B8    RLC   [__r2]
    1D7F: 65 B7    ASL   [__r3]
    1D81: 6B B8    RLC   [__r2]
    1D83: 06 B7 15 ADD   [__r3],0x15
    1D86: 0E B8 00 ADC   [__r2],0x0
    1D89: 51 B8    MOV   A,[__r2]
    1D8B: 60 D4    MOV   REG[0xD4],A
    1D8D: 3E B7    MVI   A,[__r3]
    1D8F: 3A BA    CMP   A,[__r0]
    1D91: B0 14    JNZ   0x1DA6
(0585) 		{
(0586) 			present =TRUE;
    1D93: 56 04 01 MOV   [X+4],0x1
(0587) 			*index = i;
    1D96: 52 01    MOV   A,[X+1]
    1D98: 53 BA    MOV   [__r0],A
    1D9A: 52 FC    MOV   A,[X-4]
    1D9C: 53 B7    MOV   [__r3],A
    1D9E: 52 FB    MOV   A,[X-5]
    1DA0: 60 D5    MOV   REG[0xD5],A
    1DA2: 51 BA    MOV   A,[__r0]
    1DA4: 3F B7    MVI   [__r3],A
(0588) 		}
(0589) 	}
    1DA6: 77 01    INC   [X+1]
    1DA8: 0F 00 00 ADC   [X+0],0x0
    1DAB: 52 01    MOV   A,[X+1]
    1DAD: 11 14    SUB   A,0x14
    1DAF: 52 00    MOV   A,[X+0]
    1DB1: 31 80    XOR   A,0x80
    1DB3: 19 80    SBB   A,0x80
    1DB5: CF AE    JC    0x1D64
(0590) 	return present;
    1DB7: 52 04    MOV   A,[X+4]
    1DB9: 62 D0 00 MOV   REG[0xD0],0x0
    1DBC: 38 F5    ADD   SP,0xF5
    1DBE: 20       POP   X
    1DBF: 7F       RET   
(0591) }
(0592) BOOL check_if_bit_stream_match(char index,BYTE word_listened)
(0593) {
_check_if_bit_stream_match:
  word_listened        --> X-5
  index                --> X-4
    1DC0: 10       PUSH  X
    1DC1: 4F       MOV   X,SP
(0594) 	if(neighours_table[index].word == word_listened)
    1DC2: 62 D0 00 MOV   REG[0xD0],0x0
    1DC5: 52 FC    MOV   A,[X-4]
    1DC7: 53 B9    MOV   [__r1],A
    1DC9: 55 BA 00 MOV   [__r0],0x0
    1DCC: 65 B9    ASL   [__r1]
    1DCE: 6B BA    RLC   [__r0]
    1DD0: 65 B9    ASL   [__r1]
    1DD2: 6B BA    RLC   [__r0]
    1DD4: 06 B9 14 ADD   [__r1],0x14
    1DD7: 0E BA 00 ADC   [__r0],0x0
    1DDA: 51 BA    MOV   A,[__r0]
    1DDC: 60 D4    MOV   REG[0xD4],A
    1DDE: 3E B9    MVI   A,[__r1]
    1DE0: 3B FB    CMP   A,[X-5]
    1DE2: B0 05    JNZ   0x1DE8
(0595) 		return TRUE;
    1DE4: 50 01    MOV   A,0x1
    1DE6: 80 06    JMP   0x1DED
(0596) 	else 
(0597) 		return FALSE;
    1DE8: 62 D0 00 MOV   REG[0xD0],0x0
    1DEB: 50 00    MOV   A,0x0
    1DED: 20       POP   X
    1DEE: 7F       RET   
(0598) }
(0599) 
(0600) void re_learn_ranges(word_listened)
(0601) {
_re_learn_ranges:
  label                --> X+6
  tempValue            --> X+4
  luxValue             --> X+0
  word_listened        --> X-5
    1DEF: 10       PUSH  X
    1DF0: 4F       MOV   X,SP
    1DF1: 38 08    ADD   SP,0x8
(0602) 	float luxValue; // Ambient Light illumiance value
(0603) 	INT   tempValue;
(0604) 	char *label;
(0605) 	//Read light sensor value
(0606) 	luxValue   = getLux(); // luxValue ranges from 0 to 1000
    1DF3: 9B 32    CALL  _getLux
    1DF5: 62 D0 00 MOV   REG[0xD0],0x0
    1DF8: 51 BA    MOV   A,[__r0]
    1DFA: 54 00    MOV   [X+0],A
    1DFC: 51 B9    MOV   A,[__r1]
    1DFE: 54 01    MOV   [X+1],A
    1E00: 51 B8    MOV   A,[__r2]
    1E02: 54 02    MOV   [X+2],A
    1E04: 51 B7    MOV   A,[__r3]
    1E06: 54 03    MOV   [X+3],A
(0607) 	//Read temperature value
(0608) 	tempValue  = read_temperature();
    1E08: 9A 1E    CALL  _read_temperature
    1E0A: 62 D0 00 MOV   REG[0xD0],0x0
    1E0D: 51 B9    MOV   A,[__r1]
    1E0F: 54 05    MOV   [X+5],A
    1E11: 51 BA    MOV   A,[__r0]
    1E13: 54 04    MOV   [X+4],A
(0609) 	
(0610) 	//check if the received word indicates temperature only condition or light only condition or both temperature&light condition
(0611) 	if ((word_listened & MS_NIBBLE_MASK != 0) && (word_listened & LS_NIBBLE_MASK != 0))
    1E15: 52 FC    MOV   A,[X-4]
    1E17: 21 01    AND   A,0x1
    1E19: 53 B9    MOV   [__r1],A
    1E1B: 52 FB    MOV   A,[X-5]
    1E1D: 21 00    AND   A,0x0
    1E1F: 53 BA    MOV   [__r0],A
    1E21: 39 00    CMP   A,0x0
    1E23: B0 06    JNZ   0x1E2A
    1E25: 3C B9 00 CMP   [__r1],0x0
    1E28: A1 CE    JZ    0x1FF7
    1E2A: 62 D0 00 MOV   REG[0xD0],0x0
    1E2D: 3C BA 00 CMP   [__r0],0x0
    1E30: B0 06    JNZ   0x1E37
    1E32: 3C B9 00 CMP   [__r1],0x0
    1E35: A1 C1    JZ    0x1FF7
(0612) 	{	
(0613) 		// generate the bit stream for each different combinations of range values, the find the new range that will
(0614) 		// generate the bit stream that matches with the received bit stream
(0615) 		if (create_word(luxValue, tempValue,label,luxValue,lux_range_2,temp_range_1,temp_range_2) == word_listened)
    1E37: 62 D0 00 MOV   REG[0xD0],0x0
    1E3A: 51 C1    MOV   A,[temp_range_2]
    1E3C: 08       PUSH  A
    1E3D: 51 C2    MOV   A,[temp_range_2+1]
    1E3F: 08       PUSH  A
    1E40: 62 D0 00 MOV   REG[0xD0],0x0
    1E43: 51 BB    MOV   A,[temp_range_1]
    1E45: 08       PUSH  A
    1E46: 51 BC    MOV   A,[temp_range_1+1]
    1E48: 08       PUSH  A
    1E49: 62 D0 00 MOV   REG[0xD0],0x0
    1E4C: 51 BD    MOV   A,[lux_range_2]
    1E4E: 08       PUSH  A
    1E4F: 51 BE    MOV   A,[lux_range_2+1]
    1E51: 08       PUSH  A
    1E52: 62 D0 00 MOV   REG[0xD0],0x0
    1E55: 52 00    MOV   A,[X+0]
    1E57: 08       PUSH  A
    1E58: 52 01    MOV   A,[X+1]
    1E5A: 08       PUSH  A
    1E5B: 52 02    MOV   A,[X+2]
    1E5D: 08       PUSH  A
    1E5E: 52 03    MOV   A,[X+3]
    1E60: 08       PUSH  A
    1E61: 7C 22 3C LCALL 0x223C
    1E64: 18       POP   A
    1E65: 53 B9    MOV   [__r1],A
    1E67: 18       POP   A
    1E68: 38 FE    ADD   SP,0xFE
    1E6A: 08       PUSH  A
    1E6B: 51 B9    MOV   A,[__r1]
    1E6D: 08       PUSH  A
    1E6E: 52 06    MOV   A,[X+6]
    1E70: 08       PUSH  A
    1E71: 52 07    MOV   A,[X+7]
    1E73: 08       PUSH  A
    1E74: 52 04    MOV   A,[X+4]
    1E76: 08       PUSH  A
    1E77: 52 05    MOV   A,[X+5]
    1E79: 08       PUSH  A
    1E7A: 52 00    MOV   A,[X+0]
    1E7C: 08       PUSH  A
    1E7D: 52 01    MOV   A,[X+1]
    1E7F: 08       PUSH  A
    1E80: 52 02    MOV   A,[X+2]
    1E82: 08       PUSH  A
    1E83: 52 03    MOV   A,[X+3]
    1E85: 08       PUSH  A
    1E86: 7C 10 08 LCALL _create_word
    1E89: 38 F0    ADD   SP,0xF0
    1E8B: 62 D0 00 MOV   REG[0xD0],0x0
    1E8E: 53 B9    MOV   [__r1],A
    1E90: 50 00    MOV   A,0x0
    1E92: 3B FB    CMP   A,[X-5]
    1E94: B0 26    JNZ   0x1EBB
    1E96: 51 B9    MOV   A,[__r1]
    1E98: 3B FC    CMP   A,[X-4]
    1E9A: B0 20    JNZ   0x1EBB
(0616) 		{
(0617) 			lux_range_1 = luxValue;
    1E9C: 52 00    MOV   A,[X+0]
    1E9E: 08       PUSH  A
    1E9F: 52 01    MOV   A,[X+1]
    1EA1: 08       PUSH  A
    1EA2: 52 02    MOV   A,[X+2]
    1EA4: 08       PUSH  A
    1EA5: 52 03    MOV   A,[X+3]
    1EA7: 08       PUSH  A
    1EA8: 62 D0 00 MOV   REG[0xD0],0x0
    1EAB: 7C 22 3C LCALL 0x223C
    1EAE: 18       POP   A
    1EAF: 62 D0 00 MOV   REG[0xD0],0x0
    1EB2: 53 C0    MOV   [lux_range_1+1],A
    1EB4: 18       POP   A
    1EB5: 53 BF    MOV   [lux_range_1],A
    1EB7: 38 FE    ADD   SP,0xFE
(0618) 		}
    1EB9: 83 2F    JMP   0x21E9
(0619) 		else if (create_word(luxValue, tempValue,label,lux_range_1,luxValue,temp_range_1,temp_range_2) == word_listened)
    1EBB: 62 D0 00 MOV   REG[0xD0],0x0
    1EBE: 51 C1    MOV   A,[temp_range_2]
    1EC0: 08       PUSH  A
    1EC1: 51 C2    MOV   A,[temp_range_2+1]
    1EC3: 08       PUSH  A
    1EC4: 62 D0 00 MOV   REG[0xD0],0x0
    1EC7: 51 BB    MOV   A,[temp_range_1]
    1EC9: 08       PUSH  A
    1ECA: 51 BC    MOV   A,[temp_range_1+1]
    1ECC: 08       PUSH  A
    1ECD: 62 D0 00 MOV   REG[0xD0],0x0
    1ED0: 52 00    MOV   A,[X+0]
    1ED2: 08       PUSH  A
    1ED3: 52 01    MOV   A,[X+1]
    1ED5: 08       PUSH  A
    1ED6: 52 02    MOV   A,[X+2]
    1ED8: 08       PUSH  A
    1ED9: 52 03    MOV   A,[X+3]
    1EDB: 08       PUSH  A
    1EDC: 7C 22 3C LCALL 0x223C
    1EDF: 18       POP   A
    1EE0: 53 B9    MOV   [__r1],A
    1EE2: 18       POP   A
    1EE3: 38 FE    ADD   SP,0xFE
    1EE5: 08       PUSH  A
    1EE6: 51 B9    MOV   A,[__r1]
    1EE8: 08       PUSH  A
    1EE9: 62 D0 00 MOV   REG[0xD0],0x0
    1EEC: 51 BF    MOV   A,[lux_range_1]
    1EEE: 08       PUSH  A
    1EEF: 51 C0    MOV   A,[lux_range_1+1]
    1EF1: 08       PUSH  A
    1EF2: 52 06    MOV   A,[X+6]
    1EF4: 08       PUSH  A
    1EF5: 52 07    MOV   A,[X+7]
    1EF7: 08       PUSH  A
    1EF8: 52 04    MOV   A,[X+4]
    1EFA: 08       PUSH  A
    1EFB: 52 05    MOV   A,[X+5]
    1EFD: 08       PUSH  A
    1EFE: 52 00    MOV   A,[X+0]
    1F00: 08       PUSH  A
    1F01: 52 01    MOV   A,[X+1]
    1F03: 08       PUSH  A
    1F04: 52 02    MOV   A,[X+2]
    1F06: 08       PUSH  A
    1F07: 52 03    MOV   A,[X+3]
    1F09: 08       PUSH  A
    1F0A: 7C 10 08 LCALL _create_word
    1F0D: 38 F0    ADD   SP,0xF0
    1F0F: 62 D0 00 MOV   REG[0xD0],0x0
    1F12: 53 B9    MOV   [__r1],A
    1F14: 50 00    MOV   A,0x0
    1F16: 3B FB    CMP   A,[X-5]
    1F18: B0 26    JNZ   0x1F3F
    1F1A: 51 B9    MOV   A,[__r1]
    1F1C: 3B FC    CMP   A,[X-4]
    1F1E: B0 20    JNZ   0x1F3F
(0620) 		{
(0621) 			lux_range_2 = luxValue;
    1F20: 52 00    MOV   A,[X+0]
    1F22: 08       PUSH  A
    1F23: 52 01    MOV   A,[X+1]
    1F25: 08       PUSH  A
    1F26: 52 02    MOV   A,[X+2]
    1F28: 08       PUSH  A
    1F29: 52 03    MOV   A,[X+3]
    1F2B: 08       PUSH  A
    1F2C: 62 D0 00 MOV   REG[0xD0],0x0
    1F2F: 7C 22 3C LCALL 0x223C
    1F32: 18       POP   A
    1F33: 62 D0 00 MOV   REG[0xD0],0x0
    1F36: 53 BE    MOV   [lux_range_2+1],A
    1F38: 18       POP   A
    1F39: 53 BD    MOV   [lux_range_2],A
    1F3B: 38 FE    ADD   SP,0xFE
(0622) 		}
    1F3D: 82 AB    JMP   0x21E9
(0623) 		else if (create_word(luxValue, tempValue,label,lux_range_1,lux_range_2,tempValue,temp_range_2) == word_listened)
    1F3F: 62 D0 00 MOV   REG[0xD0],0x0
    1F42: 51 C1    MOV   A,[temp_range_2]
    1F44: 08       PUSH  A
    1F45: 51 C2    MOV   A,[temp_range_2+1]
    1F47: 08       PUSH  A
    1F48: 52 04    MOV   A,[X+4]
    1F4A: 08       PUSH  A
    1F4B: 52 05    MOV   A,[X+5]
    1F4D: 08       PUSH  A
    1F4E: 62 D0 00 MOV   REG[0xD0],0x0
    1F51: 51 BD    MOV   A,[lux_range_2]
    1F53: 08       PUSH  A
    1F54: 51 BE    MOV   A,[lux_range_2+1]
    1F56: 08       PUSH  A
    1F57: 62 D0 00 MOV   REG[0xD0],0x0
    1F5A: 51 BF    MOV   A,[lux_range_1]
    1F5C: 08       PUSH  A
    1F5D: 51 C0    MOV   A,[lux_range_1+1]
    1F5F: 08       PUSH  A
    1F60: 52 06    MOV   A,[X+6]
    1F62: 08       PUSH  A
    1F63: 52 07    MOV   A,[X+7]
    1F65: 08       PUSH  A
    1F66: 52 04    MOV   A,[X+4]
    1F68: 08       PUSH  A
    1F69: 52 05    MOV   A,[X+5]
    1F6B: 08       PUSH  A
    1F6C: 52 00    MOV   A,[X+0]
    1F6E: 08       PUSH  A
    1F6F: 52 01    MOV   A,[X+1]
    1F71: 08       PUSH  A
    1F72: 52 02    MOV   A,[X+2]
    1F74: 08       PUSH  A
    1F75: 52 03    MOV   A,[X+3]
    1F77: 08       PUSH  A
    1F78: 7C 10 08 LCALL _create_word
    1F7B: 38 F0    ADD   SP,0xF0
    1F7D: 62 D0 00 MOV   REG[0xD0],0x0
    1F80: 53 B9    MOV   [__r1],A
    1F82: 50 00    MOV   A,0x0
    1F84: 3B FB    CMP   A,[X-5]
    1F86: B0 14    JNZ   0x1F9B
    1F88: 51 B9    MOV   A,[__r1]
    1F8A: 3B FC    CMP   A,[X-4]
    1F8C: B0 0E    JNZ   0x1F9B
(0624) 		{
(0625) 			temp_range_1 = tempValue;
    1F8E: 62 D0 00 MOV   REG[0xD0],0x0
    1F91: 52 05    MOV   A,[X+5]
    1F93: 53 BC    MOV   [temp_range_1+1],A
    1F95: 52 04    MOV   A,[X+4]
    1F97: 53 BB    MOV   [temp_range_1],A
(0626) 		}
    1F99: 82 4F    JMP   0x21E9
(0627) 		else if (create_word(luxValue, tempValue,label,lux_range_1,lux_range_2,temp_range_1,tempValue) == word_listened)
    1F9B: 52 04    MOV   A,[X+4]
    1F9D: 08       PUSH  A
    1F9E: 52 05    MOV   A,[X+5]
    1FA0: 08       PUSH  A
    1FA1: 62 D0 00 MOV   REG[0xD0],0x0
    1FA4: 51 BB    MOV   A,[temp_range_1]
    1FA6: 08       PUSH  A
    1FA7: 51 BC    MOV   A,[temp_range_1+1]
    1FA9: 08       PUSH  A
    1FAA: 62 D0 00 MOV   REG[0xD0],0x0
    1FAD: 51 BD    MOV   A,[lux_range_2]
    1FAF: 08       PUSH  A
    1FB0: 51 BE    MOV   A,[lux_range_2+1]
    1FB2: 08       PUSH  A
    1FB3: 62 D0 00 MOV   REG[0xD0],0x0
    1FB6: 51 BF    MOV   A,[lux_range_1]
    1FB8: 08       PUSH  A
    1FB9: 51 C0    MOV   A,[lux_range_1+1]
    1FBB: 08       PUSH  A
    1FBC: 52 06    MOV   A,[X+6]
    1FBE: 08       PUSH  A
    1FBF: 52 07    MOV   A,[X+7]
    1FC1: 08       PUSH  A
    1FC2: 52 04    MOV   A,[X+4]
    1FC4: 08       PUSH  A
    1FC5: 52 05    MOV   A,[X+5]
    1FC7: 08       PUSH  A
    1FC8: 52 00    MOV   A,[X+0]
    1FCA: 08       PUSH  A
    1FCB: 52 01    MOV   A,[X+1]
    1FCD: 08       PUSH  A
    1FCE: 52 02    MOV   A,[X+2]
    1FD0: 08       PUSH  A
    1FD1: 52 03    MOV   A,[X+3]
    1FD3: 08       PUSH  A
    1FD4: 7C 10 08 LCALL _create_word
    1FD7: 38 F0    ADD   SP,0xF0
    1FD9: 62 D0 00 MOV   REG[0xD0],0x0
    1FDC: 53 B9    MOV   [__r1],A
    1FDE: 50 00    MOV   A,0x0
    1FE0: 3B FB    CMP   A,[X-5]
    1FE2: B2 06    JNZ   0x21E9
    1FE4: 51 B9    MOV   A,[__r1]
    1FE6: 3B FC    CMP   A,[X-4]
    1FE8: B2 00    JNZ   0x21E9
(0628) 		{
(0629) 			temp_range_2 = tempValue;
    1FEA: 62 D0 00 MOV   REG[0xD0],0x0
    1FED: 52 05    MOV   A,[X+5]
    1FEF: 53 C2    MOV   [temp_range_2+1],A
    1FF1: 52 04    MOV   A,[X+4]
    1FF3: 53 C1    MOV   [temp_range_2],A
(0630) 		}
(0631) 	}
    1FF5: 81 F3    JMP   0x21E9
(0632) 	else if((word_listened & MS_NIBBLE_MASK ==0) && (word_listened & LS_NIBBLE_MASK != 0))
    1FF7: 50 00    MOV   A,0x0
    1FF9: A0 CF    JZ    0x20C9
    1FFB: 62 D0 00 MOV   REG[0xD0],0x0
    1FFE: 52 FC    MOV   A,[X-4]
    2000: 21 01    AND   A,0x1
    2002: 53 B9    MOV   [__r1],A
    2004: 52 FB    MOV   A,[X-5]
    2006: 21 00    AND   A,0x0
    2008: 39 00    CMP   A,0x0
    200A: B0 06    JNZ   0x2011
    200C: 3C B9 00 CMP   [__r1],0x0
    200F: A0 B9    JZ    0x20C9
(0633) 	{
(0634) 		//relearn only temperature ranges
(0635) 		if (create_word(luxValue, tempValue,label,lux_range_1,lux_range_2,tempValue,temp_range_2) == word_listened)
    2011: 62 D0 00 MOV   REG[0xD0],0x0
    2014: 51 C1    MOV   A,[temp_range_2]
    2016: 08       PUSH  A
    2017: 51 C2    MOV   A,[temp_range_2+1]
    2019: 08       PUSH  A
    201A: 52 04    MOV   A,[X+4]
    201C: 08       PUSH  A
    201D: 52 05    MOV   A,[X+5]
    201F: 08       PUSH  A
    2020: 62 D0 00 MOV   REG[0xD0],0x0
    2023: 51 BD    MOV   A,[lux_range_2]
    2025: 08       PUSH  A
    2026: 51 BE    MOV   A,[lux_range_2+1]
    2028: 08       PUSH  A
    2029: 62 D0 00 MOV   REG[0xD0],0x0
    202C: 51 BF    MOV   A,[lux_range_1]
    202E: 08       PUSH  A
    202F: 51 C0    MOV   A,[lux_range_1+1]
    2031: 08       PUSH  A
    2032: 52 06    MOV   A,[X+6]
    2034: 08       PUSH  A
    2035: 52 07    MOV   A,[X+7]
    2037: 08       PUSH  A
    2038: 52 04    MOV   A,[X+4]
    203A: 08       PUSH  A
    203B: 52 05    MOV   A,[X+5]
    203D: 08       PUSH  A
    203E: 52 00    MOV   A,[X+0]
    2040: 08       PUSH  A
    2041: 52 01    MOV   A,[X+1]
    2043: 08       PUSH  A
    2044: 52 02    MOV   A,[X+2]
    2046: 08       PUSH  A
    2047: 52 03    MOV   A,[X+3]
    2049: 08       PUSH  A
    204A: 7C 10 08 LCALL _create_word
    204D: 38 F0    ADD   SP,0xF0
    204F: 62 D0 00 MOV   REG[0xD0],0x0
    2052: 53 B9    MOV   [__r1],A
    2054: 50 00    MOV   A,0x0
    2056: 3B FB    CMP   A,[X-5]
    2058: B0 14    JNZ   0x206D
    205A: 51 B9    MOV   A,[__r1]
    205C: 3B FC    CMP   A,[X-4]
    205E: B0 0E    JNZ   0x206D
(0636) 		{
(0637) 			temp_range_1 = tempValue;
    2060: 62 D0 00 MOV   REG[0xD0],0x0
    2063: 52 05    MOV   A,[X+5]
    2065: 53 BC    MOV   [temp_range_1+1],A
    2067: 52 04    MOV   A,[X+4]
    2069: 53 BB    MOV   [temp_range_1],A
(0638) 		}
    206B: 81 7D    JMP   0x21E9
(0639) 		else if (create_word(luxValue, tempValue,label,lux_range_1,lux_range_2,temp_range_1,tempValue) == word_listened)
    206D: 52 04    MOV   A,[X+4]
    206F: 08       PUSH  A
    2070: 52 05    MOV   A,[X+5]
    2072: 08       PUSH  A
    2073: 62 D0 00 MOV   REG[0xD0],0x0
    2076: 51 BB    MOV   A,[temp_range_1]
    2078: 08       PUSH  A
    2079: 51 BC    MOV   A,[temp_range_1+1]
    207B: 08       PUSH  A
    207C: 62 D0 00 MOV   REG[0xD0],0x0
    207F: 51 BD    MOV   A,[lux_range_2]
    2081: 08       PUSH  A
    2082: 51 BE    MOV   A,[lux_range_2+1]
    2084: 08       PUSH  A
    2085: 62 D0 00 MOV   REG[0xD0],0x0
    2088: 51 BF    MOV   A,[lux_range_1]
    208A: 08       PUSH  A
    208B: 51 C0    MOV   A,[lux_range_1+1]
    208D: 08       PUSH  A
    208E: 52 06    MOV   A,[X+6]
    2090: 08       PUSH  A
    2091: 52 07    MOV   A,[X+7]
    2093: 08       PUSH  A
    2094: 52 04    MOV   A,[X+4]
    2096: 08       PUSH  A
    2097: 52 05    MOV   A,[X+5]
    2099: 08       PUSH  A
    209A: 52 00    MOV   A,[X+0]
    209C: 08       PUSH  A
    209D: 52 01    MOV   A,[X+1]
    209F: 08       PUSH  A
    20A0: 52 02    MOV   A,[X+2]
    20A2: 08       PUSH  A
    20A3: 52 03    MOV   A,[X+3]
    20A5: 08       PUSH  A
    20A6: 7C 10 08 LCALL _create_word
    20A9: 38 F0    ADD   SP,0xF0
    20AB: 62 D0 00 MOV   REG[0xD0],0x0
    20AE: 53 B9    MOV   [__r1],A
    20B0: 50 00    MOV   A,0x0
    20B2: 3B FB    CMP   A,[X-5]
    20B4: B1 34    JNZ   0x21E9
    20B6: 51 B9    MOV   A,[__r1]
    20B8: 3B FC    CMP   A,[X-4]
    20BA: B1 2E    JNZ   0x21E9
(0640) 		{
(0641) 			temp_range_2 = tempValue;
    20BC: 62 D0 00 MOV   REG[0xD0],0x0
    20BF: 52 05    MOV   A,[X+5]
    20C1: 53 C2    MOV   [temp_range_2+1],A
    20C3: 52 04    MOV   A,[X+4]
    20C5: 53 C1    MOV   [temp_range_2],A
(0642) 		}
(0643) 	}
    20C7: 81 21    JMP   0x21E9
(0644) 	else if ((word_listened & MS_NIBBLE_MASK !=0 ) && (word_listened & LS_NIBBLE_MASK == 0))
    20C9: 62 D0 00 MOV   REG[0xD0],0x0
    20CC: 52 FC    MOV   A,[X-4]
    20CE: 21 01    AND   A,0x1
    20D0: 53 B9    MOV   [__r1],A
    20D2: 52 FB    MOV   A,[X-5]
    20D4: 21 00    AND   A,0x0
    20D6: 39 00    CMP   A,0x0
    20D8: B0 06    JNZ   0x20DF
    20DA: 3C B9 00 CMP   [__r1],0x0
    20DD: A1 0B    JZ    0x21E9
    20DF: 50 00    MOV   A,0x0
    20E1: A1 07    JZ    0x21E9
(0645) 	{
(0646) 		//relearn only light ranges
(0647) 		if (create_word(luxValue, tempValue,label,luxValue,lux_range_2,temp_range_1,temp_range_2) == word_listened)
    20E3: 62 D0 00 MOV   REG[0xD0],0x0
    20E6: 51 C1    MOV   A,[temp_range_2]
    20E8: 08       PUSH  A
    20E9: 51 C2    MOV   A,[temp_range_2+1]
    20EB: 08       PUSH  A
    20EC: 62 D0 00 MOV   REG[0xD0],0x0
    20EF: 51 BB    MOV   A,[temp_range_1]
    20F1: 08       PUSH  A
    20F2: 51 BC    MOV   A,[temp_range_1+1]
    20F4: 08       PUSH  A
    20F5: 62 D0 00 MOV   REG[0xD0],0x0
    20F8: 51 BD    MOV   A,[lux_range_2]
    20FA: 08       PUSH  A
    20FB: 51 BE    MOV   A,[lux_range_2+1]
    20FD: 08       PUSH  A
    20FE: 62 D0 00 MOV   REG[0xD0],0x0
    2101: 52 00    MOV   A,[X+0]
    2103: 08       PUSH  A
    2104: 52 01    MOV   A,[X+1]
    2106: 08       PUSH  A
    2107: 52 02    MOV   A,[X+2]
    2109: 08       PUSH  A
    210A: 52 03    MOV   A,[X+3]
    210C: 08       PUSH  A
    210D: 7C 22 3C LCALL 0x223C
    2110: 18       POP   A
    2111: 53 B9    MOV   [__r1],A
    2113: 18       POP   A
    2114: 38 FE    ADD   SP,0xFE
    2116: 08       PUSH  A
    2117: 51 B9    MOV   A,[__r1]
    2119: 08       PUSH  A
    211A: 52 06    MOV   A,[X+6]
    211C: 08       PUSH  A
    211D: 52 07    MOV   A,[X+7]
    211F: 08       PUSH  A
    2120: 52 04    MOV   A,[X+4]
    2122: 08       PUSH  A
    2123: 52 05    MOV   A,[X+5]
    2125: 08       PUSH  A
    2126: 52 00    MOV   A,[X+0]
    2128: 08       PUSH  A
    2129: 52 01    MOV   A,[X+1]
    212B: 08       PUSH  A
    212C: 52 02    MOV   A,[X+2]
    212E: 08       PUSH  A
    212F: 52 03    MOV   A,[X+3]
    2131: 08       PUSH  A
    2132: 7C 10 08 LCALL _create_word
    2135: 38 F0    ADD   SP,0xF0
    2137: 62 D0 00 MOV   REG[0xD0],0x0
    213A: 53 B9    MOV   [__r1],A
    213C: 50 00    MOV   A,0x0
    213E: 3B FB    CMP   A,[X-5]
    2140: B0 26    JNZ   0x2167
    2142: 51 B9    MOV   A,[__r1]
    2144: 3B FC    CMP   A,[X-4]
    2146: B0 20    JNZ   0x2167
(0648) 		{
(0649) 			lux_range_1 = luxValue;
    2148: 52 00    MOV   A,[X+0]
    214A: 08       PUSH  A
    214B: 52 01    MOV   A,[X+1]
    214D: 08       PUSH  A
    214E: 52 02    MOV   A,[X+2]
    2150: 08       PUSH  A
    2151: 52 03    MOV   A,[X+3]
    2153: 08       PUSH  A
    2154: 62 D0 00 MOV   REG[0xD0],0x0
    2157: 7C 22 3C LCALL 0x223C
    215A: 18       POP   A
    215B: 62 D0 00 MOV   REG[0xD0],0x0
    215E: 53 C0    MOV   [lux_range_1+1],A
    2160: 18       POP   A
    2161: 53 BF    MOV   [lux_range_1],A
    2163: 38 FE    ADD   SP,0xFE
(0650) 		}
    2165: 80 83    JMP   0x21E9
(0651) 		else if (create_word(luxValue, tempValue,label,lux_range_1,luxValue,temp_range_1,temp_range_2) == word_listened)
    2167: 62 D0 00 MOV   REG[0xD0],0x0
    216A: 51 C1    MOV   A,[temp_range_2]
    216C: 08       PUSH  A
    216D: 51 C2    MOV   A,[temp_range_2+1]
    216F: 08       PUSH  A
    2170: 62 D0 00 MOV   REG[0xD0],0x0
    2173: 51 BB    MOV   A,[temp_range_1]
    2175: 08       PUSH  A
    2176: 51 BC    MOV   A,[temp_range_1+1]
    2178: 08       PUSH  A
    2179: 62 D0 00 MOV   REG[0xD0],0x0
    217C: 52 00    MOV   A,[X+0]
    217E: 08       PUSH  A
    217F: 52 01    MOV   A,[X+1]
    2181: 08       PUSH  A
    2182: 52 02    MOV   A,[X+2]
    2184: 08       PUSH  A
    2185: 52 03    MOV   A,[X+3]
    2187: 08       PUSH  A
    2188: 7C 22 3C LCALL 0x223C
    218B: 18       POP   A
    218C: 53 B9    MOV   [__r1],A
    218E: 18       POP   A
    218F: 38 FE    ADD   SP,0xFE
    2191: 08       PUSH  A
    2192: 51 B9    MOV   A,[__r1]
    2194: 08       PUSH  A
    2195: 62 D0 00 MOV   REG[0xD0],0x0
    2198: 51 BF    MOV   A,[lux_range_1]
    219A: 08       PUSH  A
    219B: 51 C0    MOV   A,[lux_range_1+1]
    219D: 08       PUSH  A
    219E: 52 06    MOV   A,[X+6]
    21A0: 08       PUSH  A
    21A1: 52 07    MOV   A,[X+7]
    21A3: 08       PUSH  A
    21A4: 52 04    MOV   A,[X+4]
    21A6: 08       PUSH  A
    21A7: 52 05    MOV   A,[X+5]
    21A9: 08       PUSH  A
    21AA: 52 00    MOV   A,[X+0]
    21AC: 08       PUSH  A
    21AD: 52 01    MOV   A,[X+1]
    21AF: 08       PUSH  A
    21B0: 52 02    MOV   A,[X+2]
    21B2: 08       PUSH  A
    21B3: 52 03    MOV   A,[X+3]
    21B5: 08       PUSH  A
    21B6: 7C 10 08 LCALL _create_word
    21B9: 38 F0    ADD   SP,0xF0
    21BB: 62 D0 00 MOV   REG[0xD0],0x0
    21BE: 53 B9    MOV   [__r1],A
    21C0: 50 00    MOV   A,0x0
    21C2: 3B FB    CMP   A,[X-5]
    21C4: B0 24    JNZ   0x21E9
    21C6: 51 B9    MOV   A,[__r1]
    21C8: 3B FC    CMP   A,[X-4]
    21CA: B0 1E    JNZ   0x21E9
(0652) 		{
(0653) 			lux_range_2 = luxValue;
    21CC: 52 00    MOV   A,[X+0]
    21CE: 08       PUSH  A
    21CF: 52 01    MOV   A,[X+1]
    21D1: 08       PUSH  A
    21D2: 52 02    MOV   A,[X+2]
    21D4: 08       PUSH  A
    21D5: 52 03    MOV   A,[X+3]
    21D7: 08       PUSH  A
    21D8: 62 D0 00 MOV   REG[0xD0],0x0
    21DB: 7C 22 3C LCALL 0x223C
    21DE: 18       POP   A
    21DF: 62 D0 00 MOV   REG[0xD0],0x0
    21E2: 53 BE    MOV   [lux_range_2+1],A
    21E4: 18       POP   A
    21E5: 53 BD    MOV   [lux_range_2],A
    21E7: 38 FE    ADD   SP,0xFE
(0654) 		}
(0655) 	}
    21E9: 38 F8    ADD   SP,0xF8
    21EB: 20       POP   X
    21EC: 7F       RET   
FILE: lib\psocgpioint.asm               (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038) 
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
                                        (0059) 
                                        (0060)    ;---------------------------------------------------
                                        (0061)    ; Insert your custom code above this banner
                                        (0062)    ;---------------------------------------------------
                                        (0063)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0064) 
21ED: 7E       RETI                     (0065)    reti
                                        (0066) 
                                        (0067) 
                                        (0068) ; end of file PSoCGPIOINT.asm
