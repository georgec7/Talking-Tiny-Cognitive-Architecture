/******************************************************************************
*  Generated by PSoC Designer 5.4.3191
******************************************************************************/
#include <m8c.h>
/*
*   PSoCGPIOINT.h
*   Data: 04 June, 2002
*   Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
*
*  This file is generated by the Device Editor on Application Generation.
*  It contains equates that are useful in writing code relating to GPIO
*  related values.
*  
*  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
*  Edits to this file will not be preserved.
*/
// RESET_SWITCH address and mask defines
#pragma	ioport	RESET_SWITCH_Data_ADDR:	0x4
BYTE			RESET_SWITCH_Data_ADDR;
#pragma	ioport	RESET_SWITCH_DriveMode_0_ADDR:	0x104
BYTE			RESET_SWITCH_DriveMode_0_ADDR;
#pragma	ioport	RESET_SWITCH_DriveMode_1_ADDR:	0x105
BYTE			RESET_SWITCH_DriveMode_1_ADDR;
#pragma	ioport	RESET_SWITCH_DriveMode_2_ADDR:	0x7
BYTE			RESET_SWITCH_DriveMode_2_ADDR;
#pragma	ioport	RESET_SWITCH_GlobalSelect_ADDR:	0x6
BYTE			RESET_SWITCH_GlobalSelect_ADDR;
#pragma	ioport	RESET_SWITCH_IntCtrl_0_ADDR:	0x106
BYTE			RESET_SWITCH_IntCtrl_0_ADDR;
#pragma	ioport	RESET_SWITCH_IntCtrl_1_ADDR:	0x107
BYTE			RESET_SWITCH_IntCtrl_1_ADDR;
#pragma	ioport	RESET_SWITCH_IntEn_ADDR:	0x5
BYTE			RESET_SWITCH_IntEn_ADDR;
#define RESET_SWITCH_MASK 0x1
#pragma	ioport	RESET_SWITCH_MUXBusCtrl_ADDR:	0x1d9
BYTE			RESET_SWITCH_MUXBusCtrl_ADDR;
// AnalogColumn_InputMUX_0 address and mask defines
#pragma	ioport	AnalogColumn_InputMUX_0_Data_ADDR:	0x0
BYTE			AnalogColumn_InputMUX_0_Data_ADDR;
#pragma	ioport	AnalogColumn_InputMUX_0_DriveMode_0_ADDR:	0x100
BYTE			AnalogColumn_InputMUX_0_DriveMode_0_ADDR;
#pragma	ioport	AnalogColumn_InputMUX_0_DriveMode_1_ADDR:	0x101
BYTE			AnalogColumn_InputMUX_0_DriveMode_1_ADDR;
#pragma	ioport	AnalogColumn_InputMUX_0_DriveMode_2_ADDR:	0x3
BYTE			AnalogColumn_InputMUX_0_DriveMode_2_ADDR;
#pragma	ioport	AnalogColumn_InputMUX_0_GlobalSelect_ADDR:	0x2
BYTE			AnalogColumn_InputMUX_0_GlobalSelect_ADDR;
#pragma	ioport	AnalogColumn_InputMUX_0_IntCtrl_0_ADDR:	0x102
BYTE			AnalogColumn_InputMUX_0_IntCtrl_0_ADDR;
#pragma	ioport	AnalogColumn_InputMUX_0_IntCtrl_1_ADDR:	0x103
BYTE			AnalogColumn_InputMUX_0_IntCtrl_1_ADDR;
#pragma	ioport	AnalogColumn_InputMUX_0_IntEn_ADDR:	0x1
BYTE			AnalogColumn_InputMUX_0_IntEn_ADDR;
#define AnalogColumn_InputMUX_0_MASK 0x2
#pragma	ioport	AnalogColumn_InputMUX_0_MUXBusCtrl_ADDR:	0x1d8
BYTE			AnalogColumn_InputMUX_0_MUXBusCtrl_ADDR;
// AnalogOutBuf_0 address and mask defines
#pragma	ioport	AnalogOutBuf_0_Data_ADDR:	0x0
BYTE			AnalogOutBuf_0_Data_ADDR;
#pragma	ioport	AnalogOutBuf_0_DriveMode_0_ADDR:	0x100
BYTE			AnalogOutBuf_0_DriveMode_0_ADDR;
#pragma	ioport	AnalogOutBuf_0_DriveMode_1_ADDR:	0x101
BYTE			AnalogOutBuf_0_DriveMode_1_ADDR;
#pragma	ioport	AnalogOutBuf_0_DriveMode_2_ADDR:	0x3
BYTE			AnalogOutBuf_0_DriveMode_2_ADDR;
#pragma	ioport	AnalogOutBuf_0_GlobalSelect_ADDR:	0x2
BYTE			AnalogOutBuf_0_GlobalSelect_ADDR;
#pragma	ioport	AnalogOutBuf_0_IntCtrl_0_ADDR:	0x102
BYTE			AnalogOutBuf_0_IntCtrl_0_ADDR;
#pragma	ioport	AnalogOutBuf_0_IntCtrl_1_ADDR:	0x103
BYTE			AnalogOutBuf_0_IntCtrl_1_ADDR;
#pragma	ioport	AnalogOutBuf_0_IntEn_ADDR:	0x1
BYTE			AnalogOutBuf_0_IntEn_ADDR;
#define AnalogOutBuf_0_MASK 0x8
#pragma	ioport	AnalogOutBuf_0_MUXBusCtrl_ADDR:	0x1d8
BYTE			AnalogOutBuf_0_MUXBusCtrl_ADDR;
// AnalogColumn_InputMUX_1 address and mask defines
#pragma	ioport	AnalogColumn_InputMUX_1_Data_ADDR:	0x0
BYTE			AnalogColumn_InputMUX_1_Data_ADDR;
#pragma	ioport	AnalogColumn_InputMUX_1_DriveMode_0_ADDR:	0x100
BYTE			AnalogColumn_InputMUX_1_DriveMode_0_ADDR;
#pragma	ioport	AnalogColumn_InputMUX_1_DriveMode_1_ADDR:	0x101
BYTE			AnalogColumn_InputMUX_1_DriveMode_1_ADDR;
#pragma	ioport	AnalogColumn_InputMUX_1_DriveMode_2_ADDR:	0x3
BYTE			AnalogColumn_InputMUX_1_DriveMode_2_ADDR;
#pragma	ioport	AnalogColumn_InputMUX_1_GlobalSelect_ADDR:	0x2
BYTE			AnalogColumn_InputMUX_1_GlobalSelect_ADDR;
#pragma	ioport	AnalogColumn_InputMUX_1_IntCtrl_0_ADDR:	0x102
BYTE			AnalogColumn_InputMUX_1_IntCtrl_0_ADDR;
#pragma	ioport	AnalogColumn_InputMUX_1_IntCtrl_1_ADDR:	0x103
BYTE			AnalogColumn_InputMUX_1_IntCtrl_1_ADDR;
#pragma	ioport	AnalogColumn_InputMUX_1_IntEn_ADDR:	0x1
BYTE			AnalogColumn_InputMUX_1_IntEn_ADDR;
#define AnalogColumn_InputMUX_1_MASK 0x10
#pragma	ioport	AnalogColumn_InputMUX_1_MUXBusCtrl_ADDR:	0x1d8
BYTE			AnalogColumn_InputMUX_1_MUXBusCtrl_ADDR;
// AnalogOutBuf_1 address and mask defines
#pragma	ioport	AnalogOutBuf_1_Data_ADDR:	0x0
BYTE			AnalogOutBuf_1_Data_ADDR;
#pragma	ioport	AnalogOutBuf_1_DriveMode_0_ADDR:	0x100
BYTE			AnalogOutBuf_1_DriveMode_0_ADDR;
#pragma	ioport	AnalogOutBuf_1_DriveMode_1_ADDR:	0x101
BYTE			AnalogOutBuf_1_DriveMode_1_ADDR;
#pragma	ioport	AnalogOutBuf_1_DriveMode_2_ADDR:	0x3
BYTE			AnalogOutBuf_1_DriveMode_2_ADDR;
#pragma	ioport	AnalogOutBuf_1_GlobalSelect_ADDR:	0x2
BYTE			AnalogOutBuf_1_GlobalSelect_ADDR;
#pragma	ioport	AnalogOutBuf_1_IntCtrl_0_ADDR:	0x102
BYTE			AnalogOutBuf_1_IntCtrl_0_ADDR;
#pragma	ioport	AnalogOutBuf_1_IntCtrl_1_ADDR:	0x103
BYTE			AnalogOutBuf_1_IntCtrl_1_ADDR;
#pragma	ioport	AnalogOutBuf_1_IntEn_ADDR:	0x1
BYTE			AnalogOutBuf_1_IntEn_ADDR;
#define AnalogOutBuf_1_MASK 0x20
#pragma	ioport	AnalogOutBuf_1_MUXBusCtrl_ADDR:	0x1d8
BYTE			AnalogOutBuf_1_MUXBusCtrl_ADDR;
// PWM_Out address and mask defines
#pragma	ioport	PWM_Out_Data_ADDR:	0x4
BYTE			PWM_Out_Data_ADDR;
#pragma	ioport	PWM_Out_DriveMode_0_ADDR:	0x104
BYTE			PWM_Out_DriveMode_0_ADDR;
#pragma	ioport	PWM_Out_DriveMode_1_ADDR:	0x105
BYTE			PWM_Out_DriveMode_1_ADDR;
#pragma	ioport	PWM_Out_DriveMode_2_ADDR:	0x7
BYTE			PWM_Out_DriveMode_2_ADDR;
#pragma	ioport	PWM_Out_GlobalSelect_ADDR:	0x6
BYTE			PWM_Out_GlobalSelect_ADDR;
#pragma	ioport	PWM_Out_IntCtrl_0_ADDR:	0x106
BYTE			PWM_Out_IntCtrl_0_ADDR;
#pragma	ioport	PWM_Out_IntCtrl_1_ADDR:	0x107
BYTE			PWM_Out_IntCtrl_1_ADDR;
#pragma	ioport	PWM_Out_IntEn_ADDR:	0x5
BYTE			PWM_Out_IntEn_ADDR;
#define PWM_Out_MASK 0x10
#pragma	ioport	PWM_Out_MUXBusCtrl_ADDR:	0x1d9
BYTE			PWM_Out_MUXBusCtrl_ADDR;
// I2CHW_TempSDA address and mask defines
#pragma	ioport	I2CHW_TempSDA_Data_ADDR:	0x4
BYTE			I2CHW_TempSDA_Data_ADDR;
#pragma	ioport	I2CHW_TempSDA_DriveMode_0_ADDR:	0x104
BYTE			I2CHW_TempSDA_DriveMode_0_ADDR;
#pragma	ioport	I2CHW_TempSDA_DriveMode_1_ADDR:	0x105
BYTE			I2CHW_TempSDA_DriveMode_1_ADDR;
#pragma	ioport	I2CHW_TempSDA_DriveMode_2_ADDR:	0x7
BYTE			I2CHW_TempSDA_DriveMode_2_ADDR;
#pragma	ioport	I2CHW_TempSDA_GlobalSelect_ADDR:	0x6
BYTE			I2CHW_TempSDA_GlobalSelect_ADDR;
#pragma	ioport	I2CHW_TempSDA_IntCtrl_0_ADDR:	0x106
BYTE			I2CHW_TempSDA_IntCtrl_0_ADDR;
#pragma	ioport	I2CHW_TempSDA_IntCtrl_1_ADDR:	0x107
BYTE			I2CHW_TempSDA_IntCtrl_1_ADDR;
#pragma	ioport	I2CHW_TempSDA_IntEn_ADDR:	0x5
BYTE			I2CHW_TempSDA_IntEn_ADDR;
#define I2CHW_TempSDA_MASK 0x20
#pragma	ioport	I2CHW_TempSDA_MUXBusCtrl_ADDR:	0x1d9
BYTE			I2CHW_TempSDA_MUXBusCtrl_ADDR;
// I2CHW_TempSCL address and mask defines
#pragma	ioport	I2CHW_TempSCL_Data_ADDR:	0x4
BYTE			I2CHW_TempSCL_Data_ADDR;
#pragma	ioport	I2CHW_TempSCL_DriveMode_0_ADDR:	0x104
BYTE			I2CHW_TempSCL_DriveMode_0_ADDR;
#pragma	ioport	I2CHW_TempSCL_DriveMode_1_ADDR:	0x105
BYTE			I2CHW_TempSCL_DriveMode_1_ADDR;
#pragma	ioport	I2CHW_TempSCL_DriveMode_2_ADDR:	0x7
BYTE			I2CHW_TempSCL_DriveMode_2_ADDR;
#pragma	ioport	I2CHW_TempSCL_GlobalSelect_ADDR:	0x6
BYTE			I2CHW_TempSCL_GlobalSelect_ADDR;
#pragma	ioport	I2CHW_TempSCL_IntCtrl_0_ADDR:	0x106
BYTE			I2CHW_TempSCL_IntCtrl_0_ADDR;
#pragma	ioport	I2CHW_TempSCL_IntCtrl_1_ADDR:	0x107
BYTE			I2CHW_TempSCL_IntCtrl_1_ADDR;
#pragma	ioport	I2CHW_TempSCL_IntEn_ADDR:	0x5
BYTE			I2CHW_TempSCL_IntEn_ADDR;
#define I2CHW_TempSCL_MASK 0x80
#pragma	ioport	I2CHW_TempSCL_MUXBusCtrl_ADDR:	0x1d9
BYTE			I2CHW_TempSCL_MUXBusCtrl_ADDR;
// LCD_2D4 address and mask defines
#pragma	ioport	LCD_2D4_Data_ADDR:	0x8
BYTE			LCD_2D4_Data_ADDR;
#pragma	ioport	LCD_2D4_DriveMode_0_ADDR:	0x108
BYTE			LCD_2D4_DriveMode_0_ADDR;
#pragma	ioport	LCD_2D4_DriveMode_1_ADDR:	0x109
BYTE			LCD_2D4_DriveMode_1_ADDR;
#pragma	ioport	LCD_2D4_DriveMode_2_ADDR:	0xb
BYTE			LCD_2D4_DriveMode_2_ADDR;
#pragma	ioport	LCD_2D4_GlobalSelect_ADDR:	0xa
BYTE			LCD_2D4_GlobalSelect_ADDR;
#pragma	ioport	LCD_2D4_IntCtrl_0_ADDR:	0x10a
BYTE			LCD_2D4_IntCtrl_0_ADDR;
#pragma	ioport	LCD_2D4_IntCtrl_1_ADDR:	0x10b
BYTE			LCD_2D4_IntCtrl_1_ADDR;
#pragma	ioport	LCD_2D4_IntEn_ADDR:	0x9
BYTE			LCD_2D4_IntEn_ADDR;
#define LCD_2D4_MASK 0x1
#pragma	ioport	LCD_2D4_MUXBusCtrl_ADDR:	0x1da
BYTE			LCD_2D4_MUXBusCtrl_ADDR;
// LCD_2D4 Shadow defines
//   LCD_2D4_DataShadow define
extern BYTE Port_2_Data_SHADE;
#define LCD_2D4_DataShadow (*(unsigned char*)&Port_2_Data_SHADE)
//   LCD_2D4_DriveMode_0Shadow define
extern BYTE Port_2_DriveMode_0_SHADE;
#define LCD_2D4_DriveMode_0Shadow (*(unsigned char*)&Port_2_DriveMode_0_SHADE)
//   LCD_2D4_DriveMode_1Shadow define
extern BYTE Port_2_DriveMode_1_SHADE;
#define LCD_2D4_DriveMode_1Shadow (*(unsigned char*)&Port_2_DriveMode_1_SHADE)
// LCD_2D5 address and mask defines
#pragma	ioport	LCD_2D5_Data_ADDR:	0x8
BYTE			LCD_2D5_Data_ADDR;
#pragma	ioport	LCD_2D5_DriveMode_0_ADDR:	0x108
BYTE			LCD_2D5_DriveMode_0_ADDR;
#pragma	ioport	LCD_2D5_DriveMode_1_ADDR:	0x109
BYTE			LCD_2D5_DriveMode_1_ADDR;
#pragma	ioport	LCD_2D5_DriveMode_2_ADDR:	0xb
BYTE			LCD_2D5_DriveMode_2_ADDR;
#pragma	ioport	LCD_2D5_GlobalSelect_ADDR:	0xa
BYTE			LCD_2D5_GlobalSelect_ADDR;
#pragma	ioport	LCD_2D5_IntCtrl_0_ADDR:	0x10a
BYTE			LCD_2D5_IntCtrl_0_ADDR;
#pragma	ioport	LCD_2D5_IntCtrl_1_ADDR:	0x10b
BYTE			LCD_2D5_IntCtrl_1_ADDR;
#pragma	ioport	LCD_2D5_IntEn_ADDR:	0x9
BYTE			LCD_2D5_IntEn_ADDR;
#define LCD_2D5_MASK 0x2
#pragma	ioport	LCD_2D5_MUXBusCtrl_ADDR:	0x1da
BYTE			LCD_2D5_MUXBusCtrl_ADDR;
// LCD_2D5 Shadow defines
//   LCD_2D5_DataShadow define
extern BYTE Port_2_Data_SHADE;
#define LCD_2D5_DataShadow (*(unsigned char*)&Port_2_Data_SHADE)
//   LCD_2D5_DriveMode_0Shadow define
extern BYTE Port_2_DriveMode_0_SHADE;
#define LCD_2D5_DriveMode_0Shadow (*(unsigned char*)&Port_2_DriveMode_0_SHADE)
//   LCD_2D5_DriveMode_1Shadow define
extern BYTE Port_2_DriveMode_1_SHADE;
#define LCD_2D5_DriveMode_1Shadow (*(unsigned char*)&Port_2_DriveMode_1_SHADE)
// LCD_2D6 address and mask defines
#pragma	ioport	LCD_2D6_Data_ADDR:	0x8
BYTE			LCD_2D6_Data_ADDR;
#pragma	ioport	LCD_2D6_DriveMode_0_ADDR:	0x108
BYTE			LCD_2D6_DriveMode_0_ADDR;
#pragma	ioport	LCD_2D6_DriveMode_1_ADDR:	0x109
BYTE			LCD_2D6_DriveMode_1_ADDR;
#pragma	ioport	LCD_2D6_DriveMode_2_ADDR:	0xb
BYTE			LCD_2D6_DriveMode_2_ADDR;
#pragma	ioport	LCD_2D6_GlobalSelect_ADDR:	0xa
BYTE			LCD_2D6_GlobalSelect_ADDR;
#pragma	ioport	LCD_2D6_IntCtrl_0_ADDR:	0x10a
BYTE			LCD_2D6_IntCtrl_0_ADDR;
#pragma	ioport	LCD_2D6_IntCtrl_1_ADDR:	0x10b
BYTE			LCD_2D6_IntCtrl_1_ADDR;
#pragma	ioport	LCD_2D6_IntEn_ADDR:	0x9
BYTE			LCD_2D6_IntEn_ADDR;
#define LCD_2D6_MASK 0x4
#pragma	ioport	LCD_2D6_MUXBusCtrl_ADDR:	0x1da
BYTE			LCD_2D6_MUXBusCtrl_ADDR;
// LCD_2D6 Shadow defines
//   LCD_2D6_DataShadow define
extern BYTE Port_2_Data_SHADE;
#define LCD_2D6_DataShadow (*(unsigned char*)&Port_2_Data_SHADE)
//   LCD_2D6_DriveMode_0Shadow define
extern BYTE Port_2_DriveMode_0_SHADE;
#define LCD_2D6_DriveMode_0Shadow (*(unsigned char*)&Port_2_DriveMode_0_SHADE)
//   LCD_2D6_DriveMode_1Shadow define
extern BYTE Port_2_DriveMode_1_SHADE;
#define LCD_2D6_DriveMode_1Shadow (*(unsigned char*)&Port_2_DriveMode_1_SHADE)
// LCD_2D7 address and mask defines
#pragma	ioport	LCD_2D7_Data_ADDR:	0x8
BYTE			LCD_2D7_Data_ADDR;
#pragma	ioport	LCD_2D7_DriveMode_0_ADDR:	0x108
BYTE			LCD_2D7_DriveMode_0_ADDR;
#pragma	ioport	LCD_2D7_DriveMode_1_ADDR:	0x109
BYTE			LCD_2D7_DriveMode_1_ADDR;
#pragma	ioport	LCD_2D7_DriveMode_2_ADDR:	0xb
BYTE			LCD_2D7_DriveMode_2_ADDR;
#pragma	ioport	LCD_2D7_GlobalSelect_ADDR:	0xa
BYTE			LCD_2D7_GlobalSelect_ADDR;
#pragma	ioport	LCD_2D7_IntCtrl_0_ADDR:	0x10a
BYTE			LCD_2D7_IntCtrl_0_ADDR;
#pragma	ioport	LCD_2D7_IntCtrl_1_ADDR:	0x10b
BYTE			LCD_2D7_IntCtrl_1_ADDR;
#pragma	ioport	LCD_2D7_IntEn_ADDR:	0x9
BYTE			LCD_2D7_IntEn_ADDR;
#define LCD_2D7_MASK 0x8
#pragma	ioport	LCD_2D7_MUXBusCtrl_ADDR:	0x1da
BYTE			LCD_2D7_MUXBusCtrl_ADDR;
// LCD_2D7 Shadow defines
//   LCD_2D7_DataShadow define
extern BYTE Port_2_Data_SHADE;
#define LCD_2D7_DataShadow (*(unsigned char*)&Port_2_Data_SHADE)
//   LCD_2D7_DriveMode_0Shadow define
extern BYTE Port_2_DriveMode_0_SHADE;
#define LCD_2D7_DriveMode_0Shadow (*(unsigned char*)&Port_2_DriveMode_0_SHADE)
//   LCD_2D7_DriveMode_1Shadow define
extern BYTE Port_2_DriveMode_1_SHADE;
#define LCD_2D7_DriveMode_1Shadow (*(unsigned char*)&Port_2_DriveMode_1_SHADE)
// LCD_2E address and mask defines
#pragma	ioport	LCD_2E_Data_ADDR:	0x8
BYTE			LCD_2E_Data_ADDR;
#pragma	ioport	LCD_2E_DriveMode_0_ADDR:	0x108
BYTE			LCD_2E_DriveMode_0_ADDR;
#pragma	ioport	LCD_2E_DriveMode_1_ADDR:	0x109
BYTE			LCD_2E_DriveMode_1_ADDR;
#pragma	ioport	LCD_2E_DriveMode_2_ADDR:	0xb
BYTE			LCD_2E_DriveMode_2_ADDR;
#pragma	ioport	LCD_2E_GlobalSelect_ADDR:	0xa
BYTE			LCD_2E_GlobalSelect_ADDR;
#pragma	ioport	LCD_2E_IntCtrl_0_ADDR:	0x10a
BYTE			LCD_2E_IntCtrl_0_ADDR;
#pragma	ioport	LCD_2E_IntCtrl_1_ADDR:	0x10b
BYTE			LCD_2E_IntCtrl_1_ADDR;
#pragma	ioport	LCD_2E_IntEn_ADDR:	0x9
BYTE			LCD_2E_IntEn_ADDR;
#define LCD_2E_MASK 0x10
#pragma	ioport	LCD_2E_MUXBusCtrl_ADDR:	0x1da
BYTE			LCD_2E_MUXBusCtrl_ADDR;
// LCD_2E Shadow defines
//   LCD_2E_DataShadow define
extern BYTE Port_2_Data_SHADE;
#define LCD_2E_DataShadow (*(unsigned char*)&Port_2_Data_SHADE)
//   LCD_2E_DriveMode_0Shadow define
extern BYTE Port_2_DriveMode_0_SHADE;
#define LCD_2E_DriveMode_0Shadow (*(unsigned char*)&Port_2_DriveMode_0_SHADE)
//   LCD_2E_DriveMode_1Shadow define
extern BYTE Port_2_DriveMode_1_SHADE;
#define LCD_2E_DriveMode_1Shadow (*(unsigned char*)&Port_2_DriveMode_1_SHADE)
// LCD_2RS address and mask defines
#pragma	ioport	LCD_2RS_Data_ADDR:	0x8
BYTE			LCD_2RS_Data_ADDR;
#pragma	ioport	LCD_2RS_DriveMode_0_ADDR:	0x108
BYTE			LCD_2RS_DriveMode_0_ADDR;
#pragma	ioport	LCD_2RS_DriveMode_1_ADDR:	0x109
BYTE			LCD_2RS_DriveMode_1_ADDR;
#pragma	ioport	LCD_2RS_DriveMode_2_ADDR:	0xb
BYTE			LCD_2RS_DriveMode_2_ADDR;
#pragma	ioport	LCD_2RS_GlobalSelect_ADDR:	0xa
BYTE			LCD_2RS_GlobalSelect_ADDR;
#pragma	ioport	LCD_2RS_IntCtrl_0_ADDR:	0x10a
BYTE			LCD_2RS_IntCtrl_0_ADDR;
#pragma	ioport	LCD_2RS_IntCtrl_1_ADDR:	0x10b
BYTE			LCD_2RS_IntCtrl_1_ADDR;
#pragma	ioport	LCD_2RS_IntEn_ADDR:	0x9
BYTE			LCD_2RS_IntEn_ADDR;
#define LCD_2RS_MASK 0x20
#pragma	ioport	LCD_2RS_MUXBusCtrl_ADDR:	0x1da
BYTE			LCD_2RS_MUXBusCtrl_ADDR;
// LCD_2RS Shadow defines
//   LCD_2RS_DataShadow define
extern BYTE Port_2_Data_SHADE;
#define LCD_2RS_DataShadow (*(unsigned char*)&Port_2_Data_SHADE)
//   LCD_2RS_DriveMode_0Shadow define
extern BYTE Port_2_DriveMode_0_SHADE;
#define LCD_2RS_DriveMode_0Shadow (*(unsigned char*)&Port_2_DriveMode_0_SHADE)
//   LCD_2RS_DriveMode_1Shadow define
extern BYTE Port_2_DriveMode_1_SHADE;
#define LCD_2RS_DriveMode_1Shadow (*(unsigned char*)&Port_2_DriveMode_1_SHADE)
// LCD_2RW address and mask defines
#pragma	ioport	LCD_2RW_Data_ADDR:	0x8
BYTE			LCD_2RW_Data_ADDR;
#pragma	ioport	LCD_2RW_DriveMode_0_ADDR:	0x108
BYTE			LCD_2RW_DriveMode_0_ADDR;
#pragma	ioport	LCD_2RW_DriveMode_1_ADDR:	0x109
BYTE			LCD_2RW_DriveMode_1_ADDR;
#pragma	ioport	LCD_2RW_DriveMode_2_ADDR:	0xb
BYTE			LCD_2RW_DriveMode_2_ADDR;
#pragma	ioport	LCD_2RW_GlobalSelect_ADDR:	0xa
BYTE			LCD_2RW_GlobalSelect_ADDR;
#pragma	ioport	LCD_2RW_IntCtrl_0_ADDR:	0x10a
BYTE			LCD_2RW_IntCtrl_0_ADDR;
#pragma	ioport	LCD_2RW_IntCtrl_1_ADDR:	0x10b
BYTE			LCD_2RW_IntCtrl_1_ADDR;
#pragma	ioport	LCD_2RW_IntEn_ADDR:	0x9
BYTE			LCD_2RW_IntEn_ADDR;
#define LCD_2RW_MASK 0x40
#pragma	ioport	LCD_2RW_MUXBusCtrl_ADDR:	0x1da
BYTE			LCD_2RW_MUXBusCtrl_ADDR;
// LCD_2RW Shadow defines
//   LCD_2RW_DataShadow define
extern BYTE Port_2_Data_SHADE;
#define LCD_2RW_DataShadow (*(unsigned char*)&Port_2_Data_SHADE)
//   LCD_2RW_DriveMode_0Shadow define
extern BYTE Port_2_DriveMode_0_SHADE;
#define LCD_2RW_DriveMode_0Shadow (*(unsigned char*)&Port_2_DriveMode_0_SHADE)
//   LCD_2RW_DriveMode_1Shadow define
extern BYTE Port_2_DriveMode_1_SHADE;
#define LCD_2RW_DriveMode_1Shadow (*(unsigned char*)&Port_2_DriveMode_1_SHADE)
